{"kind":"symbol","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/logging\/loghandler"]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["Linux"],"tokens":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LogHandler","kind":"identifier"}]}],"kind":"declarations"},{"content":[{"level":2,"type":"heading","text":"Overview","anchor":"overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This type is an implementation detail and should not normally be used, unless implementing your own logging backend."},{"type":"text","text":" "},{"type":"text","text":"To use the SwiftLog API, please refer to the documentation of "},{"type":"codeVoice","code":"Logger"},{"type":"text","text":"."}]},{"level":1,"type":"heading","text":"Implementation requirements","anchor":"Implementation-requirements"},{"type":"paragraph","inlineContent":[{"text":"To implement your own ","type":"text"},{"type":"codeVoice","code":"LogHandler"},{"type":"text","text":" you should respect a few requirements that are necessary so applications work"},{"type":"text","text":" "},{"type":"text","text":"as expected regardless of the selected "},{"code":"LogHandler","type":"codeVoice"},{"type":"text","text":" implementation."}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"LogHandler","type":"codeVoice"},{"text":" must be a ","type":"text"},{"code":"struct","type":"codeVoice"},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The metadata and "},{"type":"codeVoice","code":"logLevel"},{"type":"text","text":" properties must be implemented so that setting them on a "},{"type":"codeVoice","code":"Logger"},{"type":"text","text":" does not affect"},{"type":"text","text":" "},{"type":"text","text":"other "},{"type":"codeVoice","code":"Logger"},{"type":"text","text":"s."}]}]}]},{"level":3,"type":"heading","text":"Treat log level & metadata as values","anchor":"Treat-log-level--metadata-as-values"},{"type":"paragraph","inlineContent":[{"text":"When developing your ","type":"text"},{"type":"codeVoice","code":"LogHandler"},{"text":", please make sure the following test works.","type":"text"}]},{"code":["LoggingSystem.bootstrap(MyLogHandler.init) \/\/ your LogHandler might have a different bootstrapping step","var logger1 = Logger(label: \"first logger\")","logger1.logLevel = .debug","logger1[metadataKey: \"only-on\"] = \"first\"","","var logger2 = logger1","logger2.logLevel = .error                  \/\/ this must not override `logger1`'s log level","logger2[metadataKey: \"only-on\"] = \"second\" \/\/ this must not override `logger1`'s metadata","","XCTAssertEqual(.debug, logger1.logLevel)","XCTAssertEqual(.error, logger2.logLevel)","XCTAssertEqual(\"first\", logger1[metadataKey: \"only-on\"])","XCTAssertEqual(\"second\", logger2[metadataKey: \"only-on\"])"],"syntax":"swift","type":"codeListing"},{"level":3,"type":"heading","text":"Special cases","anchor":"Special-cases"},{"type":"paragraph","inlineContent":[{"text":"In certain special cases, the log level behaving like a value on ","type":"text"},{"code":"Logger","type":"codeVoice"},{"text":" might not be what you want. For example,","type":"text"},{"text":" ","type":"text"},{"text":"you might want to set the log level across ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"all"}]},{"text":" ","type":"text"},{"code":"Logger","type":"codeVoice"},{"text":"s to ","type":"text"},{"code":".debug","type":"codeVoice"},{"text":" when say a signal (eg. ","type":"text"},{"code":"SIGUSR1","type":"codeVoice"},{"text":") is received","type":"text"},{"text":" ","type":"text"},{"text":"to be able to debug special failures in production. This special case is acceptable but we urge you to create a","type":"text"},{"text":" ","type":"text"},{"text":"solution specific to your ","type":"text"},{"code":"LogHandler","type":"codeVoice"},{"text":" implementation to achieve that. Please find an example implementation of this","type":"text"},{"text":" ","type":"text"},{"text":"behavior below, on reception of the signal you would call","type":"text"},{"text":" ","type":"text"},{"code":"LogHandlerWithGlobalLogLevelOverride.overrideGlobalLogLevel = .debug","type":"codeVoice"},{"text":", for example.","type":"text"}]},{"code":["import class Foundation.NSLock","","public struct LogHandlerWithGlobalLogLevelOverride: LogHandler {","    \/\/ the static properties hold the globally overridden log level (if overridden)","    private static let overrideLock = NSLock()","    private static var overrideLogLevel: Logger.Level? = nil","","    \/\/ this holds the log level if not overridden","    private var _logLevel: Logger.Level = .info","","    \/\/ metadata storage","    public var metadata: Logger.Metadata = [:]","","    public init(label: String) {","        \/\/ [...]","    }","","    public var logLevel: Logger.Level {","        \/\/ when we get asked for the log level, we check if it was globally overridden or not","        get {","            LogHandlerWithGlobalLogLevelOverride.overrideLock.lock()","            defer { LogHandlerWithGlobalLogLevelOverride.overrideLock.unlock() }","            return LogHandlerWithGlobalLogLevelOverride.overrideLogLevel ?? self._logLevel","        }","        \/\/ we set the log level whenever we're asked (note: this might not have an effect if globally","        \/\/ overridden)","        set {","            self._logLevel = newValue","        }","    }","","    public func log(level: Logger.Level, message: Logger.Message, metadata: Logger.Metadata?,","                    source: String, file: String, function: String, line: UInt) {","        \/\/ [...]","    }","","    public subscript(metadataKey metadataKey: String) -> Logger.Metadata.Value? {","        get {","            return self.metadata[metadataKey]","        }","        set(newValue) {","            self.metadata[metadataKey] = newValue","        }","    }","","    \/\/ this is the function to globally override the log level, it is not part of the `LogHandler` protocol","    public static func overrideGlobalLogLevel(_ logLevel: Logger.Level) {","        LogHandlerWithGlobalLogLevelOverride.overrideLock.lock()","        defer { LogHandlerWithGlobalLogLevelOverride.overrideLock.unlock() }","        LogHandlerWithGlobalLogLevelOverride.overrideLogLevel = logLevel","    }","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Please note that the above ","type":"text"},{"type":"codeVoice","code":"LogHandler"},{"text":" will still pass the ‘log level is a value’ test above it iff the global log","type":"text"},{"text":" ","type":"text"},{"text":"level has not been overridden. And most importantly it passes the requirement listed above: A change to the log","type":"text"},{"text":" ","type":"text"},{"text":"level on one ","type":"text"},{"type":"codeVoice","code":"Logger"},{"text":" should not affect the log level of another ","type":"text"},{"type":"codeVoice","code":"Logger"},{"text":" variable.","type":"text"}]}],"kind":"content"}],"relationshipsSections":[{"type":"conformingTypes","kind":"relationships","title":"Conforming Types","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/ConsoleKit\/ConsoleLogger","doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/MultiplexLogHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/StreamLogHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/SwiftLogNoOpLogHandler"]}],"abstract":[{"type":"text","text":"A "},{"code":"LogHandler","type":"codeVoice"},{"type":"text","text":" is an implementation of a logging backend."}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging"]]},"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/LogHandler"},"metadata":{"symbolKind":"protocol","modules":[{"name":"Logging"}],"roleHeading":"Protocol","externalID":"s:7Logging10LogHandlerP","role":"symbol","title":"LogHandler","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LogHandler","kind":"identifier"}],"navigatorTitle":[{"text":"LogHandler","kind":"identifier"}]},"topicSections":[{"title":"Instance Properties","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/LogHandler\/logLevel","doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/LogHandler\/metadata"]},{"title":"Instance Methods","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/LogHandler\/log(level:message:metadata:file:function:line:)-89rya","doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/LogHandler\/log(level:message:metadata:source:file:function:line:)-8kgt7"]},{"title":"Subscripts","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/LogHandler\/subscript(metadataKey:)"]}],"references":{"doc://co.pointfree.VaporRouting/documentation/Logging":{"kind":"symbol","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging","url":"\/documentation\/logging","role":"collection","title":"Logging","abstract":[]},"doc://co.pointfree.VaporRouting/documentation/Logging/LogHandler/logLevel":{"title":"logLevel","kind":"symbol","role":"symbol","required":true,"url":"\/documentation\/logging\/loghandler\/loglevel","type":"topic","abstract":[{"type":"text","text":"Get or set the configured log level."}],"fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"logLevel","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7Logging6LoggerV","text":"Logger","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:7Logging6LoggerV5LevelO","text":"Level","kind":"typeIdentifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/LogHandler\/logLevel"},"doc://co.pointfree.VaporRouting/documentation/Logging/LogHandler":{"title":"LogHandler","kind":"symbol","role":"symbol","url":"\/documentation\/logging\/loghandler","type":"topic","abstract":[{"type":"text","text":"A "},{"code":"LogHandler","type":"codeVoice"},{"type":"text","text":" is an implementation of a logging backend."}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LogHandler","kind":"identifier"}],"navigatorTitle":[{"text":"LogHandler","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/LogHandler"},"doc://co.pointfree.VaporRouting/documentation/Logging/MultiplexLogHandler":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/MultiplexLogHandler","abstract":[{"type":"text","text":"A pseudo-"},{"type":"codeVoice","code":"LogHandler"},{"type":"text","text":" that can be used to send messages to multiple other "},{"type":"codeVoice","code":"LogHandler"},{"type":"text","text":"s."}],"kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MultiplexLogHandler","kind":"identifier"}],"url":"\/documentation\/logging\/multiplexloghandler","title":"MultiplexLogHandler","navigatorTitle":[{"text":"MultiplexLogHandler","kind":"identifier"}],"type":"topic","role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Logging/StreamLogHandler":{"title":"StreamLogHandler","kind":"symbol","role":"symbol","url":"\/documentation\/logging\/streamloghandler","type":"topic","abstract":[{"code":"StreamLogHandler","type":"codeVoice"},{"type":"text","text":" is a simple implementation of "},{"code":"LogHandler","type":"codeVoice"},{"type":"text","text":" for directing"},{"type":"text","text":" "},{"code":"Logger","type":"codeVoice"},{"type":"text","text":" output to either "},{"code":"stderr","type":"codeVoice"},{"type":"text","text":" or "},{"code":"stdout","type":"codeVoice"},{"type":"text","text":" via the factory methods."}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"StreamLogHandler","kind":"identifier"}],"navigatorTitle":[{"text":"StreamLogHandler","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/StreamLogHandler"},"doc://co.pointfree.VaporRouting/documentation/Logging/SwiftLogNoOpLogHandler":{"title":"SwiftLogNoOpLogHandler","kind":"symbol","role":"symbol","url":"\/documentation\/logging\/swiftlognooploghandler","type":"topic","abstract":[{"type":"text","text":"No operation LogHandler, used when no logging is required"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SwiftLogNoOpLogHandler","kind":"identifier"}],"navigatorTitle":[{"text":"SwiftLogNoOpLogHandler","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/SwiftLogNoOpLogHandler"},"doc://co.pointfree.VaporRouting/documentation/Logging/LogHandler/log(level:message:metadata:source:file:function:line:)-8kgt7":{"title":"log(level:message:metadata:source:file:function:line:)","kind":"symbol","role":"symbol","required":true,"url":"\/documentation\/logging\/loghandler\/log(level:message:metadata:source:file:function:line:)-8kgt7","defaultImplementations":1,"type":"topic","abstract":[{"type":"text","text":"This method is called when a "},{"code":"LogHandler","type":"codeVoice"},{"type":"text","text":" must emit a log message. There is no need for the "},{"code":"LogHandler","type":"codeVoice"},{"type":"text","text":" to"},{"type":"text","text":" "},{"type":"text","text":"check if the "},{"code":"level","type":"codeVoice"},{"type":"text","text":" is above or below the configured "},{"code":"logLevel","type":"codeVoice"},{"type":"text","text":" as "},{"code":"Logger","type":"codeVoice"},{"type":"text","text":" already performed this check and"},{"type":"text","text":" "},{"type":"text","text":"determined that a message should be logged."}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"log","kind":"identifier"},{"text":"(","kind":"text"},{"text":"level","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Logger","preciseIdentifier":"s:7Logging6LoggerV","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Level","preciseIdentifier":"s:7Logging6LoggerV5LevelO","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"message"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Logger","preciseIdentifier":"s:7Logging6LoggerV"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Message","preciseIdentifier":"s:7Logging6LoggerV7MessageV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"metadata"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Logging6LoggerV","text":"Logger"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:7Logging6LoggerV8Metadataa","text":"Metadata"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"source"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"kind":"text","text":", "},{"kind":"externalParam","text":"file"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"kind":"text","text":", "},{"kind":"externalParam","text":"function"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"kind":"text","text":")"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/LogHandler\/log(level:message:metadata:source:file:function:line:)-8kgt7"},"doc://co.pointfree.VaporRouting/documentation/ConsoleKit/ConsoleLogger":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ConsoleLogger"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"ConsoleLogger"}],"type":"topic","abstract":[{"text":"Outputs logs to a ","type":"text"},{"code":"Console","type":"codeVoice"},{"text":".","type":"text"}],"kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/ConsoleKit\/ConsoleLogger","url":"\/documentation\/consolekit\/consolelogger","title":"ConsoleLogger"},"doc://co.pointfree.VaporRouting/documentation/Logging/LogHandler/log(level:message:metadata:file:function:line:)-89rya":{"title":"log(level:message:metadata:file:function:line:)","kind":"symbol","role":"symbol","required":true,"url":"\/documentation\/logging\/loghandler\/log(level:message:metadata:file:function:line:)-89rya","defaultImplementations":1,"type":"topic","abstract":[{"type":"text","text":"SwiftLog 1.0 compatibility method. Please do "},{"type":"emphasis","inlineContent":[{"text":"not","type":"text"}]},{"type":"text","text":" implement, implement"},{"type":"text","text":" "},{"code":"log(level:message:metadata:source:file:function:line:)","type":"codeVoice"},{"type":"text","text":" instead."}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"log","kind":"identifier"},{"text":"(","kind":"text"},{"text":"level","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7Logging6LoggerV","text":"Logger","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:7Logging6LoggerV5LevelO","text":"Level","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"message","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7Logging6LoggerV","text":"Logger","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:7Logging6LoggerV7MessageV","text":"Message","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"metadata","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Logger","preciseIdentifier":"s:7Logging6LoggerV","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Metadata","preciseIdentifier":"s:7Logging6LoggerV8Metadataa","kind":"typeIdentifier"},{"text":"?, ","kind":"text"},{"text":"file","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"externalParam","text":"function"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"kind":"text","text":")"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/LogHandler\/log(level:message:metadata:file:function:line:)-89rya","deprecated":true},"doc://co.pointfree.VaporRouting/documentation/Logging/LogHandler/metadata":{"title":"metadata","kind":"symbol","role":"symbol","required":true,"url":"\/documentation\/logging\/loghandler\/metadata","type":"topic","abstract":[{"type":"text","text":"Get or set the entire metadata storage as a dictionary."}],"fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"metadata","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7Logging6LoggerV","text":"Logger","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:7Logging6LoggerV8Metadataa","text":"Metadata","kind":"typeIdentifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/LogHandler\/metadata"},"doc://co.pointfree.VaporRouting/documentation/Logging/LogHandler/subscript(metadataKey:)":{"title":"subscript(metadataKey:)","kind":"symbol","role":"symbol","required":true,"url":"\/documentation\/logging\/loghandler\/subscript(metadatakey:)","type":"topic","abstract":[{"type":"text","text":"Add, remove, or change the logging metadata."}],"fragments":[{"text":"subscript","kind":"keyword"},{"text":"(","kind":"text"},{"text":"metadataKey","kind":"externalParam"},{"text":" _: ","kind":"text"},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:7Logging6LoggerV","text":"Logger","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:7Logging6LoggerV8Metadataa","text":"Metadata","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:SD5Valuea","text":"Value","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/LogHandler\/subscript(metadataKey:)"}}}