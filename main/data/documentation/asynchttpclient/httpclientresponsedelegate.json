{"schemaVersion":{"patch":0,"major":0,"minor":3},"kind":"symbol","hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncHTTPClient"]]},"sections":[],"topicSections":[{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncHTTPClient\/HTTPClientResponseDelegate\/Response"],"title":"Associated Types"},{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncHTTPClient\/HTTPClientResponseDelegate\/didFinishRequest(task:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncHTTPClient\/HTTPClientResponseDelegate\/didReceiveBodyPart(task:_:)-4fd4v","doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncHTTPClient\/HTTPClientResponseDelegate\/didReceiveError(task:_:)-fhsg","doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncHTTPClient\/HTTPClientResponseDelegate\/didReceiveHead(task:_:)-9r4xd","doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncHTTPClient\/HTTPClientResponseDelegate\/didSendRequest(task:)-9od5p","doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncHTTPClient\/HTTPClientResponseDelegate\/didSendRequestHead(task:_:)-6khai","doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncHTTPClient\/HTTPClientResponseDelegate\/didSendRequestPart(task:_:)-4qxap"],"title":"Instance Methods"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncHTTPClient\/HTTPClientResponseDelegate"},"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HTTPClientResponseDelegate"},{"kind":"text","text":" : AnyObject"}],"platforms":["Linux"]}],"kind":"declarations"},{"content":[{"text":"Backpressure","type":"heading","anchor":"Backpressure","level":3},{"inlineContent":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"HTTPClientResponseDelegate"},{"text":" can be used to exert backpressure on the server response. This is achieved by way of the futures returned from","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"didReceiveHead"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"didReceiveBodyPart"},{"text":". The following functions are part of the “backpressure system” in the delegate:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"didReceiveHead"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"didReceiveBodyPart"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"didFinishRequest"}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"didReceiveError"}],"type":"paragraph"}]}]},{"inlineContent":[{"type":"text","text":"The first three methods are strictly "},{"type":"emphasis","inlineContent":[{"type":"text","text":"exclusive"}]},{"text":", with that exclusivity managed by the futures returned by ","type":"text"},{"code":"didReceiveHead","type":"codeVoice"},{"text":" and","type":"text"},{"text":" ","type":"text"},{"code":"didReceiveBodyPart","type":"codeVoice"},{"text":". What this means is that until the returned future is completed, none of these three methods will be called","type":"text"},{"text":" ","type":"text"},{"text":"again. This allows delegates to rate limit the server to a capacity it can manage. ","type":"text"},{"code":"didFinishRequest","type":"codeVoice"},{"text":" does not return a future,","type":"text"},{"text":" ","type":"text"},{"text":"as we are expecting no more data from the server at this time.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"codeVoice","code":"didReceiveError"},{"type":"text","text":" is somewhat special: it signals the end of this regime. "},{"type":"codeVoice","code":"didRecieveError"},{"type":"text","text":" is not exclusive: it may be called at"},{"type":"text","text":" "},{"type":"text","text":"any time, even if a returned future is not yet completed. "},{"type":"codeVoice","code":"didReceiveError"},{"type":"text","text":" is terminal, meaning that once it has been called none"},{"type":"text","text":" "},{"type":"text","text":"of these four methods will be called again. This can be used as a signal to abandon all outstanding work."}],"type":"paragraph"},{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"This delegate is strongly held by the ","type":"text"},{"code":"HTTPTaskHandler","type":"codeVoice"},{"text":" ","type":"text"},{"text":"for the duration of the ","type":"text"},{"code":"Request","type":"codeVoice"},{"text":" processing and will be","type":"text"},{"text":" ","type":"text"},{"text":"released together with the ","type":"text"},{"code":"HTTPTaskHandler","type":"codeVoice"},{"text":" when channel is closed.","type":"text"},{"text":" ","type":"text"},{"text":"Users of the library are not required to keep a reference to the","type":"text"},{"text":" ","type":"text"},{"text":"object that implements this protocol, but may do so if needed.","type":"text"}]}],"style":"note"}],"kind":"content"}],"relationshipsSections":[{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncHTTPClient\/FileDownloadDelegate","doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncHTTPClient\/HTTPClientCopyingDelegate","doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncHTTPClient\/ResponseAccumulator"],"title":"Conforming Types","type":"conformingTypes","kind":"relationships"}],"abstract":[{"code":"HTTPClientResponseDelegate","type":"codeVoice"},{"text":" allows an implementation to receive notifications about request processing and to control how response parts are processed.","type":"text"},{"text":" ","type":"text"},{"text":"You can implement this protocol if you need fine-grained control over an HTTP request\/response, for example, if you want to inspect the response","type":"text"},{"text":" ","type":"text"},{"text":"headers before deciding whether to accept a response body, or if you want to stream your request body. Pass an instance of your conforming","type":"text"},{"text":" ","type":"text"},{"text":"class to the ","type":"text"},{"code":"HTTPClient.execute()","type":"codeVoice"},{"text":" method and this package will call each delegate method appropriately as the request takes place.\/","type":"text"}],"metadata":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HTTPClientResponseDelegate","kind":"identifier"}],"modules":[{"name":"AsyncHTTPClient"}],"roleHeading":"Protocol","navigatorTitle":[{"text":"HTTPClientResponseDelegate","kind":"identifier"}],"externalID":"s:15AsyncHTTPClient0B16ResponseDelegateP","symbolKind":"protocol","role":"symbol","title":"HTTPClientResponseDelegate"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/asynchttpclient\/httpclientresponsedelegate"]}],"references":{"doc://co.pointfree.VaporRouting/documentation/AsyncHTTPClient":{"type":"topic","title":"AsyncHTTPClient","url":"\/documentation\/asynchttpclient","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncHTTPClient","abstract":[],"kind":"symbol","role":"collection"},"doc://co.pointfree.VaporRouting/documentation/AsyncHTTPClient/HTTPClientResponseDelegate/didSendRequestPart(task:_:)-4qxap":{"required":true,"title":"didSendRequestPart(task:_:)","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"didSendRequestPart"},{"kind":"text","text":"("},{"kind":"externalParam","text":"task"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"HTTPClient","preciseIdentifier":"s:15AsyncHTTPClient0B0C"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Task","preciseIdentifier":"s:15AsyncHTTPClient0B0C4TaskC"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Response","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"preciseIdentifier":"s:7NIOCore6IODataO","text":"IOData","kind":"typeIdentifier"},{"text":")","kind":"text"}],"kind":"symbol","defaultImplementations":1,"abstract":[{"text":"Called when a part of the request body is sent. Could be called zero or more times.","type":"text"}],"url":"\/documentation\/asynchttpclient\/httpclientresponsedelegate\/didsendrequestpart(task:_:)-4qxap","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncHTTPClient\/HTTPClientResponseDelegate\/didSendRequestPart(task:_:)-4qxap","role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/AsyncHTTPClient/HTTPClientResponseDelegate/didReceiveBodyPart(task:_:)-4fd4v":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncHTTPClient\/HTTPClientResponseDelegate\/didReceiveBodyPart(task:_:)-4fd4v","defaultImplementations":1,"abstract":[{"text":"Called when part of a response body is received. Could be called zero or more times.","type":"text"},{"text":" ","type":"text"},{"text":"You must return an ","type":"text"},{"code":"EventLoopFuture<Void>","type":"codeVoice"},{"text":" that you complete when you have finished processing the body part.","type":"text"},{"text":" ","type":"text"},{"text":"You can create an already succeeded future by calling ","type":"text"},{"code":"task.eventLoop.makeSucceededFuture(())","type":"codeVoice"},{"text":".","type":"text"}],"role":"symbol","title":"didReceiveBodyPart(task:_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"didReceiveBodyPart","kind":"identifier"},{"text":"(","kind":"text"},{"text":"task","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"HTTPClient","preciseIdentifier":"s:15AsyncHTTPClient0B0C","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Task","preciseIdentifier":"s:15AsyncHTTPClient0B0C4TaskC","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Response","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"text":"ByteBuffer","preciseIdentifier":"s:7NIOCore10ByteBufferV","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Void","preciseIdentifier":"s:s4Voida","kind":"typeIdentifier"},{"text":">","kind":"text"}],"type":"topic","url":"\/documentation\/asynchttpclient\/httpclientresponsedelegate\/didreceivebodypart(task:_:)-4fd4v","required":true,"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/AsyncHTTPClient/HTTPClientResponseDelegate/didReceiveError(task:_:)-fhsg":{"title":"didReceiveError(task:_:)","kind":"symbol","required":true,"defaultImplementations":1,"abstract":[{"type":"text","text":"Called when error was thrown during request execution. Will be called zero or one time only. Request processing will be stopped after that."}],"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncHTTPClient\/HTTPClientResponseDelegate\/didReceiveError(task:_:)-fhsg","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"didReceiveError"},{"kind":"text","text":"("},{"kind":"externalParam","text":"task"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"HTTPClient","preciseIdentifier":"s:15AsyncHTTPClient0B0C"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Task","preciseIdentifier":"s:15AsyncHTTPClient0B0C4TaskC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Response"},{"kind":"text","text":">, "},{"kind":"typeIdentifier","text":"Error","preciseIdentifier":"s:s5ErrorP"},{"kind":"text","text":")"}],"type":"topic","url":"\/documentation\/asynchttpclient\/httpclientresponsedelegate\/didreceiveerror(task:_:)-fhsg"},"doc://co.pointfree.VaporRouting/documentation/AsyncHTTPClient/HTTPClientResponseDelegate/Response":{"role":"symbol","fragments":[{"kind":"keyword","text":"associatedtype"},{"kind":"text","text":" "},{"kind":"identifier","text":"Response"}],"title":"Response","url":"\/documentation\/asynchttpclient\/httpclientresponsedelegate\/response","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncHTTPClient\/HTTPClientResponseDelegate\/Response","kind":"symbol","required":true,"type":"topic","abstract":[]},"doc://co.pointfree.VaporRouting/documentation/AsyncHTTPClient/HTTPClientResponseDelegate/didReceiveHead(task:_:)-9r4xd":{"kind":"symbol","required":true,"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"didReceiveHead","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"task"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:15AsyncHTTPClient0B0C","text":"HTTPClient"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:15AsyncHTTPClient0B0C4TaskC","text":"Task"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Response"},{"kind":"text","text":">, "},{"kind":"typeIdentifier","preciseIdentifier":"s:8NIOHTTP116HTTPResponseHeadV","text":"HTTPResponseHead"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","text":"EventLoopFuture"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"kind":"text","text":">"}],"defaultImplementations":1,"title":"didReceiveHead(task:_:)","abstract":[{"type":"text","text":"Called when response head is received. Will be called once."},{"type":"text","text":" "},{"type":"text","text":"You must return an "},{"type":"codeVoice","code":"EventLoopFuture<Void>"},{"type":"text","text":" that you complete when you have finished processing the body part."},{"type":"text","text":" "},{"type":"text","text":"You can create an already succeeded future by calling "},{"code":"task.eventLoop.makeSucceededFuture(())","type":"codeVoice"},{"type":"text","text":"."}],"role":"symbol","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncHTTPClient\/HTTPClientResponseDelegate\/didReceiveHead(task:_:)-9r4xd","url":"\/documentation\/asynchttpclient\/httpclientresponsedelegate\/didreceivehead(task:_:)-9r4xd"},"doc://co.pointfree.VaporRouting/documentation/AsyncHTTPClient/ResponseAccumulator":{"role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ResponseAccumulator","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncHTTPClient\/ResponseAccumulator","url":"\/documentation\/asynchttpclient\/responseaccumulator","type":"topic","title":"ResponseAccumulator","navigatorTitle":[{"text":"ResponseAccumulator","kind":"identifier"}],"abstract":[],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/AsyncHTTPClient/FileDownloadDelegate":{"url":"\/documentation\/asynchttpclient\/filedownloaddelegate","navigatorTitle":[{"text":"FileDownloadDelegate","kind":"identifier"}],"title":"FileDownloadDelegate","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FileDownloadDelegate","kind":"identifier"}],"kind":"symbol","role":"symbol","abstract":[{"text":"Handles a streaming download to a given file path, allowing headers and progress to be reported.","type":"text"}],"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncHTTPClient\/FileDownloadDelegate"},"doc://co.pointfree.VaporRouting/documentation/AsyncHTTPClient/HTTPClientResponseDelegate/didSendRequestHead(task:_:)-6khai":{"kind":"symbol","title":"didSendRequestHead(task:_:)","required":true,"role":"symbol","defaultImplementations":1,"url":"\/documentation\/asynchttpclient\/httpclientresponsedelegate\/didsendrequesthead(task:_:)-6khai","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"didSendRequestHead","kind":"identifier"},{"text":"(","kind":"text"},{"text":"task","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"HTTPClient","kind":"typeIdentifier","preciseIdentifier":"s:15AsyncHTTPClient0B0C"},{"text":".","kind":"text"},{"text":"Task","kind":"typeIdentifier","preciseIdentifier":"s:15AsyncHTTPClient0B0C4TaskC"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Response","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"text":"HTTPRequestHead","kind":"typeIdentifier","preciseIdentifier":"s:8NIOHTTP115HTTPRequestHeadV"},{"text":")","kind":"text"}],"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncHTTPClient\/HTTPClientResponseDelegate\/didSendRequestHead(task:_:)-6khai","abstract":[{"text":"Called when the request head is sent. Will be called once.","type":"text"}]},"doc://co.pointfree.VaporRouting/documentation/AsyncHTTPClient/HTTPClientCopyingDelegate":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncHTTPClient\/HTTPClientCopyingDelegate","navigatorTitle":[{"text":"HTTPClientCopyingDelegate","kind":"identifier"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HTTPClientCopyingDelegate","kind":"identifier"}],"url":"\/documentation\/asynchttpclient\/httpclientcopyingdelegate","abstract":[],"type":"topic","title":"HTTPClientCopyingDelegate","kind":"symbol","role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/AsyncHTTPClient/HTTPClientResponseDelegate":{"navigatorTitle":[{"text":"HTTPClientResponseDelegate","kind":"identifier"}],"role":"symbol","url":"\/documentation\/asynchttpclient\/httpclientresponsedelegate","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HTTPClientResponseDelegate","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncHTTPClient\/HTTPClientResponseDelegate","abstract":[{"type":"codeVoice","code":"HTTPClientResponseDelegate"},{"type":"text","text":" allows an implementation to receive notifications about request processing and to control how response parts are processed."},{"type":"text","text":" "},{"type":"text","text":"You can implement this protocol if you need fine-grained control over an HTTP request\/response, for example, if you want to inspect the response"},{"type":"text","text":" "},{"type":"text","text":"headers before deciding whether to accept a response body, or if you want to stream your request body. Pass an instance of your conforming"},{"type":"text","text":" "},{"type":"text","text":"class to the "},{"type":"codeVoice","code":"HTTPClient.execute()"},{"type":"text","text":" method and this package will call each delegate method appropriately as the request takes place.\/"}],"type":"topic","kind":"symbol","title":"HTTPClientResponseDelegate"},"doc://co.pointfree.VaporRouting/documentation/AsyncHTTPClient/HTTPClientResponseDelegate/didSendRequest(task:)-9od5p":{"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncHTTPClient\/HTTPClientResponseDelegate\/didSendRequest(task:)-9od5p","kind":"symbol","required":true,"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"didSendRequest","kind":"identifier"},{"text":"(","kind":"text"},{"text":"task","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"HTTPClient","kind":"typeIdentifier","preciseIdentifier":"s:15AsyncHTTPClient0B0C"},{"text":".","kind":"text"},{"text":"Task","kind":"typeIdentifier","preciseIdentifier":"s:15AsyncHTTPClient0B0C4TaskC"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Response","kind":"typeIdentifier"},{"text":">)","kind":"text"}],"title":"didSendRequest(task:)","url":"\/documentation\/asynchttpclient\/httpclientresponsedelegate\/didsendrequest(task:)-9od5p","role":"symbol","abstract":[{"text":"Called when the request is fully sent. Will be called once.","type":"text"}],"defaultImplementations":1},"doc://co.pointfree.VaporRouting/documentation/AsyncHTTPClient/HTTPClientResponseDelegate/didFinishRequest(task:)":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"didFinishRequest","kind":"identifier"},{"text":"(","kind":"text"},{"text":"task","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"HTTPClient","preciseIdentifier":"s:15AsyncHTTPClient0B0C","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Task","preciseIdentifier":"s:15AsyncHTTPClient0B0C4TaskC","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Response","kind":"typeIdentifier"},{"text":">) ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Response","kind":"typeIdentifier"}],"required":true,"url":"\/documentation\/asynchttpclient\/httpclientresponsedelegate\/didfinishrequest(task:)","kind":"symbol","role":"symbol","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncHTTPClient\/HTTPClientResponseDelegate\/didFinishRequest(task:)","title":"didFinishRequest(task:)","abstract":[{"text":"Called when the complete HTTP request is finished. You must return an instance of your ","type":"text"},{"type":"codeVoice","code":"Response"},{"text":" associated type. Will be called once, except if an error occurred.","type":"text"}]}}}