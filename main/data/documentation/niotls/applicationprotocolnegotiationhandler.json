{"primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["Linux"],"tokens":[{"text":"final","kind":"keyword"},{"text":" ","kind":"text"},{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ApplicationProtocolNegotiationHandler","kind":"identifier"}]}],"kind":"declarations"},{"content":[{"level":2,"type":"heading","anchor":"overview","text":"Overview"},{"inlineContent":[{"text":"The standard pattern used by applications that want to use ALPN is to select","type":"text"},{"text":" ","type":"text"},{"text":"an application protocol based on the result, optionally falling back to some","type":"text"},{"text":" ","type":"text"},{"text":"default protocol. To do this in SwiftNIO requires that the channel pipeline be","type":"text"},{"text":" ","type":"text"},{"text":"reconfigured based on the result of the ALPN negotiation. This channel handler","type":"text"},{"text":" ","type":"text"},{"text":"encapsulates that logic in a generic form that doesnâ€™t depend on the specific","type":"text"},{"text":" ","type":"text"},{"text":"TLS implementation in use by using ","type":"text"},{"type":"codeVoice","code":"TLSUserEvent"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The user of this channel handler provides a single closure that is called with"},{"type":"text","text":" "},{"type":"text","text":"an "},{"type":"codeVoice","code":"ALPNResult"},{"type":"text","text":" when the ALPN negotiation is complete. Based on that result"},{"type":"text","text":" "},{"type":"text","text":"the user is free to reconfigure the "},{"type":"codeVoice","code":"ChannelPipeline"},{"type":"text","text":" as required, and should"},{"type":"text","text":" "},{"type":"text","text":"return an "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":" that will complete when the pipeline is reconfigured."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Until the "},{"code":"EventLoopFuture","type":"codeVoice"},{"type":"text","text":" completes, this channel handler will buffer inbound"},{"type":"text","text":" "},{"type":"text","text":"data. When the "},{"code":"EventLoopFuture","type":"codeVoice"},{"type":"text","text":" completes, the buffered data will be replayed"},{"type":"text","text":" "},{"type":"text","text":"down the channel. Then, finally, this channel handler will automatically remove"},{"type":"text","text":" "},{"type":"text","text":"itself from the channel pipeline, leaving the pipeline in its final"},{"type":"text","text":" "},{"type":"text","text":"configuration."}],"type":"paragraph"}],"kind":"content"}],"schemaVersion":{"major":0,"minor":3,"patch":0},"metadata":{"roleHeading":"Class","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ApplicationProtocolNegotiationHandler"}],"modules":[{"name":"NIOTLS"}],"externalID":"s:6NIOTLS37ApplicationProtocolNegotiationHandlerC","title":"ApplicationProtocolNegotiationHandler","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"ApplicationProtocolNegotiationHandler"}],"symbolKind":"class"},"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOTLS\/ApplicationProtocolNegotiationHandler","interfaceLanguage":"swift"},"topicSections":[{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOTLS\/ApplicationProtocolNegotiationHandler\/init(alpnCompleteHandler:)-1b0z6","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOTLS\/ApplicationProtocolNegotiationHandler\/init(alpnCompleteHandler:)-8h9zw"],"title":"Initializers"},{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOTLS\/ApplicationProtocolNegotiationHandler\/channelRead(context:data:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOTLS\/ApplicationProtocolNegotiationHandler\/userInboundEventTriggered(context:event:)"],"title":"Instance Methods"},{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOTLS\/ApplicationProtocolNegotiationHandler\/InboundIn","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOTLS\/ApplicationProtocolNegotiationHandler\/InboundOut"],"title":"Type Aliases"},{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOTLS\/ApplicationProtocolNegotiationHandler\/ChannelHandler-Implementations","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOTLS\/ApplicationProtocolNegotiationHandler\/ChannelInboundHandler-Implementations","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOTLS\/ApplicationProtocolNegotiationHandler\/RemovableChannelHandler-Implementations"],"generated":true,"title":"Default Implementations"}],"relationshipsSections":[{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelInboundHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/RemovableChannelHandler"],"type":"conformsTo","title":"Conforms To","kind":"relationships"}],"abstract":[{"type":"text","text":"A helper "},{"code":"ChannelInboundHandler","type":"codeVoice"},{"type":"text","text":" that makes it easy to swap channel pipelines"},{"type":"text","text":" "},{"type":"text","text":"based on the result of an ALPN negotiation."}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/niotls\/applicationprotocolnegotiationhandler"]}],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOTLS"]]},"sections":[],"references":{"doc://co.pointfree.VaporRouting/documentation/NIOTLS/ApplicationProtocolNegotiationHandler/userInboundEventTriggered(context:event:)":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOTLS\/ApplicationProtocolNegotiationHandler\/userInboundEventTriggered(context:event:)","kind":"symbol","abstract":[{"text":"Called when a user inbound event has been triggered.","type":"text"}],"role":"symbol","url":"\/documentation\/niotls\/applicationprotocolnegotiationhandler\/userinboundeventtriggered(context:event:)","title":"userInboundEventTriggered(context:event:)","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"userInboundEventTriggered","kind":"identifier"},{"text":"(","kind":"text"},{"text":"context","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"ChannelHandlerContext","preciseIdentifier":"s:7NIOCore21ChannelHandlerContextC","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"event","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Any","kind":"keyword"},{"kind":"text","text":")"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/RemovableChannelHandler":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/RemovableChannelHandler","url":"\/documentation\/niocore\/removablechannelhandler","role":"symbol","title":"RemovableChannelHandler","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"RemovableChannelHandler"}],"navigatorTitle":[{"kind":"identifier","text":"RemovableChannelHandler"}],"type":"topic","abstract":[{"text":"A ","type":"text"},{"code":"RemovableChannelHandler","type":"codeVoice"},{"text":" is a ","type":"text"},{"code":"ChannelHandler","type":"codeVoice"},{"text":" that can be dynamically removed from a ","type":"text"},{"code":"ChannelPipeline","type":"codeVoice"},{"text":" whilst","type":"text"},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":" is operating normally.","type":"text"},{"text":" ","type":"text"},{"text":"A ","type":"text"},{"code":"RemovableChannelHandler","type":"codeVoice"},{"text":" is required to remove itself from the ","type":"text"},{"code":"ChannelPipeline","type":"codeVoice"},{"text":" (using","type":"text"},{"text":" ","type":"text"},{"code":"ChannelHandlerContext.removeHandler","type":"codeVoice"},{"text":") as soon as possible.","type":"text"}],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOTLS/ApplicationProtocolNegotiationHandler/init(alpnCompleteHandler:)-1b0z6":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOTLS\/ApplicationProtocolNegotiationHandler\/init(alpnCompleteHandler:)-1b0z6","type":"topic","title":"init(alpnCompleteHandler:)","abstract":[{"type":"text","text":"Create an "},{"type":"codeVoice","code":"ApplicationProtocolNegotiationHandler"},{"type":"text","text":" with the given completion"},{"type":"text","text":" "},{"text":"callback.","type":"text"}],"fragments":[{"text":"convenience","kind":"keyword"},{"text":" ","kind":"text"},{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"alpnCompleteHandler","kind":"externalParam"},{"text":": (","kind":"text"},{"preciseIdentifier":"s:6NIOTLS10ALPNResultO","text":"ALPNResult","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:7NIOCore15EventLoopFutureC","text":"EventLoopFuture","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"text":">)","kind":"text"}],"role":"symbol","url":"\/documentation\/niotls\/applicationprotocolnegotiationhandler\/init(alpncompletehandler:)-1b0z6","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOTLS":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOTLS","kind":"symbol","role":"collection","abstract":[],"title":"NIOTLS","type":"topic","url":"\/documentation\/niotls"},"doc://co.pointfree.VaporRouting/documentation/NIOTLS/ApplicationProtocolNegotiationHandler/RemovableChannelHandler-Implementations":{"type":"topic","abstract":[],"url":"\/documentation\/niotls\/applicationprotocolnegotiationhandler\/removablechannelhandler-implementations","title":"RemovableChannelHandler Implementations","role":"collectionGroup","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOTLS\/ApplicationProtocolNegotiationHandler\/RemovableChannelHandler-Implementations","kind":"article"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelInboundHandler":{"navigatorTitle":[{"kind":"identifier","text":"ChannelInboundHandler"}],"title":"ChannelInboundHandler","abstract":[{"type":"codeVoice","code":"ChannelHandler"},{"type":"text","text":" which handles inbound I\/O events for a "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":"."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelInboundHandler","role":"symbol","url":"\/documentation\/niocore\/channelinboundhandler","type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ChannelInboundHandler"}]},"doc://co.pointfree.VaporRouting/documentation/NIOTLS/ApplicationProtocolNegotiationHandler/init(alpnCompleteHandler:)-8h9zw":{"type":"topic","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"alpnCompleteHandler"},{"kind":"text","text":": ("},{"preciseIdentifier":"s:6NIOTLS10ALPNResultO","kind":"typeIdentifier","text":"ALPNResult"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:7NIOCore7ChannelP","text":"Channel","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:7NIOCore15EventLoopFutureC","text":"EventLoopFuture","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"text":">)","kind":"text"}],"abstract":[{"type":"text","text":"Create an "},{"code":"ApplicationProtocolNegotiationHandler","type":"codeVoice"},{"type":"text","text":" with the given completion"},{"type":"text","text":" "},{"type":"text","text":"callback."}],"url":"\/documentation\/niotls\/applicationprotocolnegotiationhandler\/init(alpncompletehandler:)-8h9zw","title":"init(alpnCompleteHandler:)","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOTLS\/ApplicationProtocolNegotiationHandler\/init(alpnCompleteHandler:)-8h9zw","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOTLS/ApplicationProtocolNegotiationHandler/channelRead(context:data:)":{"abstract":[{"text":"Called when some data has been read from the remote peer.","type":"text"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOTLS\/ApplicationProtocolNegotiationHandler\/channelRead(context:data:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"channelRead"},{"kind":"text","text":"("},{"kind":"externalParam","text":"context"},{"kind":"text","text":": "},{"preciseIdentifier":"s:7NIOCore21ChannelHandlerContextC","kind":"typeIdentifier","text":"ChannelHandlerContext"},{"kind":"text","text":", "},{"text":"data","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7NIOCore6NIOAnyV","text":"NIOAny","kind":"typeIdentifier"},{"text":")","kind":"text"}],"role":"symbol","url":"\/documentation\/niotls\/applicationprotocolnegotiationhandler\/channelread(context:data:)","type":"topic","kind":"symbol","title":"channelRead(context:data:)"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelHandler":{"kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ChannelHandler"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelHandler","url":"\/documentation\/niocore\/channelhandler","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ChannelHandler"}],"role":"symbol","title":"ChannelHandler","abstract":[{"text":"You should ","type":"text"},{"inlineContent":[{"type":"text","text":"never"}],"type":"emphasis"},{"text":" implement this protocol directly. Please implement one of its sub-protocols.","type":"text"}]},"doc://co.pointfree.VaporRouting/documentation/NIOTLS/ApplicationProtocolNegotiationHandler/InboundOut":{"role":"symbol","type":"topic","kind":"symbol","url":"\/documentation\/niotls\/applicationprotocolnegotiationhandler\/inboundout","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"InboundOut"}],"abstract":[{"type":"text","text":"The type of the inbound data which will be forwarded to the next "},{"type":"codeVoice","code":"ChannelInboundHandler"},{"type":"text","text":" in the "},{"type":"codeVoice","code":"ChannelPipeline"},{"type":"text","text":"."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOTLS\/ApplicationProtocolNegotiationHandler\/InboundOut","navigatorTitle":[{"text":"InboundOut","kind":"identifier"}],"title":"ApplicationProtocolNegotiationHandler.InboundOut"},"doc://co.pointfree.VaporRouting/documentation/NIOTLS/ApplicationProtocolNegotiationHandler/ChannelHandler-Implementations":{"role":"collectionGroup","type":"topic","kind":"article","url":"\/documentation\/niotls\/applicationprotocolnegotiationhandler\/channelhandler-implementations","abstract":[],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOTLS\/ApplicationProtocolNegotiationHandler\/ChannelHandler-Implementations","title":"ChannelHandler Implementations"},"doc://co.pointfree.VaporRouting/documentation/NIOTLS/ApplicationProtocolNegotiationHandler/ChannelInboundHandler-Implementations":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOTLS\/ApplicationProtocolNegotiationHandler\/ChannelInboundHandler-Implementations","role":"collectionGroup","url":"\/documentation\/niotls\/applicationprotocolnegotiationhandler\/channelinboundhandler-implementations","abstract":[],"title":"ChannelInboundHandler Implementations","kind":"article","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/NIOTLS/ApplicationProtocolNegotiationHandler":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOTLS\/ApplicationProtocolNegotiationHandler","url":"\/documentation\/niotls\/applicationprotocolnegotiationhandler","role":"symbol","title":"ApplicationProtocolNegotiationHandler","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ApplicationProtocolNegotiationHandler"}],"navigatorTitle":[{"kind":"identifier","text":"ApplicationProtocolNegotiationHandler"}],"type":"topic","abstract":[{"text":"A helper ","type":"text"},{"code":"ChannelInboundHandler","type":"codeVoice"},{"text":" that makes it easy to swap channel pipelines","type":"text"},{"text":" ","type":"text"},{"text":"based on the result of an ALPN negotiation.","type":"text"}],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOTLS/ApplicationProtocolNegotiationHandler/InboundIn":{"kind":"symbol","abstract":[{"text":"The type of the inbound data which is wrapped in ","type":"text"},{"type":"codeVoice","code":"NIOAny"},{"type":"text","text":"."}],"title":"ApplicationProtocolNegotiationHandler.InboundIn","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOTLS\/ApplicationProtocolNegotiationHandler\/InboundIn","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"InboundIn"}],"navigatorTitle":[{"kind":"identifier","text":"InboundIn"}],"url":"\/documentation\/niotls\/applicationprotocolnegotiationhandler\/inboundin","role":"symbol"}}}