{"metadata":{"role":"symbol","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"OutboundIn"}],"symbolKind":"typealias","navigatorTitle":[{"kind":"identifier","text":"OutboundIn"}],"modules":[{"name":"NIOSOCKS"}],"roleHeading":"Type Alias","title":"SOCKSClientHandler.OutboundIn","externalID":"s:8NIOSOCKS18SOCKSClientHandlerC10OutboundIna"},"kind":"symbol","primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["Linux"],"tokens":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"OutboundIn","kind":"identifier"},{"text":" = ","kind":"text"},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBuffer","kind":"typeIdentifier","text":"ByteBuffer","preciseIdentifier":"s:7NIOCore10ByteBufferV"}]}],"kind":"declarations"}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS\/SOCKSClientHandler"]]},"schemaVersion":{"minor":3,"major":0,"patch":0},"sections":[],"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS\/SOCKSClientHandler\/OutboundIn","interfaceLanguage":"swift"},"variants":[{"paths":["\/documentation\/niosocks\/socksclienthandler\/outboundin"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"type":"text","text":"The type of the outbound data which is wrapped in "},{"type":"codeVoice","code":"NIOAny"},{"type":"text","text":"."}],"references":{"doc://co.pointfree.VaporRouting/documentation/NIOSOCKS/SOCKSClientHandler":{"navigatorTitle":[{"text":"SOCKSClientHandler","kind":"identifier"}],"abstract":[{"text":"Connects to a SOCKS server to establish a proxied connection","type":"text"},{"text":" ","type":"text"},{"text":"to a host. This handler should be inserted at the beginning of a","type":"text"},{"text":" ","type":"text"},{"text":"channelâ€™s pipeline. Note that SOCKS only supports fully-qualified","type":"text"},{"text":" ","type":"text"},{"text":"domain names and IPv4 or IPv6 sockets, and not UNIX sockets.","type":"text"}],"title":"SOCKSClientHandler","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"SOCKSClientHandler","kind":"identifier"}],"kind":"symbol","role":"symbol","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS\/SOCKSClientHandler","url":"\/documentation\/niosocks\/socksclienthandler"},"doc://co.pointfree.VaporRouting/documentation/NIOSOCKS/SOCKSClientHandler/OutboundIn":{"title":"SOCKSClientHandler.OutboundIn","kind":"symbol","fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"OutboundIn"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS\/SOCKSClientHandler\/OutboundIn","navigatorTitle":[{"kind":"identifier","text":"OutboundIn"}],"abstract":[{"type":"text","text":"The type of the outbound data which is wrapped in "},{"type":"codeVoice","code":"NIOAny"},{"type":"text","text":"."}],"url":"\/documentation\/niosocks\/socksclienthandler\/outboundin","role":"symbol","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ByteBuffer":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ByteBuffer"}],"navigatorTitle":[{"kind":"identifier","text":"ByteBuffer"}],"title":"ByteBuffer","type":"topic","abstract":[{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" stores contiguously allocated raw bytes. It is a random and sequential accessible sequence of zero or"},{"type":"text","text":" "},{"type":"text","text":"more bytes (octets)."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBuffer","role":"symbol","url":"\/documentation\/niocore\/bytebuffer","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOSOCKS":{"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS","title":"NIOSOCKS","role":"collection","kind":"symbol","url":"\/documentation\/niosocks","abstract":[]}}}