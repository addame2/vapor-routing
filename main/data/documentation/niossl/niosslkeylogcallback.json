{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOSSLKeyLogCallback","kind":"identifier"},{"text":" = (","kind":"text"},{"text":"ByteBuffer","kind":"typeIdentifier","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBuffer","preciseIdentifier":"s:7NIOCore10ByteBufferV"},{"text":") -> ","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"}],"languages":["swift"],"platforms":["Linux"]}]},{"kind":"content","content":[{"type":"heading","text":"Discussion","anchor":"discussion","level":2},{"inlineContent":[{"text":"Wireshark can decrypt packet captures that contain encrypted TLS connections if they have access to the","type":"text"},{"text":" ","type":"text"},{"text":"session keys used to perform the encryption. These keys are normally stored in a file that has a specific","type":"text"},{"text":" ","type":"text"},{"text":"file format. This callback is the low-level primitive that can be used to write such a file.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"When set, this callback will be invoked once per secret. The provided "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" will contain the bytes"},{"type":"text","text":" "},{"type":"text","text":"that need to be written into the file, including the newline character."}],"type":"paragraph"},{"content":[{"inlineContent":[{"type":"text","text":"Please be aware that enabling support for "},{"code":"SSLKEYLOGFILE","type":"codeVoice"},{"type":"text","text":" through this callback will put the secrecy of"},{"text":" ","type":"text"},{"text":"your connections at risk. You should only do so when you are confident that it will not be possible to","type":"text"},{"text":" ","type":"text"},{"text":"extract those secrets unnecessarily.","type":"text"}],"type":"paragraph"}],"type":"aside","style":"warning"}]}],"schemaVersion":{"major":0,"patch":0,"minor":3},"abstract":[{"text":"A callback that can be used to implement ","type":"text"},{"code":"SSLKEYLOGFILE","type":"codeVoice"},{"text":" support.","type":"text"}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSSL"]]},"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSSL\/NIOSSLKeyLogCallback","interfaceLanguage":"swift"},"sections":[],"metadata":{"modules":[{"name":"NIOSSL"}],"fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOSSLKeyLogCallback"}],"title":"NIOSSLKeyLogCallback","roleHeading":"Type Alias","role":"symbol","symbolKind":"typealias","navigatorTitle":[{"kind":"identifier","text":"NIOSSLKeyLogCallback"}],"externalID":"s:6NIOSSL20NIOSSLKeyLogCallbacka"},"kind":"symbol","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/niossl\/niosslkeylogcallback"]}],"references":{"doc://co.pointfree.VaporRouting/documentation/NIOSSL/NIOSSLKeyLogCallback":{"type":"topic","title":"NIOSSLKeyLogCallback","role":"symbol","url":"\/documentation\/niossl\/niosslkeylogcallback","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSSL\/NIOSSLKeyLogCallback","navigatorTitle":[{"kind":"identifier","text":"NIOSSLKeyLogCallback"}],"abstract":[{"type":"text","text":"A callback that can be used to implement "},{"type":"codeVoice","code":"SSLKEYLOGFILE"},{"type":"text","text":" support."}],"fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOSSLKeyLogCallback"}]},"doc://co.pointfree.VaporRouting/documentation/NIOSSL":{"abstract":[],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSSL","type":"topic","title":"NIOSSL","url":"\/documentation\/niossl","role":"collection","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ByteBuffer":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ByteBuffer"}],"navigatorTitle":[{"kind":"identifier","text":"ByteBuffer"}],"title":"ByteBuffer","type":"topic","abstract":[{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" stores contiguously allocated raw bytes. It is a random and sequential accessible sequence of zero or"},{"type":"text","text":" "},{"type":"text","text":"more bytes (octets)."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBuffer","role":"symbol","url":"\/documentation\/niocore\/bytebuffer","kind":"symbol"}}}