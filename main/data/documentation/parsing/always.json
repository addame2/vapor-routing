{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing\/always"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Always"},"metadata":{"role":"symbol","modules":[{"name":"Parsing"}],"navigatorTitle":[{"kind":"identifier","text":"Always"}],"externalID":"s:7Parsing6AlwaysV","roleHeading":"Structure","title":"Always","symbolKind":"struct","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Always"}]},"schemaVersion":{"major":0,"minor":3,"patch":0},"topicSections":[{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Always\/init(_:)-2spg2","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Always\/init(_:)-56hez","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Always\/init(_:)-fdjh"],"title":"Initializers"},{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Always\/output"],"title":"Instance Properties"},{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Always\/parse(_:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Always\/print(_:into:)"],"title":"Instance Methods"},{"generated":true,"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Always\/Parser-Implementations","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Always\/ParserPrinter-Implementations"],"title":"Default Implementations"}],"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["Linux"],"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Always"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Input"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Output"},{"kind":"text","text":">"}]}]},{"kind":"content","content":[{"type":"heading","text":"Overview","anchor":"overview","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"While not very useful on its own, the "},{"type":"codeVoice","code":"Always"},{"type":"text","text":" parser can be helpful when combined with other"},{"type":"text","text":" "},{"type":"text","text":"parsers or operators."}]},{"type":"paragraph","inlineContent":[{"text":"When its ","type":"text"},{"type":"codeVoice","code":"Output"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"Void"},{"text":", it can be used as a “no-op” parser of sorts and be plugged into","type":"text"},{"text":" ","type":"text"},{"text":"other parser operations. For example, the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Many","type":"reference"},{"text":" parser can be configured with separator and","type":"text"},{"text":" ","type":"text"},{"text":"terminator parsers:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["Many {","  Int.parser()","} separator: {","  \",\"","} terminator: {","  End()","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"But also exposes initializers that omit these parsers when there is no separator or terminator"},{"type":"text","text":" "},{"type":"text","text":"to be parsed:"}]},{"type":"codeListing","syntax":"swift","code":["Many {","  Prefix { $0 != \"\\n\" }","  \"\\n\"","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To support this, "},{"code":"Many","type":"codeVoice"},{"type":"text","text":" plugs "},{"code":"Always<Input, Void>","type":"codeVoice"},{"type":"text","text":" into each omitted parser. As a simplified"},{"type":"text","text":" "},{"type":"text","text":"example:"}]},{"type":"codeListing","syntax":"swift","code":["struct Many<Element: Parser, Separator: Parser, Terminator: Parser>: Parser","where Separator.Input == Element.Input, Terminator.Input == Element.Input {","  ...","}","","extension Many where Separator == Always<Input, Void>, Terminator == Always<Input, Void> {","  init(@ParserBuilder element: () -> Element) {","    self.element = element()","    self.separator = Always(())","    self.terminator = Always(())","  }","}"]},{"inlineContent":[{"type":"text","text":"This means the previous example is equivalent to:"}],"type":"paragraph"},{"code":["Many {","  Prefix { $0 != \"\\n\" }","  \"\\n\"","} separator: {","  Always(())","} terminator: {","  Always(())","}"],"type":"codeListing","syntax":"swift"},{"style":"note","content":[{"inlineContent":[{"text":"While ","type":"text"},{"code":"Always","type":"codeVoice"},{"text":" can be used as the last alternative of a ","type":"text"},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/OneOf","isActive":true,"type":"reference"},{"text":" to specify a default","type":"text"},{"text":" ","type":"text"},{"text":"output, the resulting parser will be throwing. Instead, prefer ","type":"text"},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser\/replaceError(with:)","isActive":true,"type":"reference"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"which returns a non-throwing parser.","type":"text"}],"type":"paragraph"}],"type":"aside"}]}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing"]]},"abstract":[{"type":"text","text":"A parser that always succeeds with the given value, and does not consume any input."}],"sections":[],"relationshipsSections":[{"kind":"relationships","type":"conformsTo","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/ParserPrinter"],"title":"Conforms To"}],"references":{"doc://co.pointfree.VaporRouting/documentation/Parsing/Many":{"navigatorTitle":[{"kind":"identifier","text":"Many"}],"abstract":[{"text":"A parser that attempts to run another parser as many times as specified, accumulating the result","type":"text"},{"text":" ","type":"text"},{"text":"of the outputs.","type":"text"}],"title":"Many","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Many"}],"kind":"symbol","role":"symbol","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Many","url":"\/documentation\/parsing\/many"},"doc://co.pointfree.VaporRouting/documentation/Parsing/ParserPrinter":{"abstract":[{"text":"A ","type":"text"},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser","isActive":true,"type":"reference"},{"text":" that can incrementally “print” an output value back into an input.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"ParserPrinter"}],"type":"topic","url":"\/documentation\/parsing\/parserprinter","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ParserPrinter"}],"kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/ParserPrinter","role":"symbol","title":"ParserPrinter"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Always/init(_:)-56hez":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Always\/init(_:)-56hez","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":")"}],"url":"\/documentation\/parsing\/always\/init(_:)-56hez","abstract":[],"type":"topic","kind":"symbol","role":"symbol","title":"init(_:)"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Always/Parser-Implementations":{"type":"topic","kind":"article","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Always\/Parser-Implementations","role":"collectionGroup","title":"Parser Implementations","url":"\/documentation\/parsing\/always\/parser-implementations","abstract":[]},"doc://co.pointfree.VaporRouting/documentation/Parsing/Always/output":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Always\/output","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"output"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Output"}],"url":"\/documentation\/parsing\/always\/output","abstract":[],"type":"topic","kind":"symbol","role":"symbol","title":"output"},"doc://co.pointfree.VaporRouting/documentation/Parsing":{"type":"topic","role":"collection","kind":"symbol","abstract":[],"title":"Parsing","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing","url":"\/documentation\/parsing"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Parser":{"type":"topic","role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"Declares a type that can incrementally parse an "},{"code":"Output","type":"codeVoice"},{"type":"text","text":" value from an "},{"code":"Input","type":"codeVoice"},{"type":"text","text":" value."}],"title":"Parser","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parser"}],"navigatorTitle":[{"kind":"identifier","text":"Parser"}],"url":"\/documentation\/parsing\/parser"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Always/init(_:)-fdjh":{"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Always\/init(_:)-fdjh","role":"symbol","url":"\/documentation\/parsing\/always\/init(_:)-fdjh","kind":"symbol","title":"init(_:)","abstract":[],"conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Input"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"Substring.UTF8View"},{"text":".","type":"text"}]},"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":")"}]},"doc://co.pointfree.VaporRouting/documentation/Parsing/Always/parse(_:)":{"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Always\/parse(_:)","role":"symbol","url":"\/documentation\/parsing\/always\/parse(_:)","kind":"symbol","title":"parse(_:)","abstract":[{"type":"text","text":"Attempts to parse a nebulous piece of data into something more well-structured. Typically"},{"type":"text","text":" "},{"type":"text","text":"you only call this from other "},{"type":"codeVoice","code":"Parser"},{"type":"text","text":" conformances, not when you want to parse a concrete"},{"type":"text","text":" "},{"type":"text","text":"input."}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"parse","kind":"identifier"},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Output","kind":"typeIdentifier"}]},"doc://co.pointfree.VaporRouting/documentation/Parsing/Always/ParserPrinter-Implementations":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Always\/ParserPrinter-Implementations","title":"ParserPrinter Implementations","abstract":[],"kind":"article","url":"\/documentation\/parsing\/always\/parserprinter-implementations","role":"collectionGroup","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Always":{"navigatorTitle":[{"kind":"identifier","text":"Always"}],"abstract":[{"type":"text","text":"A parser that always succeeds with the given value, and does not consume any input."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Always","title":"Always","url":"\/documentation\/parsing\/always","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Always"}],"type":"topic"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Always/init(_:)-2spg2":{"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Always\/init(_:)-2spg2","role":"symbol","url":"\/documentation\/parsing\/always\/init(_:)-2spg2","kind":"symbol","title":"init(_:)","abstract":[],"conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Input"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"Substring"},{"text":".","type":"text"}]},"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":")"}]},"doc://co.pointfree.VaporRouting/documentation/Parsing/OneOf":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/OneOf","abstract":[{"text":"A parser that attempts to run a number of parsers till one succeeds.","type":"text"}],"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"OneOf"}],"kind":"symbol","role":"symbol","url":"\/documentation\/parsing\/oneof","navigatorTitle":[{"kind":"identifier","text":"OneOf"}],"title":"OneOf"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Parser/replaceError(with:)":{"abstract":[{"type":"text","text":"A parser that replaces its error with a provided output."}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"replaceError","kind":"identifier"},{"text":"(","kind":"text"},{"text":"with","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Parsing7ParsersO","text":"Parsers"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:7Parsing7ParsersO12ReplaceErrorV","text":"ReplaceError"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser\/replaceError(with:)","type":"topic","kind":"symbol","title":"replaceError(with:)","url":"\/documentation\/parsing\/parser\/replaceerror(with:)","role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Always/print(_:into:)":{"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Always\/print(_:into:)","role":"symbol","url":"\/documentation\/parsing\/always\/print(_:into:)","kind":"symbol","title":"print(_:into:)","abstract":[{"type":"text","text":"Attempts to print a well-structured piece of data into something more nebulous."}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"print"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":", "},{"text":"into","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":")","kind":"text"}]}}}