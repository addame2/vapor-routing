{"schemaVersion":{"patch":0,"minor":3,"major":0},"metadata":{"title":"convert(apply:unapply:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"convert"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Input"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Output"},{"kind":"text","text":">("},{"kind":"externalParam","text":"apply"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"unapply"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":"?) -> "},{"kind":"typeIdentifier","text":"Self"}],"modules":[{"name":"Parsing"}],"roleHeading":"Type Method","symbolKind":"method","extendedModule":"Parsing","externalID":"s:7Parsing10ConversionPAAE7convert5apply7unapplyAA03AnyB0Vyqd__qd_0_Gqd_0_Sgqd__c_qd__Sgqd_0_ctAIRszr0_lFZ::SYNTHESIZED::s:7Parsing11ConversionsO38BinaryFloatingPointToFixedWidthIntegerV","role":"symbol"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Conversions\/BinaryFloatingPointToFixedWidthInteger\/convert(apply:unapply:)"},"variants":[{"paths":["\/documentation\/parsing\/conversions\/binaryfloatingpointtofixedwidthinteger\/convert(apply:unapply:)"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Conversions","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Conversions\/BinaryFloatingPointToFixedWidthInteger","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Conversions\/BinaryFloatingPointToFixedWidthInteger\/Conversion-Implementations"]]},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"tokens":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"convert"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Input"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Output"},{"kind":"text","text":">("},{"kind":"externalParam","text":"apply"},{"kind":"text","text":": "},{"kind":"keyword","text":"@escaping"},{"kind":"text","text":" ("},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"unapply"},{"kind":"text","text":": "},{"kind":"keyword","text":"@escaping"},{"kind":"text","text":" ("},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":"?) -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":" "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":" == "},{"kind":"typeIdentifier","text":"AnyConversion","preciseIdentifier":"s:7Parsing13AnyConversionV","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/AnyConversion"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":">"}],"languages":["swift"]}]},{"kind":"content","content":[{"anchor":"return-value","text":"Return Value","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"A conversion that invokes the given apply and unapply functions.","type":"text"}]}]},{"kind":"parameters","parameters":[{"name":"apply","content":[{"inlineContent":[{"text":"A closure that attempts to convert an input into an output. ","type":"text"},{"type":"codeVoice","code":"apply"},{"text":" is executed","type":"text"},{"text":" ","type":"text"},{"text":"each time the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Conversions\/BinaryFloatingPointToFixedWidthInteger\/apply(_:)","type":"reference"},{"text":" method is called on the resulting conversion. If the closure","type":"text"},{"text":" ","type":"text"},{"text":"returns ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":", an error is thrown. Otherwise, the value is unwrapped.","type":"text"}],"type":"paragraph"}]},{"name":"unapply","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A closure that attempts to convert an output into an input. "},{"type":"codeVoice","code":"unapply"},{"type":"text","text":" is executed"},{"type":"text","text":" "},{"type":"text","text":"each time the "},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Conversions\/BinaryFloatingPointToFixedWidthInteger\/unapply(_:)","type":"reference","isActive":true},{"type":"text","text":" method is called on the resulting conversion. If the closure"},{"type":"text","text":" "},{"type":"text","text":"returns "},{"type":"codeVoice","code":"nil"},{"type":"text","text":", an error is thrown. Otherwise, the value is unwrapped."}]}]}]},{"kind":"content","content":[{"level":2,"text":"Discussion","anchor":"discussion","type":"heading"},{"inlineContent":[{"type":"text","text":"Useful for experimenting with conversions in a lightweight manner, without the ceremony of"},{"type":"text","text":" "},{"type":"text","text":"defining a dedicated type."}],"type":"paragraph"},{"code":["struct Amount {","  var cents: Int","}","","let amount = Parse(","  .convert(","    apply: { dollars, cents in Amount(cents: dollars * 100 + cents) },","    unapply: { amount in amount.cents.quotientAndRemainder(dividingBy: 100) }","  )",") {","  Digits()","  \".\"","  Digits(2)","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"If performance is a concern, you should define a custom type that conforms to "},{"type":"reference","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Conversion","isActive":true},{"type":"text","text":" "},{"type":"text","text":"instead, which avoids the overhead of escaping closures, gives the compiler the ability to"},{"type":"text","text":" "},{"type":"text","text":"better optimize, and puts your in a better position to test the conversion."}],"type":"paragraph"},{"code":["struct AmountConversion: Conversion {","  func apply(_ dollarsAndCents: (Int, Int)) -> Amount {","    return Amount(cents: dollarsAndCents.0 * 100 + dollarsAndCents.1)","  }","","  func unapply(_ amount: Amount) -> (Int, Int) {","    amount.cents.quotientAndRemainder(dividingBy: 100)","  }","}","","let amount = Parse(AmountConversion()) {","  Digits()","  \".\"","  Digits(2)","}"],"syntax":"swift","type":"codeListing"}]}],"kind":"symbol","abstract":[{"type":"text","text":"A conversion that invokes the given apply and unapply functions."}],"sections":[],"references":{"doc://co.pointfree.VaporRouting/documentation/Parsing/Conversion":{"role":"symbol","title":"Conversion","abstract":[{"type":"text","text":"Declares a type that can transform an "},{"type":"codeVoice","code":"Input"},{"type":"text","text":" value into an "},{"type":"codeVoice","code":"Output"},{"type":"text","text":" value "},{"type":"emphasis","inlineContent":[{"type":"text","text":"and"}]},{"type":"text","text":" transform an"},{"type":"text","text":" "},{"type":"codeVoice","code":"Output"},{"type":"text","text":" value back into an "},{"type":"codeVoice","code":"Input"},{"type":"text","text":" value."}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Conversion"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Conversion","navigatorTitle":[{"kind":"identifier","text":"Conversion"}],"url":"\/documentation\/parsing\/conversion"},"doc://co.pointfree.VaporRouting/documentation/Parsing/AnyConversion":{"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyConversion"}],"url":"\/documentation\/parsing\/anyconversion","abstract":[{"text":"A type-erased ","type":"text"},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Conversion","type":"reference","isActive":true},{"type":"text","text":"."}],"navigatorTitle":[{"kind":"identifier","text":"AnyConversion"}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/AnyConversion","title":"AnyConversion"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Conversions":{"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"text":"Conversions","kind":"identifier"}],"navigatorTitle":[{"text":"Conversions","kind":"identifier"}],"title":"Conversions","type":"topic","abstract":[{"type":"text","text":"A namespace for types that serve as conversions."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Conversions","role":"symbol","url":"\/documentation\/parsing\/conversions","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Parsing":{"type":"topic","role":"collection","kind":"symbol","abstract":[],"title":"Parsing","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing","url":"\/documentation\/parsing"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Conversions/BinaryFloatingPointToFixedWidthInteger":{"kind":"symbol","url":"\/documentation\/parsing\/conversions\/binaryfloatingpointtofixedwidthinteger","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Conversions\/BinaryFloatingPointToFixedWidthInteger","title":"Conversions.BinaryFloatingPointToFixedWidthInteger","abstract":[{"type":"text","text":"A conversion from a "},{"type":"codeVoice","code":"Double"},{"type":"text","text":" to an "},{"type":"codeVoice","code":"Int"},{"type":"text","text":"."}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"BinaryFloatingPointToFixedWidthInteger"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"BinaryFloatingPointToFixedWidthInteger"}],"type":"topic"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Conversions/BinaryFloatingPointToFixedWidthInteger/apply(_:)":{"abstract":[{"type":"text","text":"Attempts to transform an input into an output."}],"kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Conversions\/BinaryFloatingPointToFixedWidthInteger\/apply(_:)","title":"apply(_:)","url":"\/documentation\/parsing\/conversions\/binaryfloatingpointtofixedwidthinteger\/apply(_:)","type":"topic","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"apply","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Output","kind":"typeIdentifier"}]},"doc://co.pointfree.VaporRouting/documentation/Parsing/Conversions/BinaryFloatingPointToFixedWidthInteger/Conversion-Implementations":{"title":"Conversion Implementations","kind":"article","url":"\/documentation\/parsing\/conversions\/binaryfloatingpointtofixedwidthinteger\/conversion-implementations","role":"collectionGroup","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Conversions\/BinaryFloatingPointToFixedWidthInteger\/Conversion-Implementations","abstract":[]},"doc://co.pointfree.VaporRouting/documentation/Parsing/Conversions/BinaryFloatingPointToFixedWidthInteger/convert(apply:unapply:)":{"title":"convert(apply:unapply:)","url":"\/documentation\/parsing\/conversions\/binaryfloatingpointtofixedwidthinteger\/convert(apply:unapply:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Conversions\/BinaryFloatingPointToFixedWidthInteger\/convert(apply:unapply:)","kind":"symbol","abstract":[{"type":"text","text":"A conversion that invokes the given apply and unapply functions."}],"role":"symbol","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"convert"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Input"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Output"},{"kind":"text","text":">("},{"kind":"externalParam","text":"apply"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"unapply"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":"?) -> "},{"kind":"typeIdentifier","text":"Self"}],"type":"topic"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Conversions/BinaryFloatingPointToFixedWidthInteger/unapply(_:)":{"title":"unapply(_:)","kind":"symbol","url":"\/documentation\/parsing\/conversions\/binaryfloatingpointtofixedwidthinteger\/unapply(_:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"unapply","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Input","kind":"typeIdentifier"}],"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Conversions\/BinaryFloatingPointToFixedWidthInteger\/unapply(_:)","abstract":[{"text":"Attempts to transform an output back into an input.","type":"text"}]}}}