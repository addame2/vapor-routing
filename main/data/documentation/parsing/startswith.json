{"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"tokens":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"StartsWith","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Input","kind":"genericParameter"},{"text":"> ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"preciseIdentifier":"s:Sl","text":"Collection","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":" == ","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"SubSequence","kind":"typeIdentifier"}],"languages":["swift"]}]},{"kind":"content","content":[{"type":"heading","anchor":"overview","text":"Overview","level":2},{"type":"paragraph","inlineContent":[{"text":"This parser is named after ","type":"text"},{"type":"codeVoice","code":"Sequence.starts(with:)"},{"text":", and tests that the input it is parsing","type":"text"},{"text":" ","type":"text"},{"text":"starts with a given subsequence by calling this method under the hood.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If "},{"code":"true","type":"codeVoice"},{"type":"text","text":", it consumes this prefix and returns "},{"type":"codeVoice","code":"Void"},{"type":"text","text":":"}]},{"syntax":"swift","type":"codeListing","code":["var input = \"Hello, Blob!\"[...]","","StartsWith(\"Hello, \").parse(&input)  \/\/ ()","input                                \/\/ \"Blob!\""]},{"type":"paragraph","inlineContent":[{"text":"If ","type":"text"},{"type":"codeVoice","code":"false"},{"text":", it fails and leaves input intact:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["var input = \"Goodnight, Blob!\"[...]","try StartsWith(\"Hello, \").parse(&input)","\/\/ error: unexpected input","\/\/  --> input:1:1","\/\/ 1 | Goodnight, Blob!","\/\/   | ^ expected \"Hello, \""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This parser returns "},{"type":"codeVoice","code":"Void"},{"type":"text","text":" and "},{"type":"emphasis","inlineContent":[{"type":"text","text":"not"}]},{"type":"text","text":" the sequence of elements it consumes because the sequence"},{"type":"text","text":" "},{"type":"text","text":"is already known at the time the parser is created (it is the value quite literally passed to"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/StartsWith\/init(_:)"},{"type":"text","text":")."}]},{"type":"paragraph","inlineContent":[{"text":"In many circumstances you can omit the ","type":"text"},{"code":"StartsWith","type":"codeVoice"},{"text":" parser entirely and just use the collection","type":"text"},{"text":" ","type":"text"},{"text":"as the parser. For example:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["var input = \"Hello, Blob!\"[...]","","try \"Hello, \".parse(&input)  \/\/ ()","input                        \/\/ \"Blob!\""]}]}],"kind":"symbol","metadata":{"modules":[{"name":"Parsing"}],"navigatorTitle":[{"kind":"identifier","text":"StartsWith"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"StartsWith"}],"externalID":"s:7Parsing10StartsWithV","role":"symbol","symbolKind":"struct","title":"StartsWith","roleHeading":"Structure"},"schemaVersion":{"minor":3,"patch":0,"major":0},"abstract":[{"type":"text","text":"A parser that parses a sequence of elements from its input."}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing"]]},"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/StartsWith\/init(_:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/StartsWith\/init(_:by:)"]},{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/StartsWith\/count","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/StartsWith\/possiblePrefix","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/StartsWith\/startsWith"],"title":"Instance Properties"},{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/StartsWith\/parse(_:)"],"title":"Instance Methods"},{"generated":true,"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/StartsWith\/Parser-Implementations","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/StartsWith\/ParserPrinter-Implementations"],"title":"Default Implementations"}],"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/StartsWith"},"relationshipsSections":[{"type":"conformsTo","kind":"relationships","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/ParserPrinter"],"title":"Conforms To"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing\/startswith"]}],"references":{"doc://co.pointfree.VaporRouting/documentation/Parsing/StartsWith/ParserPrinter-Implementations":{"kind":"article","abstract":[],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/StartsWith\/ParserPrinter-Implementations","type":"topic","title":"ParserPrinter Implementations","role":"collectionGroup","url":"\/documentation\/parsing\/startswith\/parserprinter-implementations"},"doc://co.pointfree.VaporRouting/documentation/Parsing/StartsWith":{"url":"\/documentation\/parsing\/startswith","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"StartsWith","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/StartsWith","title":"StartsWith","role":"symbol","abstract":[{"type":"text","text":"A parser that parses a sequence of elements from its input."}],"navigatorTitle":[{"text":"StartsWith","kind":"identifier"}],"kind":"symbol","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/Parsing/StartsWith/startsWith":{"role":"symbol","type":"topic","url":"\/documentation\/parsing\/startswith\/startswith","title":"startsWith","kind":"symbol","abstract":[],"fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"startsWith"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/StartsWith\/startsWith"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Parser":{"type":"topic","role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"Declares a type that can incrementally parse an "},{"code":"Output","type":"codeVoice"},{"type":"text","text":" value from an "},{"code":"Input","type":"codeVoice"},{"type":"text","text":" value."}],"title":"Parser","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parser"}],"navigatorTitle":[{"kind":"identifier","text":"Parser"}],"url":"\/documentation\/parsing\/parser"},"doc://co.pointfree.VaporRouting/documentation/Parsing":{"type":"topic","role":"collection","kind":"symbol","abstract":[],"title":"Parsing","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing","url":"\/documentation\/parsing"},"doc://co.pointfree.VaporRouting/documentation/Parsing/StartsWith/Parser-Implementations":{"title":"Parser Implementations","kind":"article","type":"topic","role":"collectionGroup","abstract":[],"url":"\/documentation\/parsing\/startswith\/parser-implementations","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/StartsWith\/Parser-Implementations"},"doc://co.pointfree.VaporRouting/documentation/Parsing/StartsWith/parse(_:)":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"parse","kind":"identifier"},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"}],"role":"symbol","title":"parse(_:)","kind":"symbol","type":"topic","url":"\/documentation\/parsing\/startswith\/parse(_:)","abstract":[{"type":"text","text":"Attempts to parse a nebulous piece of data into something more well-structured. Typically"},{"type":"text","text":" "},{"type":"text","text":"you only call this from other "},{"type":"codeVoice","code":"Parser"},{"type":"text","text":" conformances, not when you want to parse a concrete"},{"type":"text","text":" "},{"type":"text","text":"input."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/StartsWith\/parse(_:)"},"doc://co.pointfree.VaporRouting/documentation/Parsing/StartsWith/count":{"fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"count"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"}],"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/StartsWith\/count","url":"\/documentation\/parsing\/startswith\/count","title":"count","role":"symbol","kind":"symbol","abstract":[]},"doc://co.pointfree.VaporRouting/documentation/Parsing/StartsWith/init(_:by:)":{"role":"symbol","type":"topic","url":"\/documentation\/parsing\/startswith\/init(_:by:)","title":"init(_:by:)","kind":"symbol","abstract":[{"type":"text","text":"Initializes a parser that successfully returns "},{"code":"Void","type":"codeVoice"},{"type":"text","text":" when the initial elements of its input"},{"type":"text","text":" "},{"type":"text","text":"are equivalent to the elements in another sequence, using the given predicate as the"},{"type":"text","text":" "},{"type":"text","text":"equivalence test."}],"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"PossiblePrefix"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"PossiblePrefix"},{"kind":"text","text":", "},{"kind":"externalParam","text":"by"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":")"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/StartsWith\/init(_:by:)"},"doc://co.pointfree.VaporRouting/documentation/Parsing/StartsWith/init(_:)":{"abstract":[{"type":"text","text":"Initializes a parser that successfully returns "},{"type":"codeVoice","code":"Void"},{"type":"text","text":" when the initial elements of its input"},{"type":"text","text":" "},{"type":"text","text":"are equivalent to the elements in another sequence."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/StartsWith\/init(_:)","conformance":{"constraints":[{"code":"Input","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Collection","type":"codeVoice"},{"text":", ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"Input.SubSequence","type":"codeVoice"},{"text":", and ","type":"text"},{"code":"Input.Element","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Equatable","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"PossiblePrefix"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"PossiblePrefix"},{"kind":"text","text":")"}],"title":"init(_:)","type":"topic","url":"\/documentation\/parsing\/startswith\/init(_:)","role":"symbol","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Parsing/StartsWith/possiblePrefix":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/StartsWith\/possiblePrefix","fragments":[{"text":"let","kind":"keyword"},{"text":" ","kind":"text"},{"text":"possiblePrefix","kind":"identifier"},{"text":": ","kind":"text"},{"text":"AnyCollection","preciseIdentifier":"s:s13AnyCollectionV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":">","kind":"text"}],"title":"possiblePrefix","url":"\/documentation\/parsing\/startswith\/possibleprefix","type":"topic","abstract":[],"kind":"symbol","role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Parsing/ParserPrinter":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/ParserPrinter","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"code":"Input","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"PrependableCollection","type":"codeVoice"},{"type":"text","text":" and "},{"code":"Input","type":"codeVoice"},{"type":"text","text":" is "},{"code":"Input.SubSequence","type":"codeVoice"},{"type":"text","text":"."}]},"abstract":[{"text":"A ","type":"text"},{"isActive":true,"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser","type":"reference"},{"text":" that can incrementally “print” an output value back into an input.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"ParserPrinter"}],"type":"topic","url":"\/documentation\/parsing\/parserprinter","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ParserPrinter"}],"role":"symbol","title":"ParserPrinter","kind":"symbol"}}}