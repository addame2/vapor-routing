{"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/finish(acceptAlreadyClosed:)","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel"]]},"variants":[{"paths":["\/documentation\/nioembedded\/embeddedchannel\/finish(acceptalreadyclosed:)"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"externalID":"s:11NIOEmbedded15EmbeddedChannelC6finish19acceptAlreadyClosedAC13LeftOverStateOSb_tKF","modules":[{"name":"NIOEmbedded"}],"role":"symbol","roleHeading":"Instance Method","title":"finish(acceptAlreadyClosed:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"finish"},{"kind":"text","text":"("},{"kind":"externalParam","text":"acceptAlreadyClosed"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"EmbeddedChannel","preciseIdentifier":"s:11NIOEmbedded15EmbeddedChannelC"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"LeftOverState","preciseIdentifier":"s:11NIOEmbedded15EmbeddedChannelC13LeftOverStateO"}],"symbolKind":"method"},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"finish","kind":"identifier"},{"text":"(","kind":"text"},{"text":"acceptAlreadyClosed","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"EmbeddedChannel","kind":"typeIdentifier","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel","preciseIdentifier":"s:11NIOEmbedded15EmbeddedChannelC"},{"text":".","kind":"text"},{"text":"LeftOverState","kind":"typeIdentifier","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/LeftOverState","preciseIdentifier":"s:11NIOEmbedded15EmbeddedChannelC13LeftOverStateO"}],"languages":["swift"]}]},{"kind":"content","content":[{"text":"Return Value","type":"heading","anchor":"return-value","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"LeftOverState","type":"codeVoice"},{"type":"text","text":" of the "},{"code":"EmbeddedChannel","type":"codeVoice"},{"type":"text","text":". If all the inbound and outbound events have been"},{"type":"text","text":" "},{"type":"text","text":"consumed (using "},{"code":"readInbound","type":"codeVoice"},{"type":"text","text":" \/ "},{"code":"readOutbound","type":"codeVoice"},{"type":"text","text":") and there are no pending outbound events (unflushed"},{"type":"text","text":" "},{"type":"text","text":"writes) this will be "},{"code":".clean","type":"codeVoice"},{"type":"text","text":". If there are any unconsumed inbound, outbound, or pending outbound"},{"type":"text","text":" "},{"type":"text","text":"events, the "},{"code":"EmbeddedChannel","type":"codeVoice"},{"type":"text","text":" will returns those as "},{"code":".leftOvers(inbound:outbound:pendingOutbound:)","type":"codeVoice"},{"type":"text","text":"."}]}]},{"kind":"parameters","parameters":[{"name":"acceptAlreadyClosed","content":[{"inlineContent":[{"type":"text","text":"Whether "},{"type":"codeVoice","code":"finish"},{"type":"text","text":" should throw if the "},{"type":"codeVoice","code":"EmbeddedChannel"},{"type":"text","text":" has been previously "},{"type":"codeVoice","code":"close"},{"type":"text","text":"d."}],"type":"paragraph"}]}]},{"kind":"content","content":[{"anchor":"discussion","type":"heading","text":"Discussion","level":2},{"type":"paragraph","inlineContent":[{"text":"Errors in the ","type":"text"},{"type":"codeVoice","code":"EmbeddedChannel"},{"text":" can be consumed using ","type":"text"},{"type":"codeVoice","code":"throwIfErrorCaught"},{"text":".","type":"text"}]}]}],"kind":"symbol","sections":[],"abstract":[{"type":"text","text":"Synchronously closes the "},{"code":"EmbeddedChannel","type":"codeVoice"},{"type":"text","text":"."}],"schemaVersion":{"minor":3,"major":0,"patch":0},"references":{"doc://co.pointfree.VaporRouting/documentation/NIOEmbedded/EmbeddedChannel":{"abstract":[{"type":"codeVoice","code":"EmbeddedChannel"},{"type":"text","text":" is a "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":" implementation that does neither any"},{"type":"text","text":" "},{"type":"text","text":"actual IO nor has a proper eventing mechanism. The prime use-case for"},{"type":"text","text":" "},{"type":"codeVoice","code":"EmbeddedChannel"},{"type":"text","text":" is in unit tests when you want to feed the inbound events"},{"type":"text","text":" "},{"text":"and check the outbound events manually.","type":"text"}],"title":"EmbeddedChannel","kind":"symbol","url":"\/documentation\/nioembedded\/embeddedchannel","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EmbeddedChannel","kind":"identifier"}],"type":"topic","role":"symbol","navigatorTitle":[{"text":"EmbeddedChannel","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOEmbedded/EmbeddedChannel/finish(acceptAlreadyClosed:)":{"type":"topic","url":"\/documentation\/nioembedded\/embeddedchannel\/finish(acceptalreadyclosed:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/finish(acceptAlreadyClosed:)","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"finish"},{"kind":"text","text":"("},{"kind":"externalParam","text":"acceptAlreadyClosed"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:11NIOEmbedded15EmbeddedChannelC","text":"EmbeddedChannel"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:11NIOEmbedded15EmbeddedChannelC13LeftOverStateO","text":"LeftOverState"}],"title":"finish(acceptAlreadyClosed:)","abstract":[{"type":"text","text":"Synchronously closes the "},{"code":"EmbeddedChannel","type":"codeVoice"},{"type":"text","text":"."}]},"doc://co.pointfree.VaporRouting/documentation/NIOEmbedded":{"role":"collection","kind":"symbol","abstract":[],"title":"NIOEmbedded","url":"\/documentation\/nioembedded","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded"},"doc://co.pointfree.VaporRouting/documentation/NIOEmbedded/EmbeddedChannel/LeftOverState":{"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LeftOverState","kind":"identifier"}],"abstract":[{"code":"LeftOverState","type":"codeVoice"},{"text":" represents any left-over inbound, outbound, and pending outbound events that hit the","type":"text"},{"text":" ","type":"text"},{"code":"EmbeddedChannel","type":"codeVoice"},{"text":" and were not consumed when ","type":"text"},{"code":"finish","type":"codeVoice"},{"text":" was called on the ","type":"text"},{"code":"EmbeddedChannel","type":"codeVoice"},{"text":".","type":"text"}],"navigatorTitle":[{"text":"LeftOverState","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/LeftOverState","title":"EmbeddedChannel.LeftOverState","url":"\/documentation\/nioembedded\/embeddedchannel\/leftoverstate","role":"symbol","type":"topic"}}}