{"abstract":[{"type":"text","text":"An overload for "},{"type":"codeVoice","code":"append(generator:runningOn:)"},{"type":"text","text":" that takes in an "},{"code":"EventLoopFuture","type":"codeVoice"},{"text":" as an auto closure to provide a better 1-liner API.","type":"text"}],"variants":[{"paths":["\/documentation\/asynckit\/eventloopfuturequeue\/append(_:runningon:)"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncKit\/EventLoopFutureQueue\/append(_:runningOn:)","interfaceLanguage":"swift"},"kind":"symbol","primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["Linux"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"append"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":">("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"generator"},{"kind":"text","text":": "},{"kind":"attribute","text":"@autoclosure "},{"kind":"keyword","text":"@escaping"},{"kind":"text","text":" () -> "},{"kind":"typeIdentifier","text":"EventLoopFuture","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"runningOn"},{"kind":"text","text":" "},{"kind":"internalParam","text":"next"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"EventLoopFutureQueue","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncKit\/EventLoopFutureQueue","preciseIdentifier":"s:8AsyncKit20EventLoopFutureQueueC"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"ContinueCondition","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncKit\/EventLoopFutureQueue\/ContinueCondition","preciseIdentifier":"s:8AsyncKit20EventLoopFutureQueueC17ContinueConditionO"},{"kind":"text","text":" = .complete) -> "},{"kind":"typeIdentifier","text":"EventLoopFuture","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":">"}]}],"kind":"declarations"},{"kind":"content","content":[{"type":"heading","anchor":"return-value","level":2,"text":"Return Value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The future passed into the "},{"code":"generator","type":"codeVoice"},{"type":"text","text":" parameter."}]}]},{"parameters":[{"content":[{"inlineContent":[{"text":"The statement that will produce an ","type":"text"},{"code":"EventLoopFuture","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"This will automatically get wrapped in a closure.","type":"text"}],"type":"paragraph"}],"name":"generator"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The condition that the previous future(s) must meet on their completion for the appended future to be run."},{"type":"text","text":" "},{"type":"text","text":"The default value is "},{"type":"codeVoice","code":".complete"},{"type":"text","text":"."}]}],"name":"next"}],"kind":"parameters"},{"kind":"content","content":[{"text":"Discussion","type":"heading","level":2,"anchor":"discussion"},{"syntax":null,"type":"codeListing","code":["let model: EventLoopFuture<Model> = queue.append(Model.query(on: database).first())"]}]}],"metadata":{"modules":[{"name":"AsyncKit"}],"externalID":"s:8AsyncKit20EventLoopFutureQueueC6append_9runningOn7NIOCore0cdE0CyxGAIyXA_AC17ContinueConditionOtlF","title":"append(_:runningOn:)","roleHeading":"Instance Method","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"append"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":">(() -> "},{"preciseIdentifier":"s:7NIOCore15EventLoopFutureC","kind":"typeIdentifier","text":"EventLoopFuture"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"runningOn"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:8AsyncKit20EventLoopFutureQueueC","text":"EventLoopFutureQueue"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:8AsyncKit20EventLoopFutureQueueC17ContinueConditionO","text":"ContinueCondition"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","text":"EventLoopFuture"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":">"}],"role":"symbol","symbolKind":"method"},"schemaVersion":{"minor":3,"patch":0,"major":0},"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncKit","doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncKit\/EventLoopFutureQueue"]]},"references":{"doc://co.pointfree.VaporRouting/documentation/AsyncKit":{"title":"AsyncKit","url":"\/documentation\/asynckit","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncKit","abstract":[],"type":"topic","kind":"symbol","role":"collection"},"doc://co.pointfree.VaporRouting/documentation/AsyncKit/EventLoopFutureQueue/ContinueCondition":{"url":"\/documentation\/asynckit\/eventloopfuturequeue\/continuecondition","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"ContinueCondition"}],"kind":"symbol","type":"topic","title":"EventLoopFutureQueue.ContinueCondition","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"ContinueCondition"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncKit\/EventLoopFutureQueue\/ContinueCondition","abstract":[{"type":"text","text":"Under what conditions an appended closure should be run."}]},"doc://co.pointfree.VaporRouting/documentation/AsyncKit/EventLoopFutureQueue":{"role":"symbol","abstract":[{"type":"text","text":"Allows you to queue closures that produce an "},{"code":"EventLoopFuture","type":"codeVoice"},{"type":"text","text":", so each future only gets run if the previous ones complete, succeed, or fail."}],"navigatorTitle":[{"kind":"identifier","text":"EventLoopFutureQueue"}],"kind":"symbol","title":"EventLoopFutureQueue","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncKit\/EventLoopFutureQueue","url":"\/documentation\/asynckit\/eventloopfuturequeue","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"EventLoopFutureQueue"}],"type":"topic"},"doc://co.pointfree.VaporRouting/documentation/AsyncKit/EventLoopFutureQueue/append(_:runningOn:)":{"url":"\/documentation\/asynckit\/eventloopfuturequeue\/append(_:runningon:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncKit\/EventLoopFutureQueue\/append(_:runningOn:)","role":"symbol","title":"append(_:runningOn:)","kind":"symbol","type":"topic","abstract":[{"text":"An overload for ","type":"text"},{"type":"codeVoice","code":"append(generator:runningOn:)"},{"text":" that takes in an ","type":"text"},{"type":"codeVoice","code":"EventLoopFuture"},{"text":" as an auto closure to provide a better 1-liner API.","type":"text"}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"append"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":">(() -> "},{"kind":"typeIdentifier","text":"EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"runningOn"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"EventLoopFutureQueue","preciseIdentifier":"s:8AsyncKit20EventLoopFutureQueueC"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"ContinueCondition","preciseIdentifier":"s:8AsyncKit20EventLoopFutureQueueC17ContinueConditionO"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":">"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoopFuture":{"type":"topic","url":"\/documentation\/niocore\/eventloopfuture","role":"symbol","navigatorTitle":[{"text":"EventLoopFuture","kind":"identifier"}],"title":"EventLoopFuture","kind":"symbol","abstract":[{"text":"Holder for a result that will be provided later.","type":"text"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EventLoopFuture","kind":"identifier"}]}}}