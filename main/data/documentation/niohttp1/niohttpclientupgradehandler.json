{"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"keyword","text":"final"},{"kind":"text","text":" "},{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOHTTPClientUpgradeHandler"}],"languages":["swift"],"platforms":["Linux"]}],"kind":"declarations"},{"content":[{"text":"Overview","type":"heading","level":2,"anchor":"overview"},{"inlineContent":[{"text":"The request sends an order of preference to request which protocol it would like to use for the upgrade.","type":"text"},{"text":" ","type":"text"},{"text":"It will only upgrade to the protocol that is returned first in the list and does not currently","type":"text"},{"text":" ","type":"text"},{"text":"have the capability to upgrade to multiple simultaneous layered protocols.","type":"text"}],"type":"paragraph"}],"kind":"content"}],"sections":[],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1"]]},"metadata":{"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOHTTPClientUpgradeHandler","kind":"identifier"}],"role":"symbol","modules":[{"name":"NIOHTTP1"}],"title":"NIOHTTPClientUpgradeHandler","symbolKind":"class","roleHeading":"Class","navigatorTitle":[{"text":"NIOHTTPClientUpgradeHandler","kind":"identifier"}],"externalID":"s:8NIOHTTP127NIOHTTPClientUpgradeHandlerC"},"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1\/NIOHTTPClientUpgradeHandler","interfaceLanguage":"swift"},"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1\/NIOHTTPClientUpgradeHandler\/init(upgraders:httpHandlers:upgradeCompletionHandler:)"]},{"title":"Instance Methods","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1\/NIOHTTPClientUpgradeHandler\/channelRead(context:data:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1\/NIOHTTPClientUpgradeHandler\/write(context:data:promise:)"]},{"title":"Type Aliases","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1\/NIOHTTPClientUpgradeHandler\/InboundIn","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1\/NIOHTTPClientUpgradeHandler\/InboundOut","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1\/NIOHTTPClientUpgradeHandler\/OutboundIn","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1\/NIOHTTPClientUpgradeHandler\/OutboundOut"]},{"title":"Default Implementations","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1\/NIOHTTPClientUpgradeHandler\/ChannelHandler-Implementations","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1\/NIOHTTPClientUpgradeHandler\/ChannelInboundHandler-Implementations","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1\/NIOHTTPClientUpgradeHandler\/ChannelOutboundHandler-Implementations","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1\/NIOHTTPClientUpgradeHandler\/RemovableChannelHandler-Implementations"],"generated":true}],"abstract":[{"type":"text","text":"A client-side channel handler that sends a HTTP upgrade handshake request to perform a HTTP-upgrade."},{"type":"text","text":" "},{"type":"text","text":"When the first HTTP request is sent, this handler will add all appropriate headers to perform an upgrade to"},{"type":"text","text":" "},{"type":"text","text":"the a protocol. It may add headers for a set of protocols in preference order."},{"type":"text","text":" "},{"type":"text","text":"If the upgrade fails (i.e. response is not 101 Switching Protocols), this handler simply"},{"type":"text","text":" "},{"type":"text","text":"removes itself from the pipeline. If the upgrade is successful, it upgrades the pipeline to the new protocol."}],"kind":"symbol","variants":[{"paths":["\/documentation\/niohttp1\/niohttpclientupgradehandler"],"traits":[{"interfaceLanguage":"swift"}]}],"relationshipsSections":[{"type":"conformsTo","title":"Conforms To","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelInboundHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelOutboundHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/RemovableChannelHandler"],"kind":"relationships"}],"schemaVersion":{"minor":3,"major":0,"patch":0},"references":{"doc://co.pointfree.VaporRouting/documentation/NIOHTTP1/NIOHTTPClientUpgradeHandler/InboundIn":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1\/NIOHTTPClientUpgradeHandler\/InboundIn","url":"\/documentation\/niohttp1\/niohttpclientupgradehandler\/inboundin","role":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"InboundIn"}],"kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"InboundIn"}],"abstract":[{"type":"text","text":"The type of the inbound data which is wrapped in "},{"type":"codeVoice","code":"NIOAny"},{"type":"text","text":"."}],"title":"NIOHTTPClientUpgradeHandler.InboundIn"},"doc://co.pointfree.VaporRouting/documentation/NIOHTTP1/NIOHTTPClientUpgradeHandler/init(upgraders:httpHandlers:upgradeCompletionHandler:)":{"kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1\/NIOHTTPClientUpgradeHandler\/init(upgraders:httpHandlers:upgradeCompletionHandler:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"upgraders"},{"kind":"text","text":": ["},{"preciseIdentifier":"s:8NIOHTTP129NIOHTTPClientProtocolUpgraderP","kind":"typeIdentifier","text":"NIOHTTPClientProtocolUpgrader"},{"kind":"text","text":"], "},{"text":"httpHandlers","kind":"externalParam"},{"text":": [","kind":"text"},{"preciseIdentifier":"s:7NIOCore23RemovableChannelHandlerP","text":"RemovableChannelHandler","kind":"typeIdentifier"},{"text":"], ","kind":"text"},{"text":"upgradeCompletionHandler","kind":"externalParam"},{"text":": (","kind":"text"},{"preciseIdentifier":"s:7NIOCore21ChannelHandlerContextC","text":"ChannelHandlerContext","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"text":")","kind":"text"}],"title":"init(upgraders:httpHandlers:upgradeCompletionHandler:)","abstract":[{"text":"Create a ","type":"text"},{"type":"codeVoice","code":"HTTPClientUpgradeHandler"},{"text":".","type":"text"}],"role":"symbol","type":"topic","url":"\/documentation\/niohttp1\/niohttpclientupgradehandler\/init(upgraders:httphandlers:upgradecompletionhandler:)"},"doc://co.pointfree.VaporRouting/documentation/NIOHTTP1/NIOHTTPClientUpgradeHandler/write(context:data:promise:)":{"kind":"symbol","role":"symbol","url":"\/documentation\/niohttp1\/niohttpclientupgradehandler\/write(context:data:promise:)","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1\/NIOHTTPClientUpgradeHandler\/write(context:data:promise:)","abstract":[{"type":"text","text":"Called to request a write operation. The write operation will write the messages through the"},{"type":"text","text":" "},{"type":"codeVoice","code":"ChannelPipeline"},{"type":"text","text":". Those are then ready to be flushed to the actual "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":" when"},{"type":"text","text":" "},{"type":"codeVoice","code":"Channel.flush"},{"type":"text","text":" or "},{"type":"codeVoice","code":"ChannelHandlerContext.flush"},{"type":"text","text":" is called."}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"write"},{"kind":"text","text":"("},{"kind":"externalParam","text":"context"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore21ChannelHandlerContextC","text":"ChannelHandlerContext"},{"kind":"text","text":", "},{"kind":"externalParam","text":"data"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore6NIOAnyV","text":"NIOAny"},{"kind":"text","text":", "},{"kind":"externalParam","text":"promise"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore16EventLoopPromiseV","text":"EventLoopPromise"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"kind":"text","text":">?)"}],"title":"write(context:data:promise:)"},"doc://co.pointfree.VaporRouting/documentation/NIOHTTP1/NIOHTTPClientUpgradeHandler/RemovableChannelHandler-Implementations":{"kind":"article","role":"collectionGroup","url":"\/documentation\/niohttp1\/niohttpclientupgradehandler\/removablechannelhandler-implementations","abstract":[],"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1\/NIOHTTPClientUpgradeHandler\/RemovableChannelHandler-Implementations","title":"RemovableChannelHandler Implementations"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/RemovableChannelHandler":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/RemovableChannelHandler","url":"\/documentation\/niocore\/removablechannelhandler","role":"symbol","title":"RemovableChannelHandler","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"RemovableChannelHandler"}],"navigatorTitle":[{"kind":"identifier","text":"RemovableChannelHandler"}],"type":"topic","abstract":[{"text":"A ","type":"text"},{"code":"RemovableChannelHandler","type":"codeVoice"},{"text":" is a ","type":"text"},{"code":"ChannelHandler","type":"codeVoice"},{"text":" that can be dynamically removed from a ","type":"text"},{"code":"ChannelPipeline","type":"codeVoice"},{"text":" whilst","type":"text"},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":" is operating normally.","type":"text"},{"text":" ","type":"text"},{"text":"A ","type":"text"},{"code":"RemovableChannelHandler","type":"codeVoice"},{"text":" is required to remove itself from the ","type":"text"},{"code":"ChannelPipeline","type":"codeVoice"},{"text":" (using","type":"text"},{"text":" ","type":"text"},{"code":"ChannelHandlerContext.removeHandler","type":"codeVoice"},{"text":") as soon as possible.","type":"text"}],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOHTTP1":{"url":"\/documentation\/niohttp1","title":"NIOHTTP1","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1","abstract":[],"role":"collection","kind":"symbol","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/NIOHTTP1/NIOHTTPClientUpgradeHandler/ChannelInboundHandler-Implementations":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1\/NIOHTTPClientUpgradeHandler\/ChannelInboundHandler-Implementations","url":"\/documentation\/niohttp1\/niohttpclientupgradehandler\/channelinboundhandler-implementations","role":"collectionGroup","title":"ChannelInboundHandler Implementations","kind":"article","abstract":[],"type":"topic"},"doc://co.pointfree.VaporRouting/documentation/NIOHTTP1/NIOHTTPClientUpgradeHandler/InboundOut":{"fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"InboundOut"}],"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1\/NIOHTTPClientUpgradeHandler\/InboundOut","abstract":[{"text":"The type of the inbound data which will be forwarded to the next ","type":"text"},{"code":"ChannelInboundHandler","type":"codeVoice"},{"text":" in the ","type":"text"},{"code":"ChannelPipeline","type":"codeVoice"},{"text":".","type":"text"}],"kind":"symbol","title":"NIOHTTPClientUpgradeHandler.InboundOut","url":"\/documentation\/niohttp1\/niohttpclientupgradehandler\/inboundout","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"InboundOut"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelHandler":{"kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ChannelHandler"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelHandler","url":"\/documentation\/niocore\/channelhandler","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ChannelHandler"}],"role":"symbol","title":"ChannelHandler","abstract":[{"text":"You should ","type":"text"},{"inlineContent":[{"type":"text","text":"never"}],"type":"emphasis"},{"text":" implement this protocol directly. Please implement one of its sub-protocols.","type":"text"}]},"doc://co.pointfree.VaporRouting/documentation/NIOHTTP1/NIOHTTPClientUpgradeHandler/ChannelOutboundHandler-Implementations":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1\/NIOHTTPClientUpgradeHandler\/ChannelOutboundHandler-Implementations","title":"ChannelOutboundHandler Implementations","kind":"article","abstract":[],"url":"\/documentation\/niohttp1\/niohttpclientupgradehandler\/channeloutboundhandler-implementations","role":"collectionGroup","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/NIOHTTP1/NIOHTTPClientUpgradeHandler/channelRead(context:data:)":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"channelRead"},{"kind":"text","text":"("},{"kind":"externalParam","text":"context"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore21ChannelHandlerContextC","text":"ChannelHandlerContext"},{"kind":"text","text":", "},{"kind":"externalParam","text":"data"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore6NIOAnyV","text":"NIOAny"},{"kind":"text","text":")"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1\/NIOHTTPClientUpgradeHandler\/channelRead(context:data:)","title":"channelRead(context:data:)","url":"\/documentation\/niohttp1\/niohttpclientupgradehandler\/channelread(context:data:)","role":"symbol","type":"topic","kind":"symbol","abstract":[{"text":"Called when some data has been read from the remote peer.","type":"text"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelOutboundHandler":{"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelOutboundHandler","url":"\/documentation\/niocore\/channeloutboundhandler","role":"symbol","abstract":[{"type":"codeVoice","code":"ChannelHandler"},{"type":"text","text":" which handles outbound I\/O events or intercept an outbound I\/O operation for a "},{"code":"Channel","type":"codeVoice"},{"type":"text","text":"."}],"kind":"symbol","title":"ChannelOutboundHandler","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ChannelOutboundHandler","kind":"identifier"}],"navigatorTitle":[{"text":"ChannelOutboundHandler","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelInboundHandler":{"navigatorTitle":[{"kind":"identifier","text":"ChannelInboundHandler"}],"title":"ChannelInboundHandler","abstract":[{"type":"codeVoice","code":"ChannelHandler"},{"type":"text","text":" which handles inbound I\/O events for a "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":"."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelInboundHandler","role":"symbol","url":"\/documentation\/niocore\/channelinboundhandler","type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ChannelInboundHandler"}]},"doc://co.pointfree.VaporRouting/documentation/NIOHTTP1/NIOHTTPClientUpgradeHandler/OutboundIn":{"type":"topic","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"OutboundIn","kind":"identifier"}],"navigatorTitle":[{"text":"OutboundIn","kind":"identifier"}],"url":"\/documentation\/niohttp1\/niohttpclientupgradehandler\/outboundin","abstract":[{"type":"text","text":"The type of the outbound data which is wrapped in "},{"type":"codeVoice","code":"NIOAny"},{"type":"text","text":"."}],"title":"NIOHTTPClientUpgradeHandler.OutboundIn","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1\/NIOHTTPClientUpgradeHandler\/OutboundIn","kind":"symbol","role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOHTTP1/NIOHTTPClientUpgradeHandler/ChannelHandler-Implementations":{"abstract":[],"type":"topic","kind":"article","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1\/NIOHTTPClientUpgradeHandler\/ChannelHandler-Implementations","title":"ChannelHandler Implementations","role":"collectionGroup","url":"\/documentation\/niohttp1\/niohttpclientupgradehandler\/channelhandler-implementations"},"doc://co.pointfree.VaporRouting/documentation/NIOHTTP1/NIOHTTPClientUpgradeHandler":{"navigatorTitle":[{"kind":"identifier","text":"NIOHTTPClientUpgradeHandler"}],"abstract":[{"type":"text","text":"A client-side channel handler that sends a HTTP upgrade handshake request to perform a HTTP-upgrade."},{"type":"text","text":" "},{"type":"text","text":"When the first HTTP request is sent, this handler will add all appropriate headers to perform an upgrade to"},{"type":"text","text":" "},{"type":"text","text":"the a protocol. It may add headers for a set of protocols in preference order."},{"type":"text","text":" "},{"type":"text","text":"If the upgrade fails (i.e. response is not 101 Switching Protocols), this handler simply"},{"type":"text","text":" "},{"type":"text","text":"removes itself from the pipeline. If the upgrade is successful, it upgrades the pipeline to the new protocol."}],"title":"NIOHTTPClientUpgradeHandler","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOHTTPClientUpgradeHandler"}],"kind":"symbol","role":"symbol","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1\/NIOHTTPClientUpgradeHandler","url":"\/documentation\/niohttp1\/niohttpclientupgradehandler"},"doc://co.pointfree.VaporRouting/documentation/NIOHTTP1/NIOHTTPClientUpgradeHandler/OutboundOut":{"fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"OutboundOut"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"OutboundOut"}],"type":"topic","abstract":[{"type":"text","text":"The type of the outbound data which will be forwarded to the next "},{"type":"codeVoice","code":"ChannelOutboundHandler"},{"type":"text","text":" in the "},{"type":"codeVoice","code":"ChannelPipeline"},{"type":"text","text":"."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1\/NIOHTTPClientUpgradeHandler\/OutboundOut","kind":"symbol","title":"NIOHTTPClientUpgradeHandler.OutboundOut","url":"\/documentation\/niohttp1\/niohttpclientupgradehandler\/outboundout"}}}