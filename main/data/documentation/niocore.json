{"hierarchy":{"paths":[[]]},"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","interfaceLanguage":"swift"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/niocore"]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"metadata":{"symbolKind":"module","modules":[{"name":"NIOCore"}],"roleHeading":"Framework","externalID":"NIOCore","role":"collection","title":"NIOCore"},"kind":"symbol","topicSections":[{"title":"Classes","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/AcceptBackoffHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/BackPressureHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteToMessageHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelHandlerContext","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelPipeline","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/IdleStateHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/MessageToByteHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOCloseOnErrorHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOFileHandle","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIONetworkInterface","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOSingleStepByteToMessageProcessor","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/RepeatedTask"]},{"title":"Protocols","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteToMessageDecoder","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/Channel","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelCore","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelInboundHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelInboundInvoker","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelInvoker","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelOption","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelOutboundHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelOutboundInvoker","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoop","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopGroup","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/FileDescriptor","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/MessageToByteEncoder","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/MulticastChannel","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrapProtocol","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTLSProvider","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOSingleStepByteToMessageDecoder","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOSynchronousChannelOptions","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/RecvByteBufferAllocator","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/RemovableChannelHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/SocketOptionProvider","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/WriteObservingByteToMessageDecoder"]},{"title":"Structures","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/AdaptiveRecvByteBufferAllocator","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/AddressedEnvelope","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBuffer","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBufferAllocator","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBufferView","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelOptions","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelShouldQuiesceEvent","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/CircularBuffer","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopIterator","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopPromise","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/FileRegion","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/FixedSizeRecvByteBufferAllocator","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/IOError","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/MarkedCircularBuffer","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOAny","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOAttemptedToRemoveHandlerMultipleTimesError","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIODeadline","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOInsecureNoTLS","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOMulticastNotImplementedError","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOMulticastNotSupportedError","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIONetworkDevice","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOPacketInfo","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/Scheduled","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/TimeAmount"]},{"title":"Type Aliases","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/AllocatorOption","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/AllowRemoteHalfClosureOption","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/AutoReadOption","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/BacklogOption","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelDuplexHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ConnectTimeoutOption","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/DatagramVectorReadMessageCountOption","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/MaxMessagesPerReadOption","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOSendable","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/RecvAllocatorOption","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/SocketOption","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/SocketOptionLevel","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/SocketOptionName","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/SocketOptionValue","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/WriteBufferWaterMark","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/WriteBufferWaterMarkOption","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/WriteSpinOption"]},{"title":"Enumerations","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteToMessageDecoderError","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelError","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelEvent","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelPipelineError","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/CloseMode","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/DecodingState","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/Endianness","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopError","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/IOData","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOBSDSocket","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOEventLoopGroupProvider","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOExplicitCongestionNotificationState","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/SocketAddress","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/SocketAddressError","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/System"]}],"sections":[],"references":{"doc://co.pointfree.VaporRouting/documentation/NIOCore/IdleStateHandler":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/IdleStateHandler","navigatorTitle":[{"text":"IdleStateHandler","kind":"identifier"}],"url":"\/documentation\/niocore\/idlestatehandler","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IdleStateHandler","kind":"identifier"}],"role":"symbol","type":"topic","title":"IdleStateHandler","abstract":[{"type":"text","text":"Triggers an IdleStateEvent when a Channel has not performed read, write, or both operation for a while."}],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/DecodingState":{"type":"topic","title":"DecodingState","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/DecodingState","abstract":[{"type":"text","text":"State of the current decoding process."}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"DecodingState"}],"url":"\/documentation\/niocore\/decodingstate","role":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"DecodingState"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOFileHandle":{"abstract":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"NIOFileHandle"},{"text":" is a handle to an open file.","type":"text"}],"kind":"symbol","title":"NIOFileHandle","role":"symbol","url":"\/documentation\/niocore\/niofilehandle","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOFileHandle"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOFileHandle","type":"topic","navigatorTitle":[{"kind":"identifier","text":"NIOFileHandle"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoop":{"title":"EventLoop","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoop","navigatorTitle":[{"text":"EventLoop","kind":"identifier"}],"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EventLoop","kind":"identifier"}],"url":"\/documentation\/niocore\/eventloop","abstract":[{"text":"An EventLoop processes IO \/ tasks in an endless loop for ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":"s until it’s closed.","type":"text"}],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/MessageToByteEncoder":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/MessageToByteEncoder","abstract":[{"type":"text","text":"A protocol for straightforward encoders which encode custom messages to "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":"s."},{"type":"text","text":" "},{"type":"text","text":"To add a "},{"type":"codeVoice","code":"MessageToByteEncoder"},{"type":"text","text":" to a "},{"type":"codeVoice","code":"ChannelPipeline"},{"type":"text","text":", use"},{"type":"text","text":" "},{"type":"codeVoice","code":"channel.pipeline.addHandler(MessageToByteHandler(myEncoder)"},{"type":"text","text":"."}],"kind":"symbol","type":"topic","title":"MessageToByteEncoder","navigatorTitle":[{"text":"MessageToByteEncoder","kind":"identifier"}],"role":"symbol","url":"\/documentation\/niocore\/messagetobyteencoder","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MessageToByteEncoder","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/WriteBufferWaterMark":{"kind":"symbol","abstract":[],"fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"WriteBufferWaterMark"}],"url":"\/documentation\/niocore\/writebufferwatermark","deprecated":true,"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/WriteBufferWaterMark","title":"WriteBufferWaterMark","type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"WriteBufferWaterMark"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOBSDSocket":{"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOBSDSocket"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOBSDSocket","type":"topic","kind":"symbol","url":"\/documentation\/niocore\/niobsdsocket","navigatorTitle":[{"kind":"identifier","text":"NIOBSDSocket"}],"title":"NIOBSDSocket","abstract":[],"role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/CircularBuffer":{"kind":"symbol","navigatorTitle":[{"text":"CircularBuffer","kind":"identifier"}],"role":"symbol","url":"\/documentation\/niocore\/circularbuffer","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/CircularBuffer","type":"topic","abstract":[{"text":"An automatically expanding ring buffer implementation backed by a ","type":"text"},{"type":"codeVoice","code":"ContiguousArray"},{"text":". Even though this implementation","type":"text"},{"text":" ","type":"text"},{"text":"will automatically expand if more elements than ","type":"text"},{"type":"codeVoice","code":"initialCapacity"},{"text":" are stored, it’s advantageous to prevent","type":"text"},{"text":" ","type":"text"},{"text":"expansions from happening frequently. Expansions will always force an allocation and a copy to happen.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CircularBuffer","kind":"identifier"}],"title":"CircularBuffer"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/MarkedCircularBuffer":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/MarkedCircularBuffer","navigatorTitle":[{"kind":"identifier","text":"MarkedCircularBuffer"}],"url":"\/documentation\/niocore\/markedcircularbuffer","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"MarkedCircularBuffer"}],"role":"symbol","type":"topic","title":"MarkedCircularBuffer","abstract":[{"type":"text","text":"A circular buffer that allows one object at a time to be “marked” and easily identified and retrieved later."}],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOSendable":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOSendable","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"NIOSendable"}],"type":"topic","url":"\/documentation\/niocore\/niosendable","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOSendable"}],"abstract":[],"role":"symbol","title":"NIOSendable"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ByteToMessageHandler":{"type":"topic","navigatorTitle":[{"text":"ByteToMessageHandler","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteToMessageHandler","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ByteToMessageHandler","kind":"identifier"}],"title":"ByteToMessageHandler","role":"symbol","abstract":[{"text":"A handler which turns a given ","type":"text"},{"type":"codeVoice","code":"ByteToMessageDecoder"},{"text":" into a ","type":"text"},{"type":"codeVoice","code":"ChannelInboundHandler"},{"text":" that can then be added to a","type":"text"},{"text":" ","type":"text"},{"code":"ChannelPipeline","type":"codeVoice"},{"type":"text","text":"."}],"url":"\/documentation\/niocore\/bytetomessagehandler"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/IOError":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"IOError"}],"url":"\/documentation\/niocore\/ioerror","navigatorTitle":[{"kind":"identifier","text":"IOError"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/IOError","title":"IOError","type":"topic","role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"An "},{"code":"Error","type":"codeVoice"},{"type":"text","text":" for an IO operation."}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOInsecureNoTLS":{"navigatorTitle":[{"text":"NIOInsecureNoTLS","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOInsecureNoTLS","kind":"identifier"}],"type":"topic","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOInsecureNoTLS","url":"\/documentation\/niocore\/nioinsecurenotls","kind":"symbol","title":"NIOInsecureNoTLS","abstract":[]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoopGroup":{"role":"symbol","abstract":[{"type":"text","text":"Provides an endless stream of "},{"code":"EventLoop","type":"codeVoice"},{"type":"text","text":"s to use."}],"title":"EventLoopGroup","url":"\/documentation\/niocore\/eventloopgroup","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"EventLoopGroup"}],"kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopGroup","navigatorTitle":[{"kind":"identifier","text":"EventLoopGroup"}],"type":"topic"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOExplicitCongestionNotificationState":{"kind":"symbol","title":"NIOExplicitCongestionNotificationState","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOExplicitCongestionNotificationState","type":"topic","abstract":[{"text":"Possible Explicit Congestion Notification States","type":"text"}],"role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOExplicitCongestionNotificationState","kind":"identifier"}],"navigatorTitle":[{"text":"NIOExplicitCongestionNotificationState","kind":"identifier"}],"url":"\/documentation\/niocore\/nioexplicitcongestionnotificationstate"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelInboundInvoker":{"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelInboundInvoker","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"ChannelInboundInvoker"}],"title":"ChannelInboundInvoker","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ChannelInboundInvoker"}],"abstract":[{"text":"Fire inbound events related to a ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":" through the ","type":"text"},{"type":"codeVoice","code":"ChannelPipeline"},{"type":"text","text":" until its end is reached or it’s consumed by a "},{"type":"codeVoice","code":"ChannelHandler"},{"type":"text","text":"."}],"url":"\/documentation\/niocore\/channelinboundinvoker"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/RepeatedTask":{"type":"topic","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"RepeatedTask"}],"url":"\/documentation\/niocore\/repeatedtask","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/RepeatedTask","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"RepeatedTask"}],"abstract":[{"text":"Returned once a task was scheduled to be repeatedly executed on the ","type":"text"},{"code":"EventLoop","type":"codeVoice"},{"text":".","type":"text"}],"title":"RepeatedTask"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/MulticastChannel":{"role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"MulticastChannel"}],"navigatorTitle":[{"kind":"identifier","text":"MulticastChannel"}],"kind":"symbol","type":"topic","url":"\/documentation\/niocore\/multicastchannel","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/MulticastChannel","abstract":[{"text":"A ","type":"text"},{"code":"MulticastChannel","type":"codeVoice"},{"type":"text","text":" is a "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":" that supports IP multicast operations: that is, a channel that can join multicast"},{"type":"text","text":" "},{"type":"text","text":"groups."}],"title":"MulticastChannel"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/AdaptiveRecvByteBufferAllocator":{"url":"\/documentation\/niocore\/adaptiverecvbytebufferallocator","navigatorTitle":[{"kind":"identifier","text":"AdaptiveRecvByteBufferAllocator"}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"AdaptiveRecvByteBufferAllocator"}],"abstract":[{"code":"RecvByteBufferAllocator","type":"codeVoice"},{"text":" which will gracefully increment or decrement the buffer size on the feedback that was recorded.","type":"text"}],"title":"AdaptiveRecvByteBufferAllocator","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/AdaptiveRecvByteBufferAllocator","kind":"symbol","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelOutboundInvoker":{"role":"symbol","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ChannelOutboundInvoker","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelOutboundInvoker","title":"ChannelOutboundInvoker","type":"topic","url":"\/documentation\/niocore\/channeloutboundinvoker","abstract":[{"text":"Allows users to invoke an “outbound” operation related to a ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":" that will flow through the ","type":"text"},{"code":"ChannelPipeline","type":"codeVoice"},{"text":" until","type":"text"},{"text":" ","type":"text"},{"text":"it will finally be executed by the the ","type":"text"},{"code":"ChannelCore","type":"codeVoice"},{"text":" implementation.","type":"text"}],"navigatorTitle":[{"text":"ChannelOutboundInvoker","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelError":{"navigatorTitle":[{"kind":"identifier","text":"ChannelError"}],"role":"symbol","abstract":[{"type":"text","text":"An error that can occur on "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":" operations."}],"url":"\/documentation\/niocore\/channelerror","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"ChannelError"}],"type":"topic","kind":"symbol","title":"ChannelError","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelError"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoopError":{"type":"topic","abstract":[{"type":"text","text":"Different "},{"code":"Error","type":"codeVoice"},{"type":"text","text":"s that are specific to "},{"code":"EventLoop","type":"codeVoice"},{"type":"text","text":" operations \/ implementations."}],"role":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"EventLoopError"}],"title":"EventLoopError","url":"\/documentation\/niocore\/eventlooperror","navigatorTitle":[{"kind":"identifier","text":"EventLoopError"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopError","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/AllocatorOption":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/AllocatorOption","fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"AllocatorOption"}],"type":"topic","url":"\/documentation\/niocore\/allocatoroption","role":"symbol","abstract":[],"title":"AllocatorOption","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"AllocatorOption"}],"deprecated":true},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOAttemptedToRemoveHandlerMultipleTimesError":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOAttemptedToRemoveHandlerMultipleTimesError","title":"NIOAttemptedToRemoveHandlerMultipleTimesError","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOAttemptedToRemoveHandlerMultipleTimesError","kind":"identifier"}],"role":"symbol","url":"\/documentation\/niocore\/nioattemptedtoremovehandlermultipletimeserror","navigatorTitle":[{"text":"NIOAttemptedToRemoveHandlerMultipleTimesError","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"The removal of a "},{"code":"ChannelHandler","type":"codeVoice"},{"type":"text","text":" using "},{"code":"ChannelPipeline.removeHandler","type":"codeVoice"},{"text":" has been attempted more than once.","type":"text"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoopPromise":{"abstract":[{"text":"A promise to provide a result later.","type":"text"}],"title":"EventLoopPromise","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopPromise","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EventLoopPromise","kind":"identifier"}],"kind":"symbol","navigatorTitle":[{"text":"EventLoopPromise","kind":"identifier"}],"type":"topic","url":"\/documentation\/niocore\/eventlooppromise"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/SocketAddressError":{"kind":"symbol","type":"topic","navigatorTitle":[{"text":"SocketAddressError","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/SocketAddressError","role":"symbol","title":"SocketAddressError","abstract":[{"type":"text","text":"Special "},{"type":"codeVoice","code":"Error"},{"type":"text","text":" that may be thrown if we fail to create a "},{"type":"codeVoice","code":"SocketAddress"},{"type":"text","text":"."}],"url":"\/documentation\/niocore\/socketaddresserror","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SocketAddressError","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/SocketOptionLevel":{"kind":"symbol","abstract":[],"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/SocketOptionLevel","url":"\/documentation\/niocore\/socketoptionlevel","navigatorTitle":[{"kind":"identifier","text":"SocketOptionLevel"}],"role":"symbol","title":"SocketOptionLevel","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"SocketOptionLevel"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelPipeline":{"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ChannelPipeline"}],"url":"\/documentation\/niocore\/channelpipeline","type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"ChannelPipeline"}],"title":"ChannelPipeline","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelPipeline","abstract":[{"text":"A list of ","type":"text"},{"code":"ChannelHandler","type":"codeVoice"},{"text":"s that handle or intercept inbound events and outbound operations of a","type":"text"},{"text":" ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":". ","type":"text"},{"code":"ChannelPipeline","type":"codeVoice"},{"text":" implements an advanced form of the Intercepting Filter pattern","type":"text"},{"text":" ","type":"text"},{"text":"to give a user full control over how an event is handled and how the ","type":"text"},{"code":"ChannelHandler","type":"codeVoice"},{"text":"s in a pipeline","type":"text"},{"text":" ","type":"text"},{"text":"interact with each other.","type":"text"}],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/SocketAddress":{"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/SocketAddress","title":"SocketAddress","role":"symbol","kind":"symbol","navigatorTitle":[{"text":"SocketAddress","kind":"identifier"}],"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SocketAddress","kind":"identifier"}],"url":"\/documentation\/niocore\/socketaddress","abstract":[{"text":"Represent a socket address to which we may want to connect or bind.","type":"text"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/AcceptBackoffHandler":{"navigatorTitle":[{"text":"AcceptBackoffHandler","kind":"identifier"}],"abstract":[{"text":"A ","type":"text"},{"code":"ChannelHandler","type":"codeVoice"},{"text":" that implements a backoff for a ","type":"text"},{"code":"ServerChannel","type":"codeVoice"},{"text":" when accept produces an ","type":"text"},{"code":"IOError","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"These errors are often recoverable by reducing the rate at which we call accept.","type":"text"}],"title":"AcceptBackoffHandler","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AcceptBackoffHandler","kind":"identifier"}],"kind":"symbol","role":"symbol","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/AcceptBackoffHandler","url":"\/documentation\/niocore\/acceptbackoffhandler"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelHandlerContext":{"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ChannelHandlerContext"}],"type":"topic","url":"\/documentation\/niocore\/channelhandlercontext","title":"ChannelHandlerContext","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelHandlerContext","role":"symbol","abstract":[{"text":"Every ","type":"text"},{"code":"ChannelHandler","type":"codeVoice"},{"text":" has – when added to a ","type":"text"},{"code":"ChannelPipeline","type":"codeVoice"},{"text":" – a corresponding ","type":"text"},{"code":"ChannelHandlerContext","type":"codeVoice"},{"text":" which is","type":"text"},{"text":" ","type":"text"},{"text":"the way ","type":"text"},{"code":"ChannelHandler","type":"codeVoice"},{"text":"s can interact with other ","type":"text"},{"code":"ChannelHandler","type":"codeVoice"},{"text":"s in the pipeline.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"ChannelHandlerContext"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/FileRegion":{"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"FileRegion"}],"kind":"symbol","abstract":[{"text":"A ","type":"text"},{"code":"FileRegion","type":"codeVoice"},{"text":" represent a readable portion usually created to be sent over the network.","type":"text"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/FileRegion","title":"FileRegion","role":"symbol","url":"\/documentation\/niocore\/fileregion","navigatorTitle":[{"kind":"identifier","text":"FileRegion"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/SocketOptionName":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/SocketOptionName","abstract":[],"type":"topic","navigatorTitle":[{"text":"SocketOptionName","kind":"identifier"}],"url":"\/documentation\/niocore\/socketoptionname","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SocketOptionName","kind":"identifier"}],"kind":"symbol","title":"SocketOptionName","role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/BackPressureHandler":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/BackPressureHandler","navigatorTitle":[{"text":"BackPressureHandler","kind":"identifier"}],"url":"\/documentation\/niocore\/backpressurehandler","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BackPressureHandler","kind":"identifier"}],"role":"symbol","type":"topic","title":"BackPressureHandler","abstract":[{"type":"text","text":"ChannelHandler implementation which enforces back-pressure by stopping to read from the remote peer when it cannot write back fast enough."},{"type":"text","text":" "},{"type":"text","text":"It will start reading again once pending data was written."}],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelOption":{"navigatorTitle":[{"kind":"identifier","text":"ChannelOption"}],"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ChannelOption"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelOption","title":"ChannelOption","url":"\/documentation\/niocore\/channeloption","kind":"symbol","abstract":[{"text":"A configuration option that can be set on a ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":" to configure different behaviour.","type":"text"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelDuplexHandler":{"url":"\/documentation\/niocore\/channelduplexhandler","abstract":[{"type":"text","text":"A combination of "},{"code":"ChannelInboundHandler","type":"codeVoice"},{"type":"text","text":" and "},{"code":"ChannelOutboundHandler","type":"codeVoice"},{"type":"text","text":"."}],"fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ChannelDuplexHandler"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"ChannelDuplexHandler"}],"type":"topic","role":"symbol","title":"ChannelDuplexHandler","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelDuplexHandler"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/BacklogOption":{"navigatorTitle":[{"text":"BacklogOption","kind":"identifier"}],"fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BacklogOption","kind":"identifier"}],"title":"BacklogOption","deprecated":true,"kind":"symbol","abstract":[],"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/BacklogOption","url":"\/documentation\/niocore\/backlogoption","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOPacketInfo":{"kind":"symbol","title":"NIOPacketInfo","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOPacketInfo","type":"topic","abstract":[],"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOPacketInfo","kind":"identifier"}],"navigatorTitle":[{"text":"NIOPacketInfo","kind":"identifier"}],"url":"\/documentation\/niocore\/niopacketinfo"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/Scheduled":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Scheduled"}],"kind":"symbol","url":"\/documentation\/niocore\/scheduled","title":"Scheduled","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/Scheduled","navigatorTitle":[{"kind":"identifier","text":"Scheduled"}],"role":"symbol","type":"topic","abstract":[{"text":"Returned once a task was scheduled on the ","type":"text"},{"code":"EventLoop","type":"codeVoice"},{"text":" for later execution.","type":"text"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelShouldQuiesceEvent":{"navigatorTitle":[{"text":"ChannelShouldQuiesceEvent","kind":"identifier"}],"abstract":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"Channel"},{"text":" user event that is sent when the ","type":"text"},{"type":"codeVoice","code":"Channel"},{"text":" has been asked to quiesce.","type":"text"}],"type":"topic","url":"\/documentation\/niocore\/channelshouldquiesceevent","title":"ChannelShouldQuiesceEvent","role":"symbol","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ChannelShouldQuiesceEvent","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelShouldQuiesceEvent"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelInboundHandler":{"navigatorTitle":[{"kind":"identifier","text":"ChannelInboundHandler"}],"title":"ChannelInboundHandler","abstract":[{"type":"codeVoice","code":"ChannelHandler"},{"type":"text","text":" which handles inbound I\/O events for a "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":"."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelInboundHandler","role":"symbol","url":"\/documentation\/niocore\/channelinboundhandler","type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ChannelInboundHandler"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoopIterator":{"kind":"symbol","type":"topic","navigatorTitle":[{"text":"EventLoopIterator","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopIterator","url":"\/documentation\/niocore\/eventloopiterator","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EventLoopIterator","kind":"identifier"}],"role":"symbol","title":"EventLoopIterator","abstract":[{"text":"An iterator over the ","type":"text"},{"type":"codeVoice","code":"EventLoop"},{"text":"s forming an ","type":"text"},{"type":"codeVoice","code":"EventLoopGroup"},{"text":".","type":"text"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIONetworkDevice":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIONetworkDevice"}],"title":"NIONetworkDevice","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIONetworkDevice","abstract":[{"type":"text","text":"A representation of a single network device on a system."}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"NIONetworkDevice"}],"type":"topic","url":"\/documentation\/niocore\/nionetworkdevice"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/WriteBufferWaterMarkOption":{"url":"\/documentation\/niocore\/writebufferwatermarkoption","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/WriteBufferWaterMarkOption","navigatorTitle":[{"kind":"identifier","text":"WriteBufferWaterMarkOption"}],"fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"WriteBufferWaterMarkOption"}],"title":"WriteBufferWaterMarkOption","kind":"symbol","abstract":[],"role":"symbol","deprecated":true},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelPipelineError":{"kind":"symbol","role":"symbol","title":"ChannelPipelineError","navigatorTitle":[{"text":"ChannelPipelineError","kind":"identifier"}],"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ChannelPipelineError","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelPipelineError","abstract":[{"code":"Error","type":"codeVoice"},{"text":" that is used by the ","type":"text"},{"code":"ChannelPipeline","type":"codeVoice"},{"text":" to inform the user of an error.","type":"text"}],"url":"\/documentation\/niocore\/channelpipelineerror"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoopFuture":{"type":"topic","url":"\/documentation\/niocore\/eventloopfuture","role":"symbol","navigatorTitle":[{"text":"EventLoopFuture","kind":"identifier"}],"title":"EventLoopFuture","kind":"symbol","abstract":[{"text":"Holder for a result that will be provided later.","type":"text"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EventLoopFuture","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ByteBufferView":{"role":"symbol","abstract":[{"text":"A view into a portion of a ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":".","type":"text"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBufferView","title":"ByteBufferView","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ByteBufferView","kind":"identifier"}],"navigatorTitle":[{"text":"ByteBufferView","kind":"identifier"}],"type":"topic","url":"\/documentation\/niocore\/bytebufferview","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelCore":{"kind":"symbol","role":"symbol","title":"ChannelCore","url":"\/documentation\/niocore\/channelcore","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelCore","navigatorTitle":[{"kind":"identifier","text":"ChannelCore"}],"abstract":[{"type":"text","text":"The core "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":" methods that are for internal use of the "},{"type":"codeVoice","code":"Channel"},{"text":" implementation only.","type":"text"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ChannelCore"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/AddressedEnvelope":{"kind":"symbol","title":"AddressedEnvelope","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/AddressedEnvelope","type":"topic","abstract":[{"text":"A data structure for processing addressed datagrams, such as those used by UDP.","type":"text"}],"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AddressedEnvelope","kind":"identifier"}],"navigatorTitle":[{"text":"AddressedEnvelope","kind":"identifier"}],"url":"\/documentation\/niocore\/addressedenvelope"},"doc://co.pointfree.VaporRouting/documentation/NIOCore":{"title":"NIOCore","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","abstract":[],"url":"\/documentation\/niocore","type":"topic","kind":"symbol","role":"collection"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/SocketOptionProvider":{"type":"topic","url":"\/documentation\/niocore\/socketoptionprovider","role":"symbol","navigatorTitle":[{"text":"SocketOptionProvider","kind":"identifier"}],"title":"SocketOptionProvider","kind":"symbol","abstract":[{"text":"This protocol defines an object, most commonly a ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":", that supports","type":"text"},{"text":" ","type":"text"},{"text":"setting and getting socket options (via ","type":"text"},{"code":"setsockopt","type":"codeVoice"},{"text":"\/","type":"text"},{"code":"getsockopt","type":"codeVoice"},{"text":" or similar).","type":"text"},{"text":" ","type":"text"},{"text":"It provides a strongly typed API that makes working with larger, less-common","type":"text"},{"text":" ","type":"text"},{"text":"socket options easier than the ","type":"text"},{"code":"ChannelOption","type":"codeVoice"},{"text":" API allows.","type":"text"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/SocketOptionProvider","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SocketOptionProvider","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/DatagramVectorReadMessageCountOption":{"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/DatagramVectorReadMessageCountOption","url":"\/documentation\/niocore\/datagramvectorreadmessagecountoption","title":"DatagramVectorReadMessageCountOption","deprecated":true,"navigatorTitle":[{"text":"DatagramVectorReadMessageCountOption","kind":"identifier"}],"kind":"symbol","abstract":[],"fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DatagramVectorReadMessageCountOption","kind":"identifier"}],"role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/RemovableChannelHandler":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/RemovableChannelHandler","url":"\/documentation\/niocore\/removablechannelhandler","role":"symbol","title":"RemovableChannelHandler","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"RemovableChannelHandler"}],"navigatorTitle":[{"kind":"identifier","text":"RemovableChannelHandler"}],"type":"topic","abstract":[{"text":"A ","type":"text"},{"code":"RemovableChannelHandler","type":"codeVoice"},{"text":" is a ","type":"text"},{"code":"ChannelHandler","type":"codeVoice"},{"text":" that can be dynamically removed from a ","type":"text"},{"code":"ChannelPipeline","type":"codeVoice"},{"text":" whilst","type":"text"},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":" is operating normally.","type":"text"},{"text":" ","type":"text"},{"text":"A ","type":"text"},{"code":"RemovableChannelHandler","type":"codeVoice"},{"text":" is required to remove itself from the ","type":"text"},{"code":"ChannelPipeline","type":"codeVoice"},{"text":" (using","type":"text"},{"text":" ","type":"text"},{"code":"ChannelHandlerContext.removeHandler","type":"codeVoice"},{"text":") as soon as possible.","type":"text"}],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/RecvAllocatorOption":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/RecvAllocatorOption","abstract":[],"role":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"RecvAllocatorOption"}],"type":"topic","navigatorTitle":[{"kind":"identifier","text":"RecvAllocatorOption"}],"kind":"symbol","deprecated":true,"title":"RecvAllocatorOption","url":"\/documentation\/niocore\/recvallocatoroption"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOSynchronousChannelOptions":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOSynchronousChannelOptions","abstract":[],"kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOSynchronousChannelOptions"}],"url":"\/documentation\/niocore\/niosynchronouschanneloptions","navigatorTitle":[{"kind":"identifier","text":"NIOSynchronousChannelOptions"}],"role":"symbol","title":"NIOSynchronousChannelOptions"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/TimeAmount":{"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"TimeAmount"}],"abstract":[{"type":"text","text":"Represents a time "},{"type":"emphasis","inlineContent":[{"text":"interval","type":"text"}]},{"type":"text","text":"."}],"url":"\/documentation\/niocore\/timeamount","navigatorTitle":[{"text":"TimeAmount","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/TimeAmount","title":"TimeAmount","role":"symbol","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/MessageToByteHandler":{"kind":"symbol","type":"topic","role":"symbol","url":"\/documentation\/niocore\/messagetobytehandler","navigatorTitle":[{"kind":"identifier","text":"MessageToByteHandler"}],"abstract":[{"type":"text","text":"A handler which turns a given "},{"type":"codeVoice","code":"MessageToByteEncoder"},{"type":"text","text":" into a "},{"type":"codeVoice","code":"ChannelOutboundHandler"},{"type":"text","text":" that can then be added to a"},{"type":"text","text":" "},{"type":"codeVoice","code":"ChannelPipeline"},{"type":"text","text":"."}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"MessageToByteHandler"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/MessageToByteHandler","title":"MessageToByteHandler"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOClientTCPBootstrapProtocol":{"title":"NIOClientTCPBootstrapProtocol","kind":"symbol","role":"symbol","url":"\/documentation\/niocore\/nioclienttcpbootstrapprotocol","type":"topic","abstract":[{"type":"codeVoice","code":"NIOClientTCPBootstrapProtocol"},{"type":"text","text":" is implemented by various underlying transport mechanisms. Typically,"},{"type":"text","text":" "},{"type":"text","text":"this will be the BSD Sockets API implemented by "},{"code":"ClientBootstrap","type":"codeVoice"},{"type":"text","text":"."}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOClientTCPBootstrapProtocol","kind":"identifier"}],"navigatorTitle":[{"text":"NIOClientTCPBootstrapProtocol","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrapProtocol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelEvent":{"kind":"symbol","abstract":[{"type":"text","text":"An "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":" related event that is passed through the "},{"type":"codeVoice","code":"ChannelPipeline"},{"type":"text","text":" to notify the user."}],"type":"topic","title":"ChannelEvent","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelEvent","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ChannelEvent","kind":"identifier"}],"navigatorTitle":[{"text":"ChannelEvent","kind":"identifier"}],"url":"\/documentation\/niocore\/channelevent"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ByteToMessageDecoderError":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteToMessageDecoderError","title":"ByteToMessageDecoderError","type":"topic","role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"ByteToMessageDecoderError"}],"navigatorTitle":[{"kind":"identifier","text":"ByteToMessageDecoderError"}],"url":"\/documentation\/niocore\/bytetomessagedecodererror","abstract":[{"type":"text","text":"Common errors thrown by "},{"type":"codeVoice","code":"ByteToMessageDecoder"},{"type":"text","text":"s."}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOClientTLSProvider":{"role":"symbol","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTLSProvider","abstract":[],"url":"\/documentation\/niocore\/nioclienttlsprovider","title":"NIOClientTLSProvider","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOClientTLSProvider"}],"navigatorTitle":[{"kind":"identifier","text":"NIOClientTLSProvider"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/WriteObservingByteToMessageDecoder":{"type":"topic","role":"symbol","title":"WriteObservingByteToMessageDecoder","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/WriteObservingByteToMessageDecoder","url":"\/documentation\/niocore\/writeobservingbytetomessagedecoder","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"WriteObservingByteToMessageDecoder","kind":"identifier"}],"navigatorTitle":[{"text":"WriteObservingByteToMessageDecoder","kind":"identifier"}],"abstract":[{"type":"text","text":"Some "},{"type":"codeVoice","code":"ByteToMessageDecoder"},{"type":"text","text":"s need to observe "},{"code":"write","type":"codeVoice"},{"text":"s (which are outbound events). ","type":"text"},{"code":"ByteToMessageDecoder","type":"codeVoice"},{"text":"s which","type":"text"},{"text":" ","type":"text"},{"text":"implement the ","type":"text"},{"code":"WriteObservingByteToMessageDecoder","type":"codeVoice"},{"text":" protocol will be notified about every outbound write.","type":"text"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/IOData":{"navigatorTitle":[{"text":"IOData","kind":"identifier"}],"role":"symbol","url":"\/documentation\/niocore\/iodata","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/IOData","title":"IOData","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IOData","kind":"identifier"}],"abstract":[{"type":"codeVoice","code":"IOData"},{"text":" unifies standard SwiftNIO types that are raw bytes of data; currently ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"FileRegion"},{"text":".","type":"text"}],"kind":"symbol","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOAny":{"abstract":[{"type":"codeVoice","code":"NIOAny"},{"text":" is an opaque container for values of ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"any"}]},{"text":" type, similar to Swift’s builtin ","type":"text"},{"type":"codeVoice","code":"Any"},{"text":" type. Contrary to","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Any"},{"text":" the overhead of ","type":"text"},{"type":"codeVoice","code":"NIOAny"},{"text":" depends on the the type of the wrapped value. Certain types that are important","type":"text"},{"text":" ","type":"text"},{"text":"for the performance of a SwiftNIO application like ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":", ","type":"text"},{"type":"codeVoice","code":"FileRegion"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"AddressEnvelope<ByteBuffer>"},{"text":" can be expected","type":"text"},{"text":" ","type":"text"},{"text":"to be wrapped almost without overhead. All others will have similar performance as if they were passed as an ","type":"text"},{"type":"codeVoice","code":"Any"},{"text":" as","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"NIOAny"},{"text":" just like ","type":"text"},{"type":"codeVoice","code":"Any"},{"text":" will contain them within an existential container.","type":"text"}],"title":"NIOAny","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOAny","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOAny","kind":"identifier"}],"kind":"symbol","navigatorTitle":[{"text":"NIOAny","kind":"identifier"}],"type":"topic","url":"\/documentation\/niocore\/nioany"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ConnectTimeoutOption":{"kind":"symbol","navigatorTitle":[{"text":"ConnectTimeoutOption","kind":"identifier"}],"role":"symbol","type":"topic","title":"ConnectTimeoutOption","url":"\/documentation\/niocore\/connecttimeoutoption","abstract":[],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ConnectTimeoutOption","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"ConnectTimeoutOption"}],"deprecated":true},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOSingleStepByteToMessageProcessor":{"navigatorTitle":[{"text":"NIOSingleStepByteToMessageProcessor","kind":"identifier"}],"url":"\/documentation\/niocore\/niosinglestepbytetomessageprocessor","title":"NIOSingleStepByteToMessageProcessor","role":"symbol","abstract":[{"code":"NIOSingleStepByteToMessageProcessor","type":"codeVoice"},{"type":"text","text":" uses a "},{"code":"NIOSingleStepByteToMessageDecoder","type":"codeVoice"},{"text":" to produce messages","type":"text"},{"text":" ","type":"text"},{"text":"from a stream of incoming bytes. It works like ","type":"text"},{"code":"ByteToMessageHandler","type":"codeVoice"},{"text":" but may be used outside of the channel pipeline. This allows","type":"text"},{"text":" ","type":"text"},{"text":"processing of wrapped protocols in a general way.","type":"text"}],"type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"NIOSingleStepByteToMessageProcessor","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOSingleStepByteToMessageProcessor"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ByteToMessageDecoder":{"abstract":[{"code":"ByteToMessageDecoder","type":"codeVoice"},{"type":"text","text":"s decode bytes in a stream-like fashion from "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" to another message type."}],"role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ByteToMessageDecoder"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteToMessageDecoder","navigatorTitle":[{"kind":"identifier","text":"ByteToMessageDecoder"}],"type":"topic","url":"\/documentation\/niocore\/bytetomessagedecoder","title":"ByteToMessageDecoder"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelOutboundHandler":{"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelOutboundHandler","url":"\/documentation\/niocore\/channeloutboundhandler","role":"symbol","abstract":[{"type":"codeVoice","code":"ChannelHandler"},{"type":"text","text":" which handles outbound I\/O events or intercept an outbound I\/O operation for a "},{"code":"Channel","type":"codeVoice"},{"type":"text","text":"."}],"kind":"symbol","title":"ChannelOutboundHandler","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ChannelOutboundHandler","kind":"identifier"}],"navigatorTitle":[{"text":"ChannelOutboundHandler","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/MaxMessagesPerReadOption":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/MaxMessagesPerReadOption","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"MaxMessagesPerReadOption"}],"type":"topic","url":"\/documentation\/niocore\/maxmessagesperreadoption","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"MaxMessagesPerReadOption"}],"abstract":[],"role":"symbol","title":"MaxMessagesPerReadOption","deprecated":true},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOSingleStepByteToMessageDecoder":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOSingleStepByteToMessageDecoder","abstract":[{"type":"text","text":"A simplified version of "},{"code":"ByteToMessageDecoder","type":"codeVoice"},{"type":"text","text":" that can generate zero or one messages for each invocation of "},{"type":"codeVoice","code":"decode"},{"type":"text","text":" or "},{"type":"codeVoice","code":"decodeLast"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Having "},{"type":"codeVoice","code":"decode"},{"type":"text","text":" and "},{"type":"codeVoice","code":"decodeLast"},{"type":"text","text":" return an optional message avoids re-entrancy problems, since the functions relinquish exclusive access"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" when returning. This allows for greatly simplified processing."}],"type":"topic","navigatorTitle":[{"text":"NIOSingleStepByteToMessageDecoder","kind":"identifier"}],"url":"\/documentation\/niocore\/niosinglestepbytetomessagedecoder","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOSingleStepByteToMessageDecoder","kind":"identifier"}],"kind":"symbol","title":"NIOSingleStepByteToMessageDecoder","role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelInvoker":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelInvoker","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ChannelInvoker","kind":"identifier"}],"kind":"symbol","role":"symbol","url":"\/documentation\/niocore\/channelinvoker","abstract":[{"type":"text","text":"A protocol that signals that outbound and inbound events are triggered by this invoker."}],"navigatorTitle":[{"text":"ChannelInvoker","kind":"identifier"}],"title":"ChannelInvoker"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ByteBufferAllocator":{"abstract":[{"text":"The preferred allocator for ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" values. The allocation strategy is opaque but is currently libc’s","type":"text"},{"text":" ","type":"text"},{"code":"malloc","type":"codeVoice"},{"text":", ","type":"text"},{"code":"realloc","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"free","type":"codeVoice"},{"type":"text","text":"."}],"kind":"symbol","title":"ByteBufferAllocator","role":"symbol","url":"\/documentation\/niocore\/bytebufferallocator","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ByteBufferAllocator"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBufferAllocator","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ByteBufferAllocator"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/FileDescriptor":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/FileDescriptor","title":"FileDescriptor","navigatorTitle":[{"text":"FileDescriptor","kind":"identifier"}],"url":"\/documentation\/niocore\/filedescriptor","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FileDescriptor","kind":"identifier"}],"type":"topic","abstract":[],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIODeadline":{"abstract":[{"text":"Represents a point in time.","type":"text"}],"type":"topic","url":"\/documentation\/niocore\/niodeadline","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIODeadline","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIODeadline","kind":"identifier"}],"navigatorTitle":[{"text":"NIODeadline","kind":"identifier"}],"title":"NIODeadline","role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelOptions":{"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ChannelOptions","kind":"identifier"}],"kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"Provides "},{"type":"codeVoice","code":"ChannelOption"},{"text":"s to be used with a ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":", ","type":"text"},{"code":"Bootstrap","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"ServerBootstrap","type":"codeVoice"},{"text":".","type":"text"}],"title":"ChannelOptions","navigatorTitle":[{"text":"ChannelOptions","kind":"identifier"}],"url":"\/documentation\/niocore\/channeloptions","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelOptions"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/RecvByteBufferAllocator":{"title":"RecvByteBufferAllocator","navigatorTitle":[{"kind":"identifier","text":"RecvByteBufferAllocator"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/RecvByteBufferAllocator","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RecvByteBufferAllocator","kind":"identifier"}],"kind":"symbol","type":"topic","url":"\/documentation\/niocore\/recvbytebufferallocator","abstract":[{"type":"text","text":"Allocates "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":"s to be used to read bytes from a "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":" and records the number of the actual bytes that were used."}],"role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/FixedSizeRecvByteBufferAllocator":{"kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/FixedSizeRecvByteBufferAllocator","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"FixedSizeRecvByteBufferAllocator"}],"title":"FixedSizeRecvByteBufferAllocator","type":"topic","abstract":[{"code":"RecvByteBufferAllocator","type":"codeVoice"},{"text":" which will always return a ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" with the same fixed size no matter what was recorded.","type":"text"}],"url":"\/documentation\/niocore\/fixedsizerecvbytebufferallocator","navigatorTitle":[{"kind":"identifier","text":"FixedSizeRecvByteBufferAllocator"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOMulticastNotImplementedError":{"kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOMulticastNotImplementedError","kind":"identifier"}],"navigatorTitle":[{"text":"NIOMulticastNotImplementedError","kind":"identifier"}],"url":"\/documentation\/niocore\/niomulticastnotimplementederror","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOMulticastNotImplementedError","type":"topic","title":"NIOMulticastNotImplementedError","abstract":[{"text":"Multicast has not been properly implemented on this channel.","type":"text"}],"role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/AutoReadOption":{"navigatorTitle":[{"kind":"identifier","text":"AutoReadOption"}],"url":"\/documentation\/niocore\/autoreadoption","abstract":[],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/AutoReadOption","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"AutoReadOption"}],"deprecated":true,"type":"topic","role":"symbol","title":"AutoReadOption","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/SocketOption":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/SocketOption","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"SocketOption"}],"type":"topic","url":"\/documentation\/niocore\/socketoption","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"SocketOption"}],"abstract":[],"role":"symbol","title":"SocketOption","deprecated":true},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOCloseOnErrorHandler":{"role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"A "},{"code":"ChannelInboundHandler","type":"codeVoice"},{"type":"text","text":" that closes the channel when an error is caught"}],"navigatorTitle":[{"kind":"identifier","text":"NIOCloseOnErrorHandler"}],"title":"NIOCloseOnErrorHandler","url":"\/documentation\/niocore\/niocloseonerrorhandler","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOCloseOnErrorHandler"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOCloseOnErrorHandler","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/AllowRemoteHalfClosureOption":{"title":"AllowRemoteHalfClosureOption","kind":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"AllowRemoteHalfClosureOption"}],"url":"\/documentation\/niocore\/allowremotehalfclosureoption","role":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"AllowRemoteHalfClosureOption"}],"deprecated":true,"abstract":[],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/AllowRemoteHalfClosureOption"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/CloseMode":{"title":"CloseMode","kind":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CloseMode","kind":"identifier"}],"type":"topic","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/CloseMode","navigatorTitle":[{"text":"CloseMode","kind":"identifier"}],"abstract":[{"text":"Specify what kind of close operation is requested.","type":"text"}],"url":"\/documentation\/niocore\/closemode"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIONetworkInterface":{"deprecated":true,"role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIONetworkInterface"}],"navigatorTitle":[{"kind":"identifier","text":"NIONetworkInterface"}],"kind":"symbol","type":"topic","url":"\/documentation\/niocore\/nionetworkinterface","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIONetworkInterface","abstract":[{"text":"A representation of a single network interface on a system.","type":"text"}],"title":"NIONetworkInterface"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/Channel":{"kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Channel"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/Channel","url":"\/documentation\/niocore\/channel","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Channel"}],"role":"symbol","title":"Channel","abstract":[{"text":"A ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":" is easiest thought of as a network socket. But it can be anything that is capable of I\/O operations such","type":"text"},{"text":" ","type":"text"},{"text":"as read, write, connect, and bind.","type":"text"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/Endianness":{"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"Endianness"}],"navigatorTitle":[{"kind":"identifier","text":"Endianness"}],"title":"Endianness","type":"topic","abstract":[{"type":"text","text":"Endianness refers to the sequential order in which bytes are arranged into larger numerical values when stored in"},{"type":"text","text":" "},{"type":"text","text":"memory or when transmitted over digital links."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/Endianness","role":"symbol","url":"\/documentation\/niocore\/endianness","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/WriteSpinOption":{"kind":"symbol","type":"topic","title":"WriteSpinOption","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"WriteSpinOption"}],"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/WriteSpinOption","abstract":[],"navigatorTitle":[{"kind":"identifier","text":"WriteSpinOption"}],"url":"\/documentation\/niocore\/writespinoption","deprecated":true},"doc://co.pointfree.VaporRouting/documentation/NIOCore/System":{"role":"symbol","url":"\/documentation\/niocore\/system","navigatorTitle":[{"text":"System","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/System","title":"System","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"text":"System","kind":"identifier"}],"kind":"symbol","abstract":[]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/SocketOptionValue":{"abstract":[],"type":"topic","navigatorTitle":[{"text":"SocketOptionValue","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/SocketOptionValue","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SocketOptionValue","kind":"identifier"}],"title":"SocketOptionValue","role":"symbol","url":"\/documentation\/niocore\/socketoptionvalue"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelHandler":{"kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ChannelHandler"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelHandler","url":"\/documentation\/niocore\/channelhandler","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ChannelHandler"}],"role":"symbol","title":"ChannelHandler","abstract":[{"text":"You should ","type":"text"},{"inlineContent":[{"type":"text","text":"never"}],"type":"emphasis"},{"text":" implement this protocol directly. Please implement one of its sub-protocols.","type":"text"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOClientTCPBootstrap":{"title":"NIOClientTCPBootstrap","kind":"symbol","role":"symbol","url":"\/documentation\/niocore\/nioclienttcpbootstrap","type":"topic","abstract":[{"type":"codeVoice","code":"NIOClientTCPBootstrap"},{"type":"text","text":" is a bootstrap that allows you to bootstrap client TCP connections using NIO on BSD Sockets,"},{"type":"text","text":" "},{"type":"text","text":"NIO Transport Services, or other ways."}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOClientTCPBootstrap","kind":"identifier"}],"navigatorTitle":[{"text":"NIOClientTCPBootstrap","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ByteBuffer":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ByteBuffer"}],"navigatorTitle":[{"kind":"identifier","text":"ByteBuffer"}],"title":"ByteBuffer","type":"topic","abstract":[{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" stores contiguously allocated raw bytes. It is a random and sequential accessible sequence of zero or"},{"type":"text","text":" "},{"type":"text","text":"more bytes (octets)."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBuffer","role":"symbol","url":"\/documentation\/niocore\/bytebuffer","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOMulticastNotSupportedError":{"navigatorTitle":[{"text":"NIOMulticastNotSupportedError","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOMulticastNotSupportedError","role":"symbol","abstract":[{"text":"Multicast is not supported on this interface.","type":"text"}],"title":"NIOMulticastNotSupportedError","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOMulticastNotSupportedError","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/niocore\/niomulticastnotsupportederror","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOEventLoopGroupProvider":{"type":"topic","abstract":[{"type":"text","text":"This type is intended to be used by libraries which use NIO, and offer their users either the option"},{"type":"text","text":" "},{"type":"text","text":"to "},{"type":"codeVoice","code":".share"},{"type":"text","text":" an existing event loop group or create (and manage) a new one ("},{"code":".createNew","type":"codeVoice"},{"text":") and let it be","type":"text"},{"text":" ","type":"text"},{"text":"managed by given library and its lifecycle.","type":"text"}],"title":"NIOEventLoopGroupProvider","url":"\/documentation\/niocore\/nioeventloopgroupprovider","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOEventLoopGroupProvider","navigatorTitle":[{"text":"NIOEventLoopGroupProvider","kind":"identifier"}],"role":"symbol","kind":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOEventLoopGroupProvider","kind":"identifier"}]}}}