{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/niohttp2\/http2framepayloadtohttp1clientcodec"]}],"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP2\/HTTP2FramePayloadToHTTP1ClientCodec","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP2"]]},"schemaVersion":{"patch":0,"minor":3,"major":0},"abstract":[{"type":"text","text":"A simple channel handler that translates HTTP\/2 concepts into HTTP\/1 data types,"},{"type":"text","text":" "},{"type":"text","text":"and vice versa, for use on the client side."}],"relationshipsSections":[{"type":"conformsTo","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelInboundHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelOutboundHandler"],"title":"Conforms To","kind":"relationships"}],"kind":"symbol","metadata":{"modules":[{"name":"NIOHTTP2"}],"role":"symbol","symbolKind":"class","externalID":"s:8NIOHTTP235HTTP2FramePayloadToHTTP1ClientCodecC","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HTTP2FramePayloadToHTTP1ClientCodec"}],"title":"HTTP2FramePayloadToHTTP1ClientCodec","navigatorTitle":[{"kind":"identifier","text":"HTTP2FramePayloadToHTTP1ClientCodec"}],"roleHeading":"Class"},"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP2\/HTTP2FramePayloadToHTTP1ClientCodec\/init(httpProtocol:normalizeHTTPHeaders:)"]},{"title":"Instance Methods","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP2\/HTTP2FramePayloadToHTTP1ClientCodec\/channelRead(context:data:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP2\/HTTP2FramePayloadToHTTP1ClientCodec\/write(context:data:promise:)"]},{"title":"Type Aliases","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP2\/HTTP2FramePayloadToHTTP1ClientCodec\/InboundIn","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP2\/HTTP2FramePayloadToHTTP1ClientCodec\/InboundOut","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP2\/HTTP2FramePayloadToHTTP1ClientCodec\/OutboundIn","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP2\/HTTP2FramePayloadToHTTP1ClientCodec\/OutboundOut"]},{"title":"Enumerations","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP2\/HTTP2FramePayloadToHTTP1ClientCodec\/HTTPProtocol"]},{"generated":true,"title":"Default Implementations","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP2\/HTTP2FramePayloadToHTTP1ClientCodec\/ChannelHandler-Implementations","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP2\/HTTP2FramePayloadToHTTP1ClientCodec\/ChannelInboundHandler-Implementations","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP2\/HTTP2FramePayloadToHTTP1ClientCodec\/ChannelOutboundHandler-Implementations"]}],"primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["Linux"],"tokens":[{"text":"final","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HTTP2FramePayloadToHTTP1ClientCodec"}]}],"kind":"declarations"},{"kind":"content","content":[{"anchor":"overview","level":2,"text":"Overview","type":"heading"},{"inlineContent":[{"type":"text","text":"This channel handler should be used alongside the "},{"code":"HTTP2StreamMultiplexer","type":"codeVoice"},{"type":"text","text":" to"},{"type":"text","text":" "},{"type":"text","text":"help provide a HTTP\/1.1-like abstraction on top of a HTTP\/2 multiplexed"},{"type":"text","text":" "},{"type":"text","text":"connection."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This handler uses "},{"code":"HTTP2Frame.FramePayload","type":"codeVoice"},{"type":"text","text":" as its HTTP\/2 currency type."}],"type":"paragraph"}]}],"sections":[],"references":{"doc://co.pointfree.VaporRouting/documentation/NIOHTTP2/HTTP2FramePayloadToHTTP1ClientCodec/init(httpProtocol:normalizeHTTPHeaders:)":{"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP2\/HTTP2FramePayloadToHTTP1ClientCodec\/init(httpProtocol:normalizeHTTPHeaders:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"httpProtocol"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:8NIOHTTP235HTTP2FramePayloadToHTTP1ClientCodecC","text":"HTTP2FramePayloadToHTTP1ClientCodec"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:8NIOHTTP235HTTP2FramePayloadToHTTP1ClientCodecC12HTTPProtocolO","text":"HTTPProtocol"},{"kind":"text","text":", "},{"kind":"externalParam","text":"normalizeHTTPHeaders"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":")"}],"url":"\/documentation\/niohttp2\/http2framepayloadtohttp1clientcodec\/init(httpprotocol:normalizehttpheaders:)","kind":"symbol","type":"topic","abstract":[{"text":"Initializes a ","type":"text"},{"type":"codeVoice","code":"HTTP2PayloadToHTTP1ClientCodec"},{"type":"text","text":"."}],"title":"init(httpProtocol:normalizeHTTPHeaders:)"},"doc://co.pointfree.VaporRouting/documentation/NIOHTTP2/HTTP2FramePayloadToHTTP1ClientCodec/write(context:data:promise:)":{"abstract":[{"type":"text","text":"Called to request a write operation. The write operation will write the messages through the"},{"text":" ","type":"text"},{"type":"codeVoice","code":"ChannelPipeline"},{"text":". Those are then ready to be flushed to the actual ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":" when","type":"text"},{"text":" ","type":"text"},{"code":"Channel.flush","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"ChannelHandlerContext.flush","type":"codeVoice"},{"text":" is called.","type":"text"}],"type":"topic","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP2\/HTTP2FramePayloadToHTTP1ClientCodec\/write(context:data:promise:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"write"},{"kind":"text","text":"("},{"kind":"externalParam","text":"context"},{"kind":"text","text":": "},{"preciseIdentifier":"s:7NIOCore21ChannelHandlerContextC","text":"ChannelHandlerContext","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"data","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7NIOCore6NIOAnyV","text":"NIOAny","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"promise","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7NIOCore16EventLoopPromiseV","text":"EventLoopPromise","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"text":">?)","kind":"text"}],"title":"write(context:data:promise:)","role":"symbol","url":"\/documentation\/niohttp2\/http2framepayloadtohttp1clientcodec\/write(context:data:promise:)"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelInboundHandler":{"navigatorTitle":[{"kind":"identifier","text":"ChannelInboundHandler"}],"title":"ChannelInboundHandler","abstract":[{"type":"codeVoice","code":"ChannelHandler"},{"type":"text","text":" which handles inbound I\/O events for a "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":"."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelInboundHandler","role":"symbol","url":"\/documentation\/niocore\/channelinboundhandler","type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ChannelInboundHandler"}]},"doc://co.pointfree.VaporRouting/documentation/NIOHTTP2/HTTP2FramePayloadToHTTP1ClientCodec":{"abstract":[{"type":"text","text":"A simple channel handler that translates HTTP\/2 concepts into HTTP\/1 data types,"},{"type":"text","text":" "},{"type":"text","text":"and vice versa, for use on the client side."}],"url":"\/documentation\/niohttp2\/http2framepayloadtohttp1clientcodec","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HTTP2FramePayloadToHTTP1ClientCodec"}],"kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP2\/HTTP2FramePayloadToHTTP1ClientCodec","type":"topic","title":"HTTP2FramePayloadToHTTP1ClientCodec","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"HTTP2FramePayloadToHTTP1ClientCodec"}]},"doc://co.pointfree.VaporRouting/documentation/NIOHTTP2/HTTP2FramePayloadToHTTP1ClientCodec/OutboundIn":{"url":"\/documentation\/niohttp2\/http2framepayloadtohttp1clientcodec\/outboundin","role":"symbol","kind":"symbol","abstract":[{"text":"The type of the outbound data which is wrapped in ","type":"text"},{"type":"codeVoice","code":"NIOAny"},{"text":".","type":"text"}],"fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"OutboundIn"}],"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP2\/HTTP2FramePayloadToHTTP1ClientCodec\/OutboundIn","title":"HTTP2FramePayloadToHTTP1ClientCodec.OutboundIn","navigatorTitle":[{"kind":"identifier","text":"OutboundIn"}]},"doc://co.pointfree.VaporRouting/documentation/NIOHTTP2/HTTP2FramePayloadToHTTP1ClientCodec/ChannelInboundHandler-Implementations":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP2\/HTTP2FramePayloadToHTTP1ClientCodec\/ChannelInboundHandler-Implementations","type":"topic","abstract":[],"kind":"article","title":"ChannelInboundHandler Implementations","url":"\/documentation\/niohttp2\/http2framepayloadtohttp1clientcodec\/channelinboundhandler-implementations","role":"collectionGroup"},"doc://co.pointfree.VaporRouting/documentation/NIOHTTP2/HTTP2FramePayloadToHTTP1ClientCodec/ChannelHandler-Implementations":{"role":"collectionGroup","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP2\/HTTP2FramePayloadToHTTP1ClientCodec\/ChannelHandler-Implementations","url":"\/documentation\/niohttp2\/http2framepayloadtohttp1clientcodec\/channelhandler-implementations","kind":"article","type":"topic","abstract":[],"title":"ChannelHandler Implementations"},"doc://co.pointfree.VaporRouting/documentation/NIOHTTP2/HTTP2FramePayloadToHTTP1ClientCodec/ChannelOutboundHandler-Implementations":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP2\/HTTP2FramePayloadToHTTP1ClientCodec\/ChannelOutboundHandler-Implementations","type":"topic","abstract":[],"kind":"article","title":"ChannelOutboundHandler Implementations","url":"\/documentation\/niohttp2\/http2framepayloadtohttp1clientcodec\/channeloutboundhandler-implementations","role":"collectionGroup"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelOutboundHandler":{"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelOutboundHandler","url":"\/documentation\/niocore\/channeloutboundhandler","role":"symbol","abstract":[{"type":"codeVoice","code":"ChannelHandler"},{"type":"text","text":" which handles outbound I\/O events or intercept an outbound I\/O operation for a "},{"code":"Channel","type":"codeVoice"},{"type":"text","text":"."}],"kind":"symbol","title":"ChannelOutboundHandler","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ChannelOutboundHandler","kind":"identifier"}],"navigatorTitle":[{"text":"ChannelOutboundHandler","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOHTTP2/HTTP2FramePayloadToHTTP1ClientCodec/OutboundOut":{"title":"HTTP2FramePayloadToHTTP1ClientCodec.OutboundOut","url":"\/documentation\/niohttp2\/http2framepayloadtohttp1clientcodec\/outboundout","kind":"symbol","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"OutboundOut","kind":"identifier"}],"abstract":[{"text":"The type of the outbound data which will be forwarded to the next ","type":"text"},{"type":"codeVoice","code":"ChannelOutboundHandler"},{"text":" in the ","type":"text"},{"type":"codeVoice","code":"ChannelPipeline"},{"text":".","type":"text"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP2\/HTTP2FramePayloadToHTTP1ClientCodec\/OutboundOut","navigatorTitle":[{"text":"OutboundOut","kind":"identifier"}],"type":"topic","role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOHTTP2/HTTP2FramePayloadToHTTP1ClientCodec/channelRead(context:data:)":{"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP2\/HTTP2FramePayloadToHTTP1ClientCodec\/channelRead(context:data:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"channelRead"},{"kind":"text","text":"("},{"kind":"externalParam","text":"context"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore21ChannelHandlerContextC","text":"ChannelHandlerContext"},{"kind":"text","text":", "},{"kind":"externalParam","text":"data"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore6NIOAnyV","text":"NIOAny"},{"kind":"text","text":")"}],"url":"\/documentation\/niohttp2\/http2framepayloadtohttp1clientcodec\/channelread(context:data:)","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Called when some data has been read from the remote peer."}],"title":"channelRead(context:data:)"},"doc://co.pointfree.VaporRouting/documentation/NIOHTTP2/HTTP2FramePayloadToHTTP1ClientCodec/HTTPProtocol":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP2\/HTTP2FramePayloadToHTTP1ClientCodec\/HTTPProtocol","navigatorTitle":[{"kind":"identifier","text":"HTTPProtocol"}],"type":"topic","abstract":[{"type":"text","text":"The HTTP protocol scheme being used on this connection."}],"kind":"symbol","title":"HTTP2FramePayloadToHTTP1ClientCodec.HTTPProtocol","url":"\/documentation\/niohttp2\/http2framepayloadtohttp1clientcodec\/httpprotocol","role":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"HTTPProtocol"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelHandler":{"kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ChannelHandler"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelHandler","url":"\/documentation\/niocore\/channelhandler","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ChannelHandler"}],"role":"symbol","title":"ChannelHandler","abstract":[{"text":"You should ","type":"text"},{"inlineContent":[{"type":"text","text":"never"}],"type":"emphasis"},{"text":" implement this protocol directly. Please implement one of its sub-protocols.","type":"text"}]},"doc://co.pointfree.VaporRouting/documentation/NIOHTTP2/HTTP2FramePayloadToHTTP1ClientCodec/InboundIn":{"url":"\/documentation\/niohttp2\/http2framepayloadtohttp1clientcodec\/inboundin","abstract":[{"type":"text","text":"The type of the inbound data which is wrapped in "},{"code":"NIOAny","type":"codeVoice"},{"type":"text","text":"."}],"kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP2\/HTTP2FramePayloadToHTTP1ClientCodec\/InboundIn","type":"topic","title":"HTTP2FramePayloadToHTTP1ClientCodec.InboundIn","navigatorTitle":[{"kind":"identifier","text":"InboundIn"}],"fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"InboundIn"}],"role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOHTTP2":{"url":"\/documentation\/niohttp2","title":"NIOHTTP2","role":"collection","type":"topic","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP2","abstract":[]},"doc://co.pointfree.VaporRouting/documentation/NIOHTTP2/HTTP2FramePayloadToHTTP1ClientCodec/InboundOut":{"url":"\/documentation\/niohttp2\/http2framepayloadtohttp1clientcodec\/inboundout","title":"HTTP2FramePayloadToHTTP1ClientCodec.InboundOut","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP2\/HTTP2FramePayloadToHTTP1ClientCodec\/InboundOut","type":"topic","abstract":[{"type":"text","text":"The type of the inbound data which will be forwarded to the next "},{"code":"ChannelInboundHandler","type":"codeVoice"},{"type":"text","text":" in the "},{"code":"ChannelPipeline","type":"codeVoice"},{"type":"text","text":"."}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"InboundOut"}],"fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"InboundOut"}],"role":"symbol"}}}