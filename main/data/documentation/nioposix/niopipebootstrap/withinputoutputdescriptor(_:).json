{"kind":"symbol","abstract":[{"text":"Create the ","type":"text"},{"type":"codeVoice","code":"PipeChannel"},{"text":" with the provided file descriptor which is used for both input & output.","type":"text"}],"sections":[],"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/NIOPipeBootstrap\/withInputOutputDescriptor(_:)","interfaceLanguage":"swift"},"schemaVersion":{"major":0,"minor":3,"patch":0},"metadata":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"withInputOutputDescriptor"},{"kind":"text","text":"("},{"preciseIdentifier":"s:s4CInta","kind":"typeIdentifier","text":"CInt"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:7NIOCore15EventLoopFutureC","kind":"typeIdentifier","text":"EventLoopFuture"},{"kind":"text","text":"<"},{"preciseIdentifier":"s:7NIOCore7ChannelP","kind":"typeIdentifier","text":"Channel"},{"kind":"text","text":">"}],"modules":[{"name":"NIOPosix"}],"role":"symbol","symbolKind":"method","externalID":"s:8NIOPosix16NIOPipeBootstrapC25withInputOutputDescriptory7NIOCore15EventLoopFutureCyAE7Channel_pGs5Int32VF","title":"withInputOutputDescriptor(_:)","roleHeading":"Instance Method"},"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/NIOPipeBootstrap"]]},"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"withInputOutputDescriptor"},{"kind":"text","text":"("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"fileDescriptor"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s4CInta","kind":"typeIdentifier","text":"CInt"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:7NIOCore15EventLoopFutureC","kind":"typeIdentifier","text":"EventLoopFuture","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture"},{"kind":"text","text":"<"},{"preciseIdentifier":"s:7NIOCore7ChannelP","kind":"typeIdentifier","text":"Channel","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/Channel"},{"kind":"text","text":">"}],"platforms":["Linux"]}],"kind":"declarations"},{"content":[{"text":"Return Value","anchor":"return-value","type":"heading","level":2},{"inlineContent":[{"text":"an ","type":"text"},{"code":"EventLoopFuture<Channel>","type":"codeVoice"},{"text":" to deliver the ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}],"kind":"content"},{"parameters":[{"name":"fileDescriptor","content":[{"inlineContent":[{"text":"The ","type":"text"},{"inlineContent":[{"text":"Unix file descriptor","type":"text"}],"type":"emphasis"},{"text":" for the input & output.","type":"text"}],"type":"paragraph"}]}],"kind":"parameters"},{"content":[{"text":"Discussion","anchor":"discussion","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"This method is useful for specialilsed use-cases where you want to use "},{"type":"codeVoice","code":"NIOPipeBootstrap"},{"type":"text","text":" for say a serial line."}],"type":"paragraph"},{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If this method returns a succeeded future, SwiftNIO will close "},{"type":"codeVoice","code":"fileDescriptor"},{"type":"text","text":" when the "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":" "},{"type":"text","text":"becomes inactive. You "},{"inlineContent":[{"text":"must not","type":"text"}],"type":"emphasis"},{"type":"text","text":" do any further operations with "},{"type":"codeVoice","code":"fileDescriptor"},{"type":"text","text":", including "},{"type":"codeVoice","code":"close"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"If this method returns a failed future, you still own the file descriptor and are responsible for"},{"type":"text","text":" "},{"type":"text","text":"closing it."}]}],"style":"note"}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/nioposix\/niopipebootstrap\/withinputoutputdescriptor(_:)"]}],"references":{"doc://co.pointfree.VaporRouting/documentation/NIOPosix":{"abstract":[],"title":"NIOPosix","role":"collection","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix","type":"topic","url":"\/documentation\/nioposix","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOPosix/NIOPipeBootstrap":{"kind":"symbol","role":"symbol","navigatorTitle":[{"text":"NIOPipeBootstrap","kind":"identifier"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOPipeBootstrap","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/NIOPipeBootstrap","abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"NIOPipeBootstrap"},{"type":"text","text":" is an easy way to bootstrap a "},{"type":"codeVoice","code":"PipeChannel"},{"type":"text","text":" which uses two (uni-directional) UNIX pipes"},{"type":"text","text":" "},{"type":"text","text":"and makes a "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":" out of them."}],"title":"NIOPipeBootstrap","type":"topic","url":"\/documentation\/nioposix\/niopipebootstrap"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoopFuture":{"type":"topic","url":"\/documentation\/niocore\/eventloopfuture","role":"symbol","navigatorTitle":[{"text":"EventLoopFuture","kind":"identifier"}],"title":"EventLoopFuture","kind":"symbol","abstract":[{"text":"Holder for a result that will be provided later.","type":"text"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EventLoopFuture","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/Channel":{"kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Channel"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/Channel","url":"\/documentation\/niocore\/channel","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Channel"}],"role":"symbol","title":"Channel","abstract":[{"text":"A ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":" is easiest thought of as a network socket. But it can be anything that is capable of I\/O operations such","type":"text"},{"text":" ","type":"text"},{"text":"as read, write, connect, and bind.","type":"text"}]},"doc://co.pointfree.VaporRouting/documentation/NIOPosix/NIOPipeBootstrap/withInputOutputDescriptor(_:)":{"kind":"symbol","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"withInputOutputDescriptor","kind":"identifier"},{"text":"(","kind":"text"},{"text":"CInt","kind":"typeIdentifier","preciseIdentifier":"s:s4CInta"},{"text":") -> ","kind":"text"},{"text":"EventLoopFuture","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore15EventLoopFutureC"},{"text":"<","kind":"text"},{"text":"Channel","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore7ChannelP"},{"text":">","kind":"text"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/NIOPipeBootstrap\/withInputOutputDescriptor(_:)","abstract":[{"type":"text","text":"Create the "},{"type":"codeVoice","code":"PipeChannel"},{"type":"text","text":" with the provided file descriptor which is used for both input & output."}],"title":"withInputOutputDescriptor(_:)","type":"topic","url":"\/documentation\/nioposix\/niopipebootstrap\/withinputoutputdescriptor(_:)"}}}