{"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap\/init(group:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap\/init(validatingGroup:)"]},{"title":"Instance Methods","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap\/bind(to:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap\/channelInitializer(_:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap\/channelOption(_:value:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap\/connect(host:port:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap\/connect(to:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap\/connect(unixDomainSocketPath:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap\/connectTimeout(_:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap\/protocolHandlers(_:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap\/resolver(_:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap\/withConnectedSocket(_:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap\/withConnectedSocket(descriptor:)"]}],"relationshipsSections":[{"title":"Conforms To","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrapProtocol"],"type":"conformsTo","kind":"relationships"}],"sections":[],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/nioposix\/clientbootstrap"]}],"abstract":[{"type":"text","text":"A "},{"code":"ClientBootstrap","type":"codeVoice"},{"type":"text","text":" is an easy way to bootstrap a "},{"code":"SocketChannel","type":"codeVoice"},{"type":"text","text":" when creating network clients."}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix"]]},"schemaVersion":{"major":0,"minor":3,"patch":0},"metadata":{"roleHeading":"Class","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ClientBootstrap","kind":"identifier"}],"title":"ClientBootstrap","externalID":"s:8NIOPosix15ClientBootstrapC","navigatorTitle":[{"text":"ClientBootstrap","kind":"identifier"}],"role":"symbol","symbolKind":"class","modules":[{"name":"NIOPosix"}]},"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"text":"final","kind":"keyword"},{"text":" ","kind":"text"},{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ClientBootstrap","kind":"identifier"}],"platforms":["Linux"]}],"kind":"declarations"},{"kind":"content","content":[{"text":"Overview","type":"heading","anchor":"overview","level":2},{"inlineContent":[{"text":"Usually you re-use a ","type":"text"},{"code":"ClientBootstrap","type":"codeVoice"},{"text":" once you set it up and called ","type":"text"},{"code":"connect","type":"codeVoice"},{"text":" multiple times on it.","type":"text"},{"text":" ","type":"text"},{"text":"This way you ensure that the same ","type":"text"},{"code":"EventLoop","type":"codeVoice"},{"text":"s will be shared across all your connections.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Example:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["    let group = MultiThreadedEventLoopGroup(numberOfThreads: 1)","    defer {","        try! group.syncShutdownGracefully()","    }","    let bootstrap = ClientBootstrap(group: group)","        \/\/ Enable SO_REUSEADDR.","        .channelOption(ChannelOptions.socketOption(.so_reuseaddr), value: 1)","        .channelInitializer { channel in","            \/\/ always instantiate the handler _within_ the closure as","            \/\/ it may be called multiple times (for example if the hostname","            \/\/ resolves to both IPv4 and IPv6 addresses, cf. Happy Eyeballs).","            channel.pipeline.addHandler(MyChannelHandler())","        }","    try! bootstrap.connect(host: \"example.org\", port: 12345).wait()","    \/* the Channel is now connected *\/"]},{"inlineContent":[{"text":"The connected ","type":"text"},{"type":"codeVoice","code":"SocketChannel"},{"text":" will operate on ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":" as inbound and on ","type":"text"},{"type":"codeVoice","code":"IOData"},{"text":" as outbound messages.","type":"text"}],"type":"paragraph"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap"},"kind":"symbol","references":{"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOClientTCPBootstrapProtocol":{"title":"NIOClientTCPBootstrapProtocol","kind":"symbol","role":"symbol","url":"\/documentation\/niocore\/nioclienttcpbootstrapprotocol","type":"topic","abstract":[{"type":"codeVoice","code":"NIOClientTCPBootstrapProtocol"},{"type":"text","text":" is implemented by various underlying transport mechanisms. Typically,"},{"type":"text","text":" "},{"type":"text","text":"this will be the BSD Sockets API implemented by "},{"code":"ClientBootstrap","type":"codeVoice"},{"type":"text","text":"."}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOClientTCPBootstrapProtocol","kind":"identifier"}],"navigatorTitle":[{"text":"NIOClientTCPBootstrapProtocol","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrapProtocol"},"doc://co.pointfree.VaporRouting/documentation/NIOPosix/ClientBootstrap/bind(to:)":{"url":"\/documentation\/nioposix\/clientbootstrap\/bind(to:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"bind","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"to"},{"kind":"text","text":": "},{"preciseIdentifier":"s:7NIOCore13SocketAddressO","kind":"typeIdentifier","text":"SocketAddress"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:8NIOPosix15ClientBootstrapC","kind":"typeIdentifier","text":"ClientBootstrap"}],"abstract":[{"type":"text","text":"Bind the "},{"code":"SocketChannel","type":"codeVoice"},{"type":"text","text":" to "},{"code":"address","type":"codeVoice"},{"type":"text","text":"."}],"type":"topic","title":"bind(to:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap\/bind(to:)","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOPosix/ClientBootstrap/withConnectedSocket(descriptor:)":{"url":"\/documentation\/nioposix\/clientbootstrap\/withconnectedsocket(descriptor:)","deprecated":true,"role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"withConnectedSocket","kind":"identifier"},{"text":"(","kind":"text"},{"text":"descriptor","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s4CInta","text":"CInt","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:7NIOCore15EventLoopFutureC","kind":"typeIdentifier","text":"EventLoopFuture"},{"kind":"text","text":"<"},{"preciseIdentifier":"s:7NIOCore7ChannelP","kind":"typeIdentifier","text":"Channel"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Use the existing connected socket file descriptor."}],"type":"topic","title":"withConnectedSocket(descriptor:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap\/withConnectedSocket(descriptor:)","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOPosix/ClientBootstrap/connectTimeout(_:)":{"url":"\/documentation\/nioposix\/clientbootstrap\/connecttimeout(_:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"connectTimeout","kind":"identifier"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:7NIOCore10TimeAmountV","text":"TimeAmount","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"abstract":[{"type":"text","text":"Specifies a timeout to apply to a connection attempt."}],"type":"topic","title":"connectTimeout(_:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap\/connectTimeout(_:)","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOPosix/ClientBootstrap/connect(host:port:)":{"url":"\/documentation\/nioposix\/clientbootstrap\/connect(host:port:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"connect"},{"kind":"text","text":"("},{"kind":"externalParam","text":"host"},{"kind":"text","text":": "},{"preciseIdentifier":"s:SS","kind":"typeIdentifier","text":"String"},{"kind":"text","text":", "},{"kind":"externalParam","text":"port"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:7NIOCore15EventLoopFutureC","kind":"typeIdentifier","text":"EventLoopFuture"},{"kind":"text","text":"<"},{"preciseIdentifier":"s:7NIOCore7ChannelP","kind":"typeIdentifier","text":"Channel"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Specify the "},{"code":"host","type":"codeVoice"},{"type":"text","text":" and "},{"code":"port","type":"codeVoice"},{"type":"text","text":" to connect to for the TCP "},{"code":"Channel","type":"codeVoice"},{"type":"text","text":" that will be established."}],"type":"topic","title":"connect(host:port:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap\/connect(host:port:)","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOPosix":{"abstract":[],"title":"NIOPosix","role":"collection","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix","type":"topic","url":"\/documentation\/nioposix","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOPosix/ClientBootstrap/resolver(_:)":{"title":"resolver(_:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap\/resolver(_:)","kind":"symbol","abstract":[{"text":"Specifies the ","type":"text"},{"code":"Resolver","type":"codeVoice"},{"text":" to use or ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" if the default should be used.","type":"text"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"resolver","kind":"identifier"},{"kind":"text","text":"("},{"preciseIdentifier":"s:8NIOPosix8ResolverP","kind":"typeIdentifier","text":"Resolver"},{"kind":"text","text":"?) -> "},{"kind":"typeIdentifier","text":"Self"}],"role":"symbol","type":"topic","url":"\/documentation\/nioposix\/clientbootstrap\/resolver(_:)"},"doc://co.pointfree.VaporRouting/documentation/NIOPosix/ClientBootstrap/protocolHandlers(_:)":{"title":"protocolHandlers(_:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap\/protocolHandlers(_:)","kind":"symbol","abstract":[{"text":"Sets the protocol handlers that will be added to the front of the ","type":"text"},{"code":"ChannelPipeline","type":"codeVoice"},{"text":" right after the","type":"text"},{"text":" ","type":"text"},{"code":"channelInitializer","type":"codeVoice"},{"text":" has been called.","type":"text"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"protocolHandlers"},{"kind":"text","text":"(() -> ["},{"preciseIdentifier":"s:7NIOCore14ChannelHandlerP","kind":"typeIdentifier","text":"ChannelHandler"},{"kind":"text","text":"]) -> "},{"kind":"typeIdentifier","text":"Self"}],"role":"symbol","type":"topic","url":"\/documentation\/nioposix\/clientbootstrap\/protocolhandlers(_:)"},"doc://co.pointfree.VaporRouting/documentation/NIOPosix/ClientBootstrap/withConnectedSocket(_:)":{"title":"withConnectedSocket(_:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap\/withConnectedSocket(_:)","kind":"symbol","abstract":[{"text":"Use the existing connected socket file descriptor.","type":"text"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"withConnectedSocket","kind":"identifier"},{"text":"(","kind":"text"},{"text":"NIOBSDSocket","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore12NIOBSDSocketO"},{"text":".","kind":"text"},{"text":"Handle","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore12NIOBSDSocketO6Handlea"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:7NIOCore15EventLoopFutureC","kind":"typeIdentifier","text":"EventLoopFuture"},{"kind":"text","text":"<"},{"preciseIdentifier":"s:7NIOCore7ChannelP","kind":"typeIdentifier","text":"Channel"},{"kind":"text","text":">"}],"role":"symbol","type":"topic","url":"\/documentation\/nioposix\/clientbootstrap\/withconnectedsocket(_:)"},"doc://co.pointfree.VaporRouting/documentation/NIOPosix/ClientBootstrap/connect(to:)":{"title":"connect(to:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap\/connect(to:)","kind":"symbol","abstract":[{"text":"Specify the ","type":"text"},{"code":"address","type":"codeVoice"},{"text":" to connect to for the TCP ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":" that will be established.","type":"text"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"connect","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"to"},{"kind":"text","text":": "},{"preciseIdentifier":"s:7NIOCore13SocketAddressO","kind":"typeIdentifier","text":"SocketAddress"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:7NIOCore15EventLoopFutureC","kind":"typeIdentifier","text":"EventLoopFuture"},{"kind":"text","text":"<"},{"preciseIdentifier":"s:7NIOCore7ChannelP","kind":"typeIdentifier","text":"Channel"},{"kind":"text","text":">"}],"role":"symbol","type":"topic","url":"\/documentation\/nioposix\/clientbootstrap\/connect(to:)"},"doc://co.pointfree.VaporRouting/documentation/NIOPosix/ClientBootstrap/channelInitializer(_:)":{"url":"\/documentation\/nioposix\/clientbootstrap\/channelinitializer(_:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap\/channelInitializer(_:)","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"channelInitializer"},{"kind":"text","text":"(("},{"preciseIdentifier":"s:7NIOCore7ChannelP","kind":"typeIdentifier","text":"Channel"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:7NIOCore15EventLoopFutureC","kind":"typeIdentifier","text":"EventLoopFuture"},{"kind":"text","text":"<"},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"Self"}],"role":"symbol","type":"topic","title":"channelInitializer(_:)","abstract":[{"type":"text","text":"Initialize the connected "},{"type":"codeVoice","code":"SocketChannel"},{"type":"text","text":" with "},{"type":"codeVoice","code":"initializer"},{"type":"text","text":". The most common task in initializer is to add"},{"type":"text","text":" "},{"type":"codeVoice","code":"ChannelHandler"},{"type":"text","text":"s to the "},{"code":"ChannelPipeline","type":"codeVoice"},{"type":"text","text":"."}]},"doc://co.pointfree.VaporRouting/documentation/NIOPosix/ClientBootstrap/init(validatingGroup:)":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap\/init(validatingGroup:)","url":"\/documentation\/nioposix\/clientbootstrap\/init(validatinggroup:)","title":"init(validatingGroup:)","type":"topic","kind":"symbol","role":"symbol","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"?("},{"kind":"externalParam","text":"validatingGroup"},{"kind":"text","text":": "},{"preciseIdentifier":"s:7NIOCore14EventLoopGroupP","kind":"typeIdentifier","text":"EventLoopGroup"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Create a "},{"type":"codeVoice","code":"ClientBootstrap"},{"type":"text","text":" on the "},{"type":"codeVoice","code":"EventLoopGroup"},{"type":"text","text":" "},{"type":"codeVoice","code":"group"},{"type":"text","text":", validating that "},{"code":"group","type":"codeVoice"},{"type":"text","text":" is compatible."}]},"doc://co.pointfree.VaporRouting/documentation/NIOPosix/ClientBootstrap/init(group:)":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap\/init(group:)","url":"\/documentation\/nioposix\/clientbootstrap\/init(group:)","title":"init(group:)","type":"topic","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"convenience"},{"kind":"text","text":" "},{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"group"},{"kind":"text","text":": "},{"preciseIdentifier":"s:7NIOCore14EventLoopGroupP","kind":"typeIdentifier","text":"EventLoopGroup"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Create a "},{"type":"codeVoice","code":"ClientBootstrap"},{"type":"text","text":" on the "},{"type":"codeVoice","code":"EventLoopGroup"},{"type":"text","text":" "},{"type":"codeVoice","code":"group"},{"type":"text","text":"."}]},"doc://co.pointfree.VaporRouting/documentation/NIOPosix/ClientBootstrap":{"url":"\/documentation\/nioposix\/clientbootstrap","navigatorTitle":[{"kind":"identifier","text":"ClientBootstrap"}],"type":"topic","kind":"symbol","abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"ClientBootstrap"},{"type":"text","text":" is an easy way to bootstrap a "},{"type":"codeVoice","code":"SocketChannel"},{"type":"text","text":" when creating network clients."}],"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ClientBootstrap"}],"title":"ClientBootstrap"},"doc://co.pointfree.VaporRouting/documentation/NIOPosix/ClientBootstrap/connect(unixDomainSocketPath:)":{"url":"\/documentation\/nioposix\/clientbootstrap\/connect(unixdomainsocketpath:)","role":"symbol","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap\/connect(unixDomainSocketPath:)","kind":"symbol","title":"connect(unixDomainSocketPath:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"connect"},{"kind":"text","text":"("},{"kind":"externalParam","text":"unixDomainSocketPath"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","text":"EventLoopFuture"},{"kind":"text","text":"<"},{"preciseIdentifier":"s:7NIOCore7ChannelP","kind":"typeIdentifier","text":"Channel"},{"kind":"text","text":">"}],"abstract":[{"text":"Specify the ","type":"text"},{"type":"codeVoice","code":"unixDomainSocket"},{"text":" path to connect to for the UDS ","type":"text"},{"type":"codeVoice","code":"Channel"},{"text":" that will be established.","type":"text"}]},"doc://co.pointfree.VaporRouting/documentation/NIOPosix/ClientBootstrap/channelOption(_:value:)":{"title":"channelOption(_:value:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap\/channelOption(_:value:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"channelOption","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Option","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"Option","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"value"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Option"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"}],"kind":"symbol","url":"\/documentation\/nioposix\/clientbootstrap\/channeloption(_:value:)","abstract":[{"type":"text","text":"Specifies a "},{"type":"codeVoice","code":"ChannelOption"},{"type":"text","text":" to be applied to the "},{"type":"codeVoice","code":"SocketChannel"},{"type":"text","text":"."}],"type":"topic","role":"symbol"}}}