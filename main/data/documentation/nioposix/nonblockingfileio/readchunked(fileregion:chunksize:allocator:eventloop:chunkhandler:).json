{"primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["Linux"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"readChunked","kind":"identifier"},{"text":"(","kind":"text"},{"text":"fileRegion","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"FileRegion","preciseIdentifier":"s:7NIOCore10FileRegionV","kind":"typeIdentifier","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/FileRegion"},{"text":", ","kind":"text"},{"text":"chunkSize","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"text":" = NonBlockingFileIO.defaultChunkSize, ","kind":"text"},{"text":"allocator","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"ByteBufferAllocator","preciseIdentifier":"s:7NIOCore19ByteBufferAllocatorV","kind":"typeIdentifier","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBufferAllocator"},{"text":", ","kind":"text"},{"text":"eventLoop","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"EventLoop","preciseIdentifier":"s:7NIOCore9EventLoopP","kind":"typeIdentifier","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoop"},{"text":", ","kind":"text"},{"text":"chunkHandler","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"@escaping","kind":"keyword"},{"text":" (","kind":"text"},{"text":"ByteBuffer","preciseIdentifier":"s:7NIOCore10ByteBufferV","kind":"typeIdentifier","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBuffer"},{"text":") -> ","kind":"text"},{"text":"EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","kind":"typeIdentifier","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture"},{"text":"<","kind":"text"},{"text":"Void","preciseIdentifier":"s:s4Voida","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"text":"EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","kind":"typeIdentifier","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture"},{"text":"<","kind":"text"},{"text":"Void","preciseIdentifier":"s:s4Voida","kind":"typeIdentifier"},{"text":">","kind":"text"}]}],"kind":"declarations"},{"content":[{"anchor":"return-value","text":"Return Value","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"An "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":" which is the result of the overall operation. If either the reading of "},{"type":"codeVoice","code":"fileHandle"},{"type":"text","text":" or "},{"type":"codeVoice","code":"chunkHandler"},{"type":"text","text":" fails, the "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":" will fail too. If the reading of "},{"type":"codeVoice","code":"fileHandle"},{"type":"text","text":" as well as "},{"type":"codeVoice","code":"chunkHandler"},{"type":"text","text":" always succeeded, the "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":" will succeed too."}],"type":"paragraph"}],"kind":"content"},{"parameters":[{"name":"fileRegion","content":[{"inlineContent":[{"type":"text","text":"The file region to read."}],"type":"paragraph"}]},{"name":"chunkSize","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The size of the individual chunks to deliver."}]}]},{"name":"allocator","content":[{"inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"ByteBufferAllocator"},{"type":"text","text":" used to allocate space for the chunks."}],"type":"paragraph"}]},{"name":"eventLoop","content":[{"inlineContent":[{"text":"The ","type":"text"},{"code":"EventLoop","type":"codeVoice"},{"text":" to call ","type":"text"},{"code":"chunkHandler","type":"codeVoice"},{"text":" on.","type":"text"}],"type":"paragraph"}]},{"name":"chunkHandler","content":[{"inlineContent":[{"type":"text","text":"Called for every chunk read. The next chunk will be read upon successful completion of the returned "},{"code":"EventLoopFuture","type":"codeVoice"},{"type":"text","text":". If the returned "},{"code":"EventLoopFuture","type":"codeVoice"},{"type":"text","text":" fails, the overall operation is aborted."}],"type":"paragraph"}]}],"kind":"parameters"},{"content":[{"anchor":"discussion","text":"Discussion","level":2,"type":"heading"},{"inlineContent":[{"code":"chunkHandler","type":"codeVoice"},{"text":" will be called on ","type":"text"},{"code":"eventLoop","type":"codeVoice"},{"text":" for every chunk that was read. Assuming ","type":"text"},{"code":"fileRegion.readableBytes","type":"codeVoice"},{"text":" is greater than","type":"text"},{"text":" ","type":"text"},{"text":"zero and there are enough bytes available ","type":"text"},{"code":"chunkHandler","type":"codeVoice"},{"text":" will be called ","type":"text"},{"code":"1 + |_ fileRegion.readableBytes \/ chunkSize _|","type":"codeVoice"},{"text":" ","type":"text"},{"text":"times, delivering ","type":"text"},{"code":"chunkSize","type":"codeVoice"},{"text":" bytes each time. If less than ","type":"text"},{"code":"fileRegion.readableBytes","type":"codeVoice"},{"text":" bytes can be read from the file,","type":"text"},{"text":" ","type":"text"},{"code":"chunkHandler","type":"codeVoice"},{"text":" will be called less often with the last invocation possibly being of less than ","type":"text"},{"code":"chunkSize","type":"codeVoice"},{"text":" bytes.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"The allocation and reading of a subsequent chunk will only be attempted when ","type":"text"},{"code":"chunkHandler","type":"codeVoice"},{"text":" succeeds.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"This method will not use the file descriptor’s seek pointer which means there is no danger of reading from the","type":"text"},{"text":" ","type":"text"},{"text":"same ","type":"text"},{"code":"FileRegion","type":"codeVoice"},{"text":" in multiple threads.","type":"text"}],"type":"paragraph"}],"kind":"content"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/NonBlockingFileIO\/readChunked(fileRegion:chunkSize:allocator:eventLoop:chunkHandler:)"},"kind":"symbol","metadata":{"roleHeading":"Instance Method","title":"readChunked(fileRegion:chunkSize:allocator:eventLoop:chunkHandler:)","externalID":"s:8NIOPosix17NonBlockingFileIOV11readChunked10fileRegion9chunkSize9allocator9eventLoop0J7Handler7NIOCore05EventN6FutureCyytGAJ0dI0V_SiAJ19ByteBufferAllocatorVAJ0qN0_pAmJ0sT0VctF","role":"symbol","symbolKind":"method","modules":[{"name":"NIOPosix"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"readChunked","kind":"identifier"},{"text":"(","kind":"text"},{"text":"fileRegion","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7NIOCore10FileRegionV","text":"FileRegion","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"chunkSize","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"allocator","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7NIOCore19ByteBufferAllocatorV","text":"ByteBufferAllocator","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"eventLoop","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7NIOCore9EventLoopP","text":"EventLoop","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"chunkHandler","kind":"externalParam"},{"text":": (","kind":"text"},{"preciseIdentifier":"s:7NIOCore10ByteBufferV","text":"ByteBuffer","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:7NIOCore15EventLoopFutureC","text":"EventLoopFuture","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"preciseIdentifier":"s:7NIOCore15EventLoopFutureC","text":"EventLoopFuture","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"text":">","kind":"text"}]},"sections":[],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/NonBlockingFileIO"]]},"schemaVersion":{"major":0,"patch":0,"minor":3},"abstract":[{"text":"Read a ","type":"text"},{"type":"codeVoice","code":"FileRegion"},{"text":" in chunks of ","type":"text"},{"type":"codeVoice","code":"chunkSize"},{"text":" bytes on ","type":"text"},{"type":"codeVoice","code":"NonBlockingFileIO"},{"text":"’s private thread","type":"text"},{"text":" ","type":"text"},{"text":"pool which is separate from any ","type":"text"},{"type":"codeVoice","code":"EventLoop"},{"text":" thread.","type":"text"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/nioposix\/nonblockingfileio\/readchunked(fileregion:chunksize:allocator:eventloop:chunkhandler:)"]}],"references":{"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoopFuture":{"type":"topic","url":"\/documentation\/niocore\/eventloopfuture","role":"symbol","navigatorTitle":[{"text":"EventLoopFuture","kind":"identifier"}],"title":"EventLoopFuture","kind":"symbol","abstract":[{"text":"Holder for a result that will be provided later.","type":"text"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EventLoopFuture","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ByteBufferAllocator":{"abstract":[{"text":"The preferred allocator for ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" values. The allocation strategy is opaque but is currently libc’s","type":"text"},{"text":" ","type":"text"},{"code":"malloc","type":"codeVoice"},{"text":", ","type":"text"},{"code":"realloc","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"free","type":"codeVoice"},{"type":"text","text":"."}],"kind":"symbol","title":"ByteBufferAllocator","role":"symbol","url":"\/documentation\/niocore\/bytebufferallocator","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ByteBufferAllocator"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBufferAllocator","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ByteBufferAllocator"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/FileRegion":{"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"FileRegion"}],"kind":"symbol","abstract":[{"text":"A ","type":"text"},{"code":"FileRegion","type":"codeVoice"},{"text":" represent a readable portion usually created to be sent over the network.","type":"text"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/FileRegion","title":"FileRegion","role":"symbol","url":"\/documentation\/niocore\/fileregion","navigatorTitle":[{"kind":"identifier","text":"FileRegion"}]},"doc://co.pointfree.VaporRouting/documentation/NIOPosix/NonBlockingFileIO/readChunked(fileRegion:chunkSize:allocator:eventLoop:chunkHandler:)":{"abstract":[{"type":"text","text":"Read a "},{"type":"codeVoice","code":"FileRegion"},{"type":"text","text":" in chunks of "},{"type":"codeVoice","code":"chunkSize"},{"text":" bytes on ","type":"text"},{"code":"NonBlockingFileIO","type":"codeVoice"},{"text":"’s private thread","type":"text"},{"text":" ","type":"text"},{"text":"pool which is separate from any ","type":"text"},{"code":"EventLoop","type":"codeVoice"},{"text":" thread.","type":"text"}],"role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"readChunked","kind":"identifier"},{"text":"(","kind":"text"},{"text":"fileRegion","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"FileRegion","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore10FileRegionV"},{"text":", ","kind":"text"},{"text":"chunkSize","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":", ","kind":"text"},{"text":"allocator","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"ByteBufferAllocator","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore19ByteBufferAllocatorV"},{"text":", ","kind":"text"},{"text":"eventLoop","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"EventLoop","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore9EventLoopP"},{"text":", ","kind":"text"},{"text":"chunkHandler","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"ByteBuffer","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore10ByteBufferV"},{"text":") -> ","kind":"text"},{"text":"EventLoopFuture","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore15EventLoopFutureC"},{"text":"<","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":">) -> ","kind":"text"},{"text":"EventLoopFuture","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore15EventLoopFutureC"},{"text":"<","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":">","kind":"text"}],"url":"\/documentation\/nioposix\/nonblockingfileio\/readchunked(fileregion:chunksize:allocator:eventloop:chunkhandler:)","title":"readChunked(fileRegion:chunkSize:allocator:eventLoop:chunkHandler:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/NonBlockingFileIO\/readChunked(fileRegion:chunkSize:allocator:eventLoop:chunkHandler:)","type":"topic","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOPosix/NonBlockingFileIO":{"navigatorTitle":[{"text":"NonBlockingFileIO","kind":"identifier"}],"role":"symbol","url":"\/documentation\/nioposix\/nonblockingfileio","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/NonBlockingFileIO","title":"NonBlockingFileIO","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NonBlockingFileIO","kind":"identifier"}],"abstract":[{"type":"codeVoice","code":"NonBlockingFileIO"},{"text":" is a helper that allows you to read files without blocking the calling thread.","type":"text"}],"kind":"symbol","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoop":{"title":"EventLoop","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoop","navigatorTitle":[{"text":"EventLoop","kind":"identifier"}],"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EventLoop","kind":"identifier"}],"url":"\/documentation\/niocore\/eventloop","abstract":[{"text":"An EventLoop processes IO \/ tasks in an endless loop for ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":"s until it’s closed.","type":"text"}],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ByteBuffer":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ByteBuffer"}],"navigatorTitle":[{"kind":"identifier","text":"ByteBuffer"}],"title":"ByteBuffer","type":"topic","abstract":[{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" stores contiguously allocated raw bytes. It is a random and sequential accessible sequence of zero or"},{"type":"text","text":" "},{"type":"text","text":"more bytes (octets)."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBuffer","role":"symbol","url":"\/documentation\/niocore\/bytebuffer","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOPosix":{"abstract":[],"title":"NIOPosix","role":"collection","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix","type":"topic","url":"\/documentation\/nioposix","kind":"symbol"}}}