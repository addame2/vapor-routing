{"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"changeFileSize","kind":"identifier"},{"text":"(","kind":"text"},{"text":"fileHandle","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7NIOCore13NIOFileHandleC","text":"NIOFileHandle","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOFileHandle","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"size","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s5Int64V","text":"Int64","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"eventLoop","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7NIOCore9EventLoopP","text":"EventLoop","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoop","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:7NIOCore15EventLoopFutureC","text":"EventLoopFuture","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture","kind":"typeIdentifier"},{"text":"<()>","kind":"text"}],"languages":["swift"]}]},{"content":[{"type":"heading","level":2,"text":"Return Value","anchor":"return-value"},{"inlineContent":[{"text":"An ","type":"text"},{"type":"codeVoice","code":"EventLoopFuture"},{"text":" which is fulfilled if the write was successful or fails on error.","type":"text"}],"type":"paragraph"}],"kind":"content"},{"kind":"parameters","parameters":[{"name":"fileHandle","content":[{"inlineContent":[{"text":"The ","type":"text"},{"code":"NIOFileHandle","type":"codeVoice"},{"text":" to write to.","type":"text"}],"type":"paragraph"}]},{"name":"size","content":[{"inlineContent":[{"text":"The new file size in bytes to write.","type":"text"}],"type":"paragraph"}]},{"name":"eventLoop","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"EventLoop","type":"codeVoice"},{"type":"text","text":" to create the returned "},{"code":"EventLoopFuture","type":"codeVoice"},{"type":"text","text":" from."}]}]}]},{"content":[{"text":"Discussion","anchor":"discussion","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"If "},{"type":"codeVoice","code":"size"},{"type":"text","text":" is smaller than the current file size, the remaining bytes will be truncated and are lost. If "},{"type":"codeVoice","code":"size"},{"type":"text","text":" "},{"type":"text","text":"is larger than the current file size, the gap will be filled with zero bytes."}],"type":"paragraph"}],"kind":"content"}],"schemaVersion":{"major":0,"patch":0,"minor":3},"abstract":[{"type":"text","text":"Changes the file size of "},{"type":"codeVoice","code":"fileHandle"},{"type":"text","text":" to "},{"type":"codeVoice","code":"size"},{"type":"text","text":"."}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/NonBlockingFileIO"]]},"kind":"symbol","sections":[],"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/NonBlockingFileIO\/changeFileSize(fileHandle:size:eventLoop:)","interfaceLanguage":"swift"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/nioposix\/nonblockingfileio\/changefilesize(filehandle:size:eventloop:)"]}],"metadata":{"role":"symbol","externalID":"s:8NIOPosix17NonBlockingFileIOV06changeD4Size10fileHandle4size9eventLoop7NIOCore05EventL6FutureCyytGAH07NIOFileI0C_s5Int64VAH0nL0_ptF","title":"changeFileSize(fileHandle:size:eventLoop:)","roleHeading":"Instance Method","modules":[{"name":"NIOPosix"}],"symbolKind":"method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"changeFileSize"},{"kind":"text","text":"("},{"kind":"externalParam","text":"fileHandle"},{"kind":"text","text":": "},{"preciseIdentifier":"s:7NIOCore13NIOFileHandleC","kind":"typeIdentifier","text":"NIOFileHandle"},{"kind":"text","text":", "},{"kind":"externalParam","text":"size"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s5Int64V","kind":"typeIdentifier","text":"Int64"},{"kind":"text","text":", "},{"kind":"externalParam","text":"eventLoop"},{"kind":"text","text":": "},{"preciseIdentifier":"s:7NIOCore9EventLoopP","kind":"typeIdentifier","text":"EventLoop"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:7NIOCore15EventLoopFutureC","kind":"typeIdentifier","text":"EventLoopFuture"},{"kind":"text","text":"<()>"}]},"references":{"doc://co.pointfree.VaporRouting/documentation/NIOPosix/NonBlockingFileIO":{"navigatorTitle":[{"text":"NonBlockingFileIO","kind":"identifier"}],"role":"symbol","url":"\/documentation\/nioposix\/nonblockingfileio","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/NonBlockingFileIO","title":"NonBlockingFileIO","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NonBlockingFileIO","kind":"identifier"}],"abstract":[{"type":"codeVoice","code":"NonBlockingFileIO"},{"text":" is a helper that allows you to read files without blocking the calling thread.","type":"text"}],"kind":"symbol","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOFileHandle":{"abstract":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"NIOFileHandle"},{"text":" is a handle to an open file.","type":"text"}],"kind":"symbol","title":"NIOFileHandle","role":"symbol","url":"\/documentation\/niocore\/niofilehandle","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOFileHandle"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOFileHandle","type":"topic","navigatorTitle":[{"kind":"identifier","text":"NIOFileHandle"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoopFuture":{"type":"topic","url":"\/documentation\/niocore\/eventloopfuture","role":"symbol","navigatorTitle":[{"text":"EventLoopFuture","kind":"identifier"}],"title":"EventLoopFuture","kind":"symbol","abstract":[{"text":"Holder for a result that will be provided later.","type":"text"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EventLoopFuture","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOPosix/NonBlockingFileIO/changeFileSize(fileHandle:size:eventLoop:)":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"changeFileSize","kind":"identifier"},{"text":"(","kind":"text"},{"text":"fileHandle","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"NIOFileHandle","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore13NIOFileHandleC"},{"text":", ","kind":"text"},{"text":"size","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int64","kind":"typeIdentifier","preciseIdentifier":"s:s5Int64V"},{"text":", ","kind":"text"},{"text":"eventLoop","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"EventLoop","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore9EventLoopP"},{"text":") -> ","kind":"text"},{"text":"EventLoopFuture","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore15EventLoopFutureC"},{"text":"<()>","kind":"text"}],"abstract":[{"text":"Changes the file size of ","type":"text"},{"code":"fileHandle","type":"codeVoice"},{"text":" to ","type":"text"},{"code":"size","type":"codeVoice"},{"text":".","type":"text"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/NonBlockingFileIO\/changeFileSize(fileHandle:size:eventLoop:)","title":"changeFileSize(fileHandle:size:eventLoop:)","role":"symbol","kind":"symbol","type":"topic","url":"\/documentation\/nioposix\/nonblockingfileio\/changefilesize(filehandle:size:eventloop:)"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoop":{"title":"EventLoop","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoop","navigatorTitle":[{"text":"EventLoop","kind":"identifier"}],"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EventLoop","kind":"identifier"}],"url":"\/documentation\/niocore\/eventloop","abstract":[{"text":"An EventLoop processes IO \/ tasks in an endless loop for ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":"s until itâ€™s closed.","type":"text"}],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOPosix":{"abstract":[],"title":"NIOPosix","role":"collection","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix","type":"topic","url":"\/documentation\/nioposix","kind":"symbol"}}}