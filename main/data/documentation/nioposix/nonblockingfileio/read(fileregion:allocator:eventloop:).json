{"sections":[],"kind":"symbol","identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/NonBlockingFileIO\/read(fileRegion:allocator:eventLoop:)","interfaceLanguage":"swift"},"variants":[{"paths":["\/documentation\/nioposix\/nonblockingfileio\/read(fileregion:allocator:eventloop:)"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"abstract":[{"text":"Read a ","type":"text"},{"type":"codeVoice","code":"FileRegion"},{"text":" in ","type":"text"},{"type":"codeVoice","code":"NonBlockingFileIO"},{"text":"’s private thread pool which is separate from any ","type":"text"},{"type":"codeVoice","code":"EventLoop"},{"text":" thread.","type":"text"}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/NonBlockingFileIO"]]},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"read","kind":"identifier"},{"text":"(","kind":"text"},{"text":"fileRegion","kind":"externalParam"},{"text":": ","kind":"text"},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/FileRegion","text":"FileRegion","preciseIdentifier":"s:7NIOCore10FileRegionV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"allocator","kind":"externalParam"},{"text":": ","kind":"text"},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBufferAllocator","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore19ByteBufferAllocatorV","text":"ByteBufferAllocator"},{"kind":"text","text":", "},{"kind":"externalParam","text":"eventLoop"},{"kind":"text","text":": "},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoop","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore9EventLoopP","text":"EventLoop"},{"kind":"text","text":") -> "},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","text":"EventLoopFuture"},{"kind":"text","text":"<"},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBuffer","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore10ByteBufferV","text":"ByteBuffer"},{"kind":"text","text":">"}],"languages":["swift"],"platforms":["Linux"]}]},{"kind":"content","content":[{"type":"heading","text":"Return Value","level":2,"anchor":"return-value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"An "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":" which delivers a "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" if the read was successful or a failure on error."}]}]},{"kind":"parameters","parameters":[{"name":"fileRegion","content":[{"inlineContent":[{"text":"The file region to read.","type":"text"}],"type":"paragraph"}]},{"name":"allocator","content":[{"inlineContent":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"ByteBufferAllocator"},{"text":" used to allocate space for the returned ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":".","type":"text"}],"type":"paragraph"}]},{"name":"eventLoop","content":[{"inlineContent":[{"type":"text","text":"The "},{"code":"EventLoop","type":"codeVoice"},{"type":"text","text":" to create the returned "},{"code":"EventLoopFuture","type":"codeVoice"},{"type":"text","text":" from."}],"type":"paragraph"}]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"text":"The returned ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":" will not have less than ","type":"text"},{"type":"codeVoice","code":"fileRegion.readableBytes"},{"text":" unless we hit end-of-file in which","type":"text"},{"text":" ","type":"text"},{"text":"case the ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":" will contain the bytes available to read.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"This method will not use the file descriptor’s seek pointer which means there is no danger of reading from the","type":"text"},{"text":" ","type":"text"},{"text":"same ","type":"text"},{"code":"FileRegion","type":"codeVoice"},{"text":" in multiple threads.","type":"text"}]},{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Only use this function for small enough "},{"type":"codeVoice","code":"FileRegion"},{"type":"text","text":"s as it will need to allocate enough memory to hold "},{"type":"codeVoice","code":"fileRegion.readableBytes"},{"type":"text","text":" bytes."}]}],"style":"note"},{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"In most cases you should prefer one of the ","type":"text"},{"code":"readChunked","type":"codeVoice"},{"text":" functions.","type":"text"}]}],"style":"note"}]}],"metadata":{"modules":[{"name":"NIOPosix"}],"title":"read(fileRegion:allocator:eventLoop:)","externalID":"s:8NIOPosix17NonBlockingFileIOV4read10fileRegion9allocator9eventLoop7NIOCore05EventK6FutureCyAH10ByteBufferVGAH0dH0V_AH0oP9AllocatorVAH0mK0_ptF","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"read","kind":"identifier"},{"text":"(","kind":"text"},{"text":"fileRegion","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"FileRegion","preciseIdentifier":"s:7NIOCore10FileRegionV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"allocator","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"ByteBufferAllocator","preciseIdentifier":"s:7NIOCore19ByteBufferAllocatorV","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"eventLoop"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"EventLoop","preciseIdentifier":"s:7NIOCore9EventLoopP"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ByteBuffer","preciseIdentifier":"s:7NIOCore10ByteBufferV"},{"kind":"text","text":">"}],"symbolKind":"method","role":"symbol","roleHeading":"Instance Method"},"references":{"doc://co.pointfree.VaporRouting/documentation/NIOCore/FileRegion":{"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"FileRegion"}],"kind":"symbol","abstract":[{"text":"A ","type":"text"},{"code":"FileRegion","type":"codeVoice"},{"text":" represent a readable portion usually created to be sent over the network.","type":"text"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/FileRegion","title":"FileRegion","role":"symbol","url":"\/documentation\/niocore\/fileregion","navigatorTitle":[{"kind":"identifier","text":"FileRegion"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoopFuture":{"type":"topic","url":"\/documentation\/niocore\/eventloopfuture","role":"symbol","navigatorTitle":[{"text":"EventLoopFuture","kind":"identifier"}],"title":"EventLoopFuture","kind":"symbol","abstract":[{"text":"Holder for a result that will be provided later.","type":"text"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EventLoopFuture","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOPosix":{"abstract":[],"title":"NIOPosix","role":"collection","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix","type":"topic","url":"\/documentation\/nioposix","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOPosix/NonBlockingFileIO/read(fileRegion:allocator:eventLoop:)":{"type":"topic","title":"read(fileRegion:allocator:eventLoop:)","url":"\/documentation\/nioposix\/nonblockingfileio\/read(fileregion:allocator:eventloop:)","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/NonBlockingFileIO\/read(fileRegion:allocator:eventLoop:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"read"},{"kind":"text","text":"("},{"kind":"externalParam","text":"fileRegion"},{"kind":"text","text":": "},{"preciseIdentifier":"s:7NIOCore10FileRegionV","kind":"typeIdentifier","text":"FileRegion"},{"kind":"text","text":", "},{"kind":"externalParam","text":"allocator"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ByteBufferAllocator","preciseIdentifier":"s:7NIOCore19ByteBufferAllocatorV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"eventLoop"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"EventLoop","preciseIdentifier":"s:7NIOCore9EventLoopP"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ByteBuffer","preciseIdentifier":"s:7NIOCore10ByteBufferV"},{"kind":"text","text":">"}],"abstract":[{"text":"Read a ","type":"text"},{"type":"codeVoice","code":"FileRegion"},{"text":" in ","type":"text"},{"type":"codeVoice","code":"NonBlockingFileIO"},{"type":"text","text":"’s private thread pool which is separate from any "},{"type":"codeVoice","code":"EventLoop"},{"type":"text","text":" thread."}],"role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOPosix/NonBlockingFileIO":{"navigatorTitle":[{"text":"NonBlockingFileIO","kind":"identifier"}],"role":"symbol","url":"\/documentation\/nioposix\/nonblockingfileio","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/NonBlockingFileIO","title":"NonBlockingFileIO","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NonBlockingFileIO","kind":"identifier"}],"abstract":[{"type":"codeVoice","code":"NonBlockingFileIO"},{"text":" is a helper that allows you to read files without blocking the calling thread.","type":"text"}],"kind":"symbol","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ByteBuffer":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ByteBuffer"}],"navigatorTitle":[{"kind":"identifier","text":"ByteBuffer"}],"title":"ByteBuffer","type":"topic","abstract":[{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" stores contiguously allocated raw bytes. It is a random and sequential accessible sequence of zero or"},{"type":"text","text":" "},{"type":"text","text":"more bytes (octets)."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBuffer","role":"symbol","url":"\/documentation\/niocore\/bytebuffer","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoop":{"title":"EventLoop","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoop","navigatorTitle":[{"text":"EventLoop","kind":"identifier"}],"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EventLoop","kind":"identifier"}],"url":"\/documentation\/niocore\/eventloop","abstract":[{"text":"An EventLoop processes IO \/ tasks in an endless loop for ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":"s until it’s closed.","type":"text"}],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ByteBufferAllocator":{"abstract":[{"text":"The preferred allocator for ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" values. The allocation strategy is opaque but is currently libc’s","type":"text"},{"text":" ","type":"text"},{"code":"malloc","type":"codeVoice"},{"text":", ","type":"text"},{"code":"realloc","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"free","type":"codeVoice"},{"type":"text","text":"."}],"kind":"symbol","title":"ByteBufferAllocator","role":"symbol","url":"\/documentation\/niocore\/bytebufferallocator","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ByteBufferAllocator"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBufferAllocator","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ByteBufferAllocator"}]}}}