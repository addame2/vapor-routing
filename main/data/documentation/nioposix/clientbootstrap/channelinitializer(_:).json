{"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap"]]},"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap\/channelInitializer(_:)","interfaceLanguage":"swift"},"sections":[],"schemaVersion":{"major":0,"patch":0,"minor":3},"abstract":[{"text":"Initialize the connected ","type":"text"},{"code":"SocketChannel","type":"codeVoice"},{"text":" with ","type":"text"},{"code":"initializer","type":"codeVoice"},{"text":". The most common task in initializer is to add","type":"text"},{"text":" ","type":"text"},{"code":"ChannelHandler","type":"codeVoice"},{"text":"s to the ","type":"text"},{"code":"ChannelPipeline","type":"codeVoice"},{"text":".","type":"text"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"channelInitializer"},{"kind":"text","text":"("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"handler"},{"kind":"text","text":": "},{"kind":"keyword","text":"@escaping"},{"kind":"text","text":" ("},{"preciseIdentifier":"s:7NIOCore7ChannelP","kind":"typeIdentifier","text":"Channel","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/Channel"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:7NIOCore15EventLoopFutureC","kind":"typeIdentifier","text":"EventLoopFuture","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture"},{"kind":"text","text":"<"},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"Self"}],"languages":["swift"],"platforms":["Linux"]}]},{"parameters":[{"name":"handler","content":[{"type":"paragraph","inlineContent":[{"text":"A closure that initializes the provided ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":".","type":"text"}]}]}],"kind":"parameters"},{"content":[{"level":2,"text":"Discussion","type":"heading","anchor":"discussion"},{"inlineContent":[{"type":"text","text":"The connected "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":" will operate on "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" as inbound and "},{"type":"codeVoice","code":"IOData"},{"type":"text","text":" as outbound messages."}],"type":"paragraph"},{"content":[{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"handler"},{"type":"text","text":" closure may be invoked "},{"inlineContent":[{"text":"multiple times","type":"text"}],"type":"emphasis"},{"type":"text","text":" so it’s usually the right choice to instantiate"},{"type":"text","text":" "},{"type":"codeVoice","code":"ChannelHandler"},{"type":"text","text":"s within "},{"type":"codeVoice","code":"handler"},{"type":"text","text":". The reason "},{"type":"codeVoice","code":"handler"},{"type":"text","text":" may be invoked multiple times is that to"},{"type":"text","text":" "},{"type":"text","text":"successfully set up a connection multiple connections might be setup in the process. Assuming a"},{"type":"text","text":" "},{"type":"text","text":"hostname that resolves to both IPv4 and IPv6 addresses, NIO will follow"},{"type":"text","text":" "},{"identifier":"https:\/\/en.wikipedia.org\/wiki\/Happy_Eyeballs","type":"reference","isActive":true},{"type":"text","text":" and race both an IPv4 and an IPv6"},{"type":"text","text":" "},{"type":"text","text":"connection. It is possible that both connections get fully established before the IPv4 connection"},{"type":"text","text":" "},{"type":"text","text":"will be closed again because the IPv6 connection ‘won the race’. Therefore the "},{"type":"codeVoice","code":"channelInitializer"},{"type":"text","text":" "},{"type":"text","text":"might be called multiple times and it’s important not to share stateful "},{"type":"codeVoice","code":"ChannelHandler"},{"type":"text","text":"s in more"},{"type":"text","text":" "},{"type":"text","text":"than one "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":"."}],"type":"paragraph"}],"style":"warning","type":"aside"}],"kind":"content"}],"kind":"symbol","metadata":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"channelInitializer","kind":"identifier"},{"text":"((","kind":"text"},{"text":"Channel","preciseIdentifier":"s:7NIOCore7ChannelP","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Void","preciseIdentifier":"s:s4Voida","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"modules":[{"name":"NIOPosix"}],"role":"symbol","roleHeading":"Instance Method","symbolKind":"method","title":"channelInitializer(_:)","externalID":"s:8NIOPosix15ClientBootstrapC18channelInitializeryACXD7NIOCore15EventLoopFutureCyytGAE7Channel_pcF"},"variants":[{"paths":["\/documentation\/nioposix\/clientbootstrap\/channelinitializer(_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://co.pointfree.VaporRouting/documentation/NIOCore/Channel":{"kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Channel"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/Channel","url":"\/documentation\/niocore\/channel","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Channel"}],"role":"symbol","title":"Channel","abstract":[{"text":"A ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":" is easiest thought of as a network socket. But it can be anything that is capable of I\/O operations such","type":"text"},{"text":" ","type":"text"},{"text":"as read, write, connect, and bind.","type":"text"}]},"doc://co.pointfree.VaporRouting/documentation/NIOPosix/ClientBootstrap":{"url":"\/documentation\/nioposix\/clientbootstrap","navigatorTitle":[{"kind":"identifier","text":"ClientBootstrap"}],"type":"topic","kind":"symbol","abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"ClientBootstrap"},{"type":"text","text":" is an easy way to bootstrap a "},{"type":"codeVoice","code":"SocketChannel"},{"type":"text","text":" when creating network clients."}],"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ClientBootstrap"}],"title":"ClientBootstrap"},"doc://co.pointfree.VaporRouting/documentation/NIOPosix/ClientBootstrap/channelInitializer(_:)":{"url":"\/documentation\/nioposix\/clientbootstrap\/channelinitializer(_:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap\/channelInitializer(_:)","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"channelInitializer"},{"kind":"text","text":"(("},{"preciseIdentifier":"s:7NIOCore7ChannelP","kind":"typeIdentifier","text":"Channel"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:7NIOCore15EventLoopFutureC","kind":"typeIdentifier","text":"EventLoopFuture"},{"kind":"text","text":"<"},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"Self"}],"role":"symbol","type":"topic","title":"channelInitializer(_:)","abstract":[{"type":"text","text":"Initialize the connected "},{"type":"codeVoice","code":"SocketChannel"},{"type":"text","text":" with "},{"type":"codeVoice","code":"initializer"},{"type":"text","text":". The most common task in initializer is to add"},{"type":"text","text":" "},{"type":"codeVoice","code":"ChannelHandler"},{"type":"text","text":"s to the "},{"code":"ChannelPipeline","type":"codeVoice"},{"type":"text","text":"."}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoopFuture":{"type":"topic","url":"\/documentation\/niocore\/eventloopfuture","role":"symbol","navigatorTitle":[{"text":"EventLoopFuture","kind":"identifier"}],"title":"EventLoopFuture","kind":"symbol","abstract":[{"text":"Holder for a result that will be provided later.","type":"text"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EventLoopFuture","kind":"identifier"}]},"https://en.wikipedia.org/wiki/Happy_Eyeballs":{"url":"https:\/\/en.wikipedia.org\/wiki\/Happy_Eyeballs","titleInlineContent":[{"inlineContent":[{"type":"text","text":"Happy Eyeballs"}],"type":"emphasis"}],"title":"Happy Eyeballs","identifier":"https:\/\/en.wikipedia.org\/wiki\/Happy_Eyeballs","type":"link"},"doc://co.pointfree.VaporRouting/documentation/NIOPosix":{"abstract":[],"title":"NIOPosix","role":"collection","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix","type":"topic","url":"\/documentation\/nioposix","kind":"symbol"}}}