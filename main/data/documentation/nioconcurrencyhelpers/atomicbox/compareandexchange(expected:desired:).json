{"sections":[],"primaryContentSections":[{"declarations":[{"platforms":["Linux"],"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"compareAndExchange","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"expected"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":", "},{"kind":"externalParam","text":"desired"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"}]}],"kind":"declarations"},{"content":[{"level":2,"text":"Return Value","type":"heading","anchor":"return-value"},{"type":"paragraph","inlineContent":[{"type":"text","text":""},{"type":"codeVoice","code":"True"},{"type":"text","text":" if the exchange occurred, or "},{"type":"codeVoice","code":"False"},{"type":"text","text":" if "},{"type":"codeVoice","code":"expected"},{"type":"text","text":" did not"},{"type":"text","text":" "},{"type":"text","text":"match the current value and so no exchange occurred."}]}],"kind":"content"},{"kind":"parameters","parameters":[{"content":[{"inlineContent":[{"text":"The value that this object must currently hold for the","type":"text"},{"text":" ","type":"text"},{"text":"compare-and-swap to succeed.","type":"text"}],"type":"paragraph"}],"name":"expected"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The new value that this object will hold if the compare"},{"type":"text","text":" "},{"type":"text","text":"succeeds."}]}],"name":"desired"}]},{"content":[{"type":"heading","anchor":"discussion","text":"Discussion","level":2},{"inlineContent":[{"type":"text","text":"This implementation conforms to C11’s "},{"type":"codeVoice","code":"atomic_compare_exchange_strong"},{"type":"text","text":". This"},{"type":"text","text":" "},{"type":"text","text":"means that the compare-and-swap will always succeed if "},{"type":"codeVoice","code":"expected"},{"type":"text","text":" is equal to"},{"type":"text","text":" "},{"type":"text","text":"value. Additionally, it uses a "},{"inlineContent":[{"text":"sequentially consistent ordering","type":"text"}],"type":"emphasis"},{"type":"text","text":". For more"},{"type":"text","text":" "},{"type":"text","text":"details on atomic memory models, check the documentation for C11’s"},{"type":"text","text":" "},{"type":"codeVoice","code":"stdatomic.h"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"aside","content":[{"inlineContent":[{"text":"The implementation of ","type":"text"},{"type":"codeVoice","code":"exchange"},{"text":" contains a ","type":"text"},{"inlineContent":[{"text":"Compare and Exchange loop","type":"text"}],"type":"emphasis"},{"text":", ie. it may busy wait with","type":"text"},{"text":" ","type":"text"},{"text":"100% CPU load.","type":"text"}],"type":"paragraph"}],"style":"warning"}],"kind":"content"}],"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOConcurrencyHelpers\/AtomicBox\/compareAndExchange(expected:desired:)","interfaceLanguage":"swift"},"schemaVersion":{"minor":3,"patch":0,"major":0},"metadata":{"externalID":"s:21NIOConcurrencyHelpers9AtomicBoxC18compareAndExchange8expected7desiredSbx_xtF","symbolKind":"method","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"compareAndExchange"},{"kind":"text","text":"("},{"kind":"externalParam","text":"expected"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":", "},{"kind":"externalParam","text":"desired"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"}],"platforms":[],"title":"compareAndExchange(expected:desired:)","roleHeading":"Instance Method","modules":[{"name":"NIOConcurrencyHelpers"}]},"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOConcurrencyHelpers","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOConcurrencyHelpers\/AtomicBox"]]},"deprecationSummary":[{"type":"paragraph","inlineContent":[{"text":"AtomicBox is deprecated without replacement because the original implementation doesn't work.","type":"text"}]}],"kind":"symbol","abstract":[{"type":"text","text":"Atomically compares the value against "},{"type":"codeVoice","code":"expected"},{"type":"text","text":" and, if they are equal,"},{"type":"text","text":" "},{"type":"text","text":"replaces the value with "},{"type":"codeVoice","code":"desired"},{"type":"text","text":"."}],"variants":[{"paths":["\/documentation\/nioconcurrencyhelpers\/atomicbox\/compareandexchange(expected:desired:)"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://co.pointfree.VaporRouting/documentation/NIOConcurrencyHelpers/AtomicBox":{"url":"\/documentation\/nioconcurrencyhelpers\/atomicbox","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOConcurrencyHelpers\/AtomicBox","abstract":[{"code":"AtomicBox","type":"codeVoice"},{"type":"text","text":" is a heap-allocated box which allows lock-free access to an instance of a Swift class."}],"title":"AtomicBox","kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"AtomicBox","kind":"identifier"}],"role":"symbol","deprecated":true,"type":"topic","navigatorTitle":[{"text":"AtomicBox","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOConcurrencyHelpers":{"kind":"symbol","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOConcurrencyHelpers","role":"collection","abstract":[],"url":"\/documentation\/nioconcurrencyhelpers","title":"NIOConcurrencyHelpers"},"doc://co.pointfree.VaporRouting/documentation/NIOConcurrencyHelpers/AtomicBox/compareAndExchange(expected:desired:)":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOConcurrencyHelpers\/AtomicBox\/compareAndExchange(expected:desired:)","title":"compareAndExchange(expected:desired:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"compareAndExchange"},{"kind":"text","text":"("},{"kind":"externalParam","text":"expected"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":", "},{"kind":"externalParam","text":"desired"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"}],"deprecated":true,"role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"Atomically compares the value against "},{"type":"codeVoice","code":"expected"},{"type":"text","text":" and, if they are equal,"},{"type":"text","text":" "},{"type":"text","text":"replaces the value with "},{"type":"codeVoice","code":"desired"},{"type":"text","text":"."}],"type":"topic","url":"\/documentation\/nioconcurrencyhelpers\/atomicbox\/compareandexchange(expected:desired:)"}}}