{"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOConcurrencyHelpers","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOConcurrencyHelpers\/UnsafeEmbeddedAtomic"]]},"schemaVersion":{"minor":3,"patch":0,"major":0},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"compareAndExchange"},{"kind":"text","text":"("},{"kind":"externalParam","text":"expected"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":", "},{"kind":"externalParam","text":"desired"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"}],"platforms":["Linux"]}]},{"kind":"content","content":[{"anchor":"return-value","text":"Return Value","level":2,"type":"heading"},{"inlineContent":[{"text":"","type":"text"},{"code":"True","type":"codeVoice"},{"text":" if the exchange occurred, or ","type":"text"},{"code":"False","type":"codeVoice"},{"text":" if ","type":"text"},{"code":"expected","type":"codeVoice"},{"text":" did not","type":"text"},{"text":" ","type":"text"},{"text":"match the current value and so no exchange occurred.","type":"text"}],"type":"paragraph"}]},{"kind":"parameters","parameters":[{"name":"expected","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The value that this object must currently hold for the"},{"type":"text","text":" "},{"type":"text","text":"compare-and-swap to succeed."}]}]},{"name":"desired","content":[{"inlineContent":[{"text":"The new value that this object will hold if the compare","type":"text"},{"text":" ","type":"text"},{"text":"succeeds.","type":"text"}],"type":"paragraph"}]}]},{"kind":"content","content":[{"text":"Discussion","level":2,"anchor":"discussion","type":"heading"},{"inlineContent":[{"type":"text","text":"This implementation conforms to C11’s "},{"type":"codeVoice","code":"atomic_compare_exchange_strong"},{"type":"text","text":". This"},{"type":"text","text":" "},{"type":"text","text":"means that the compare-and-swap will always succeed if "},{"type":"codeVoice","code":"expected"},{"type":"text","text":" is equal to"},{"type":"text","text":" "},{"type":"text","text":"value. Additionally, it uses a "},{"type":"emphasis","inlineContent":[{"text":"sequentially consistent ordering","type":"text"}]},{"type":"text","text":". For more"},{"type":"text","text":" "},{"type":"text","text":"details on atomic memory models, check the documentation for C11’s"},{"type":"text","text":" "},{"type":"codeVoice","code":"stdatomic.h"},{"type":"text","text":"."}],"type":"paragraph"}]}],"metadata":{"modules":[{"name":"NIOConcurrencyHelpers"}],"externalID":"s:21NIOConcurrencyHelpers20UnsafeEmbeddedAtomicV18compareAndExchange8expected7desiredSbx_xtF","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"compareAndExchange"},{"kind":"text","text":"("},{"kind":"externalParam","text":"expected"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":", "},{"kind":"externalParam","text":"desired"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"}],"title":"compareAndExchange(expected:desired:)","symbolKind":"method","roleHeading":"Instance Method","role":"symbol"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/nioconcurrencyhelpers\/unsafeembeddedatomic\/compareandexchange(expected:desired:)"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOConcurrencyHelpers\/UnsafeEmbeddedAtomic\/compareAndExchange(expected:desired:)"},"abstract":[{"type":"text","text":"Atomically compares the value against "},{"code":"expected","type":"codeVoice"},{"type":"text","text":" and, if they are equal,"},{"type":"text","text":" "},{"type":"text","text":"replaces the value with "},{"code":"desired","type":"codeVoice"},{"type":"text","text":"."}],"kind":"symbol","sections":[],"references":{"doc://co.pointfree.VaporRouting/documentation/NIOConcurrencyHelpers":{"kind":"symbol","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOConcurrencyHelpers","role":"collection","abstract":[],"url":"\/documentation\/nioconcurrencyhelpers","title":"NIOConcurrencyHelpers"},"doc://co.pointfree.VaporRouting/documentation/NIOConcurrencyHelpers/UnsafeEmbeddedAtomic":{"abstract":[{"text":"An atomic primitive object.","type":"text"}],"url":"\/documentation\/nioconcurrencyhelpers\/unsafeembeddedatomic","title":"UnsafeEmbeddedAtomic","type":"topic","navigatorTitle":[{"text":"UnsafeEmbeddedAtomic","kind":"identifier"}],"kind":"symbol","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"UnsafeEmbeddedAtomic","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOConcurrencyHelpers\/UnsafeEmbeddedAtomic"},"doc://co.pointfree.VaporRouting/documentation/NIOConcurrencyHelpers/UnsafeEmbeddedAtomic/compareAndExchange(expected:desired:)":{"role":"symbol","title":"compareAndExchange(expected:desired:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"compareAndExchange","kind":"identifier"},{"text":"(","kind":"text"},{"text":"expected","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"desired","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}],"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOConcurrencyHelpers\/UnsafeEmbeddedAtomic\/compareAndExchange(expected:desired:)","abstract":[{"type":"text","text":"Atomically compares the value against "},{"code":"expected","type":"codeVoice"},{"text":" and, if they are equal,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"replaces the value with "},{"type":"codeVoice","code":"desired"},{"type":"text","text":"."}],"url":"\/documentation\/nioconcurrencyhelpers\/unsafeembeddedatomic\/compareandexchange(expected:desired:)","kind":"symbol"}}}