{"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore"]]},"topicSections":[{"title":"Associated Types","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelOutboundHandler\/OutboundIn"]},{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelOutboundHandler\/unwrapOutboundIn(_:)-7u2n"],"title":"Instance Methods"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"languages":["swift"],"tokens":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ChannelOutboundHandler","kind":"identifier"},{"text":" : ","kind":"text"},{"text":"_ChannelOutboundHandler","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"_EmittingChannelHandler","kind":"typeIdentifier"}]}]},{"kind":"content","content":[{"text":"Overview","level":2,"type":"heading","anchor":"overview"},{"type":"paragraph","inlineContent":[{"text":"Please refer to ","type":"text"},{"code":"_ChannelOutboundHandler","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"_EmittingChannelHandler","type":"codeVoice"},{"text":" for more details on the provided methods.","type":"text"}]}]}],"abstract":[{"code":"ChannelHandler","type":"codeVoice"},{"text":" which handles outbound I\/O events or intercept an outbound I\/O operation for a ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":".","type":"text"}],"relationshipsSections":[{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelHandler"],"kind":"relationships","type":"inheritsFrom","title":"Inherits From"},{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/AcceptBackoffHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/BackPressureHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteToMessageHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOExtras\/DebugOutboundEventsHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP2\/HTTP2FramePayloadToHTTP1ClientCodec","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP2\/HTTP2FramePayloadToHTTP1ServerCodec","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP2\/HTTP2StreamMultiplexer","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP2\/HTTP2ToHTTP1ClientCodec","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP2\/HTTP2ToHTTP1ServerCodec","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1\/HTTPRequestEncoder","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTPCompression\/HTTPResponseCompressor","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1\/HTTPResponseEncoder","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1\/HTTPServerPipelineHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1\/HTTPServerProtocolErrorHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/IdleStateHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOExtras\/LengthFieldPrepender","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/MessageToByteHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOTransportServices\/NIOFilterEmptyWritesHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP2\/NIOHTTP2Handler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1\/NIOHTTPClientUpgradeHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTPCompression\/NIOHTTPRequestCompressor","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTPCompression\/NIOHTTPRequestDecompressor","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTPCompression\/NIOHTTPResponseDecompressor","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOExtras\/NIOJSONRPCFraming\/ContentLengthHeaderFrameEncoder","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSSL\/NIOSSLClientHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSSL\/NIOSSLHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSSL\/NIOSSLServerHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOExtras\/NIOWritePCAPHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOExtras\/RequestResponseHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS\/SOCKSClientHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS\/SOCKSServerHandshakeHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOWebSocket\/WebSocketFrameEncoder"],"kind":"relationships","type":"conformingTypes","title":"Conforming Types"}],"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelOutboundHandler","interfaceLanguage":"swift"},"sections":[],"schemaVersion":{"major":0,"minor":3,"patch":0},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/niocore\/channeloutboundhandler"]}],"metadata":{"title":"ChannelOutboundHandler","modules":[{"name":"NIOCore"}],"roleHeading":"Protocol","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ChannelOutboundHandler","kind":"identifier"}],"symbolKind":"protocol","externalID":"s:7NIOCore22ChannelOutboundHandlerP","navigatorTitle":[{"text":"ChannelOutboundHandler","kind":"identifier"}]},"kind":"symbol","references":{"doc://co.pointfree.VaporRouting/documentation/NIOExtras/RequestResponseHandler":{"navigatorTitle":[{"kind":"identifier","text":"RequestResponseHandler"}],"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOExtras\/RequestResponseHandler","role":"symbol","title":"RequestResponseHandler","kind":"symbol","abstract":[{"type":"codeVoice","code":"RequestResponseHandler"},{"type":"text","text":" receives a "},{"type":"codeVoice","code":"Request"},{"type":"text","text":" alongside an "},{"type":"codeVoice","code":"EventLoopPromise<Response>"},{"type":"text","text":" from the "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":"‘s"},{"type":"text","text":" "},{"type":"text","text":"outbound side. It will fulfill the promise with the "},{"type":"codeVoice","code":"Response"},{"type":"text","text":" once it’s received from the "},{"code":"Channel","type":"codeVoice"},{"type":"text","text":"’s inbound"},{"type":"text","text":" "},{"type":"text","text":"side."}],"url":"\/documentation\/nioextras\/requestresponsehandler","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"RequestResponseHandler"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ByteToMessageHandler":{"role":"symbol","type":"topic","abstract":[{"text":"A handler which turns a given ","type":"text"},{"code":"ByteToMessageDecoder","type":"codeVoice"},{"type":"text","text":" into a "},{"code":"ChannelInboundHandler","type":"codeVoice"},{"type":"text","text":" that can then be added to a"},{"type":"text","text":" "},{"code":"ChannelPipeline","type":"codeVoice"},{"type":"text","text":"."}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ByteToMessageHandler"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteToMessageHandler","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Decoder","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"WriteObservingByteToMessageDecoder","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"navigatorTitle":[{"kind":"identifier","text":"ByteToMessageHandler"}],"title":"ByteToMessageHandler","url":"\/documentation\/niocore\/bytetomessagehandler","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOExtras/DebugOutboundEventsHandler":{"abstract":[{"type":"text","text":"ChannelOutboundHandler that prints all outbound events that pass through the pipeline by default,"},{"text":" ","type":"text"},{"text":"overridable by providing your own closure for custom logging. See DebugInboundEventsHandler for inbound events.","type":"text"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOExtras\/DebugOutboundEventsHandler","type":"topic","navigatorTitle":[{"kind":"identifier","text":"DebugOutboundEventsHandler"}],"role":"symbol","title":"DebugOutboundEventsHandler","url":"\/documentation\/nioextras\/debugoutboundeventshandler","kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"DebugOutboundEventsHandler"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore":{"title":"NIOCore","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","abstract":[],"url":"\/documentation\/niocore","type":"topic","kind":"symbol","role":"collection"},"doc://co.pointfree.VaporRouting/documentation/NIOHTTP2/HTTP2StreamMultiplexer":{"navigatorTitle":[{"kind":"identifier","text":"HTTP2StreamMultiplexer"}],"role":"symbol","type":"topic","abstract":[{"type":"text","text":"A channel handler that creates a child channel for each HTTP\/2 stream."}],"title":"HTTP2StreamMultiplexer","kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HTTP2StreamMultiplexer"}],"url":"\/documentation\/niohttp2\/http2streammultiplexer","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP2\/HTTP2StreamMultiplexer"},"https://en.wikipedia.org/wiki/Pcap":{"type":"link","identifier":"https:\/\/en.wikipedia.org\/wiki\/Pcap","title":".pcap file","titleInlineContent":[{"code":".pcap","type":"codeVoice"},{"text":" file","type":"text"}],"url":"https:\/\/en.wikipedia.org\/wiki\/Pcap"},"doc://co.pointfree.VaporRouting/documentation/NIOExtras/LengthFieldPrepender":{"navigatorTitle":[{"kind":"identifier","text":"LengthFieldPrepender"}],"title":"LengthFieldPrepender","type":"topic","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"LengthFieldPrepender"}],"kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOExtras\/LengthFieldPrepender","abstract":[{"type":"text","text":"An encoder that takes a "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" message and prepends the number of bytes in the message."},{"type":"text","text":" "},{"type":"text","text":"The length field is always the same fixed length specified on construction."},{"type":"text","text":" "},{"type":"text","text":"These bytes contain a binary specification of the message size."}],"role":"symbol","url":"\/documentation\/nioextras\/lengthfieldprepender"},"doc://co.pointfree.VaporRouting/documentation/NIOHTTP2/HTTP2ToHTTP1ClientCodec":{"role":"symbol","url":"\/documentation\/niohttp2\/http2tohttp1clientcodec","deprecated":true,"navigatorTitle":[{"kind":"identifier","text":"HTTP2ToHTTP1ClientCodec"}],"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP2\/HTTP2ToHTTP1ClientCodec","title":"HTTP2ToHTTP1ClientCodec","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HTTP2ToHTTP1ClientCodec"}],"kind":"symbol","abstract":[{"type":"text","text":"A simple channel handler that translates HTTP\/2 concepts into HTTP\/1 data types,"},{"type":"text","text":" "},{"type":"text","text":"and vice versa, for use on the client side."}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/BackPressureHandler":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/BackPressureHandler","navigatorTitle":[{"text":"BackPressureHandler","kind":"identifier"}],"url":"\/documentation\/niocore\/backpressurehandler","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BackPressureHandler","kind":"identifier"}],"role":"symbol","type":"topic","title":"BackPressureHandler","abstract":[{"type":"text","text":"ChannelHandler implementation which enforces back-pressure by stopping to read from the remote peer when it cannot write back fast enough."},{"type":"text","text":" "},{"type":"text","text":"It will start reading again once pending data was written."}],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOSSL/NIOSSLServerHandler":{"navigatorTitle":[{"text":"NIOSSLServerHandler","kind":"identifier"}],"abstract":[{"text":"A channel handler that wraps a channel in TLS using NIOSSL. This","type":"text"},{"text":" ","type":"text"},{"text":"handler can be used in channels that are acting as the server in","type":"text"},{"text":" ","type":"text"},{"text":"the TLS dialog. For client connections, use the ","type":"text"},{"code":"NIOSSLClientHandler","type":"codeVoice"},{"text":".","type":"text"}],"title":"NIOSSLServerHandler","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"NIOSSLServerHandler","kind":"identifier"}],"kind":"symbol","role":"symbol","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSSL\/NIOSSLServerHandler","url":"\/documentation\/niossl\/niosslserverhandler"},"doc://co.pointfree.VaporRouting/documentation/NIOHTTPCompression/NIOHTTPResponseDecompressor":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTPCompression\/NIOHTTPResponseDecompressor","navigatorTitle":[{"text":"NIOHTTPResponseDecompressor","kind":"identifier"}],"url":"\/documentation\/niohttpcompression\/niohttpresponsedecompressor","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOHTTPResponseDecompressor","kind":"identifier"}],"role":"symbol","type":"topic","title":"NIOHTTPResponseDecompressor","abstract":[],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOHTTP1/HTTPRequestEncoder":{"navigatorTitle":[{"kind":"identifier","text":"HTTPRequestEncoder"}],"abstract":[{"type":"text","text":"A "},{"code":"ChannelOutboundHandler","type":"codeVoice"},{"type":"text","text":" that can serialize HTTP requests."}],"title":"HTTPRequestEncoder","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HTTPRequestEncoder"}],"kind":"symbol","role":"symbol","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1\/HTTPRequestEncoder","url":"\/documentation\/niohttp1\/httprequestencoder"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/MessageToByteHandler":{"kind":"symbol","type":"topic","role":"symbol","url":"\/documentation\/niocore\/messagetobytehandler","navigatorTitle":[{"kind":"identifier","text":"MessageToByteHandler"}],"abstract":[{"type":"text","text":"A handler which turns a given "},{"type":"codeVoice","code":"MessageToByteEncoder"},{"type":"text","text":" into a "},{"type":"codeVoice","code":"ChannelOutboundHandler"},{"type":"text","text":" that can then be added to a"},{"type":"text","text":" "},{"type":"codeVoice","code":"ChannelPipeline"},{"type":"text","text":"."}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"MessageToByteHandler"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/MessageToByteHandler","title":"MessageToByteHandler"},"doc://co.pointfree.VaporRouting/documentation/NIOHTTP2/NIOHTTP2Handler":{"title":"NIOHTTP2Handler","kind":"symbol","role":"symbol","url":"\/documentation\/niohttp2\/niohttp2handler","type":"topic","abstract":[],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOHTTP2Handler","kind":"identifier"}],"navigatorTitle":[{"text":"NIOHTTP2Handler","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP2\/NIOHTTP2Handler"},"doc://co.pointfree.VaporRouting/documentation/NIOSOCKS/SOCKSClientHandler":{"navigatorTitle":[{"text":"SOCKSClientHandler","kind":"identifier"}],"abstract":[{"text":"Connects to a SOCKS server to establish a proxied connection","type":"text"},{"text":" ","type":"text"},{"text":"to a host. This handler should be inserted at the beginning of a","type":"text"},{"text":" ","type":"text"},{"text":"channel’s pipeline. Note that SOCKS only supports fully-qualified","type":"text"},{"text":" ","type":"text"},{"text":"domain names and IPv4 or IPv6 sockets, and not UNIX sockets.","type":"text"}],"title":"SOCKSClientHandler","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"SOCKSClientHandler","kind":"identifier"}],"kind":"symbol","role":"symbol","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS\/SOCKSClientHandler","url":"\/documentation\/niosocks\/socksclienthandler"},"doc://co.pointfree.VaporRouting/documentation/NIOSOCKS/SOCKSServerHandshakeHandler":{"navigatorTitle":[{"text":"SOCKSServerHandshakeHandler","kind":"identifier"}],"abstract":[{"type":"text","text":"Add this handshake handler to the front of your channel, closest to the network."},{"type":"text","text":" "},{"type":"text","text":"The handler will receive bytes from the network and run them through a state machine"},{"type":"text","text":" "},{"type":"text","text":"and parser to enforce SOCKSv5 protocol correctness. Inbound bytes will by parsed into"},{"type":"text","text":" "},{"type":"codeVoice","code":"ClientMessage"},{"type":"text","text":" for downstream consumption. Send "},{"type":"codeVoice","code":"ServerMessage"},{"type":"text","text":" to this"},{"type":"text","text":" "},{"type":"text","text":"handler."}],"title":"SOCKSServerHandshakeHandler","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SOCKSServerHandshakeHandler","kind":"identifier"}],"kind":"symbol","role":"symbol","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSOCKS\/SOCKSServerHandshakeHandler","url":"\/documentation\/niosocks\/socksserverhandshakehandler"},"doc://co.pointfree.VaporRouting/documentation/NIOHTTPCompression/HTTPResponseCompressor":{"navigatorTitle":[{"kind":"identifier","text":"HTTPResponseCompressor"}],"abstract":[{"type":"text","text":"A HTTPResponseCompressor is a duplex channel handler that handles automatic streaming compression of"},{"type":"text","text":" "},{"type":"text","text":"HTTP responses. It respects the client’s Accept-Encoding preferences, including q-values if present,"},{"type":"text","text":" "},{"type":"text","text":"and ensures that clients are served the compression algorithm that works best for them."}],"title":"HTTPResponseCompressor","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HTTPResponseCompressor"}],"kind":"symbol","role":"symbol","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTPCompression\/HTTPResponseCompressor","url":"\/documentation\/niohttpcompression\/httpresponsecompressor"},"doc://co.pointfree.VaporRouting/documentation/NIOExtras/NIOWritePCAPHandler":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOExtras\/NIOWritePCAPHandler","url":"\/documentation\/nioextras\/niowritepcaphandler","role":"symbol","title":"NIOWritePCAPHandler","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOWritePCAPHandler"}],"navigatorTitle":[{"kind":"identifier","text":"NIOWritePCAPHandler"}],"type":"topic","abstract":[{"text":"A ","type":"text"},{"code":"ChannelHandler","type":"codeVoice"},{"text":" that can write a ","type":"text"},{"identifier":"https:\/\/en.wikipedia.org\/wiki\/Pcap","isActive":true,"type":"reference"},{"text":" containing the send\/received","type":"text"},{"text":" ","type":"text"},{"text":"data as synthesized TCP packet captures.","type":"text"}],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOHTTP1/NIOHTTPClientUpgradeHandler":{"navigatorTitle":[{"kind":"identifier","text":"NIOHTTPClientUpgradeHandler"}],"abstract":[{"type":"text","text":"A client-side channel handler that sends a HTTP upgrade handshake request to perform a HTTP-upgrade."},{"type":"text","text":" "},{"type":"text","text":"When the first HTTP request is sent, this handler will add all appropriate headers to perform an upgrade to"},{"type":"text","text":" "},{"type":"text","text":"the a protocol. It may add headers for a set of protocols in preference order."},{"type":"text","text":" "},{"type":"text","text":"If the upgrade fails (i.e. response is not 101 Switching Protocols), this handler simply"},{"type":"text","text":" "},{"type":"text","text":"removes itself from the pipeline. If the upgrade is successful, it upgrades the pipeline to the new protocol."}],"title":"NIOHTTPClientUpgradeHandler","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOHTTPClientUpgradeHandler"}],"kind":"symbol","role":"symbol","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1\/NIOHTTPClientUpgradeHandler","url":"\/documentation\/niohttp1\/niohttpclientupgradehandler"},"doc://co.pointfree.VaporRouting/documentation/NIOHTTP1/HTTPResponseEncoder":{"abstract":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"ChannelOutboundHandler"},{"text":" that can serialize HTTP responses.","type":"text"}],"title":"HTTPResponseEncoder","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1\/HTTPResponseEncoder","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HTTPResponseEncoder","kind":"identifier"}],"kind":"symbol","navigatorTitle":[{"text":"HTTPResponseEncoder","kind":"identifier"}],"type":"topic","url":"\/documentation\/niohttp1\/httpresponseencoder"},"doc://co.pointfree.VaporRouting/documentation/NIOWebSocket/WebSocketFrameEncoder":{"kind":"symbol","navigatorTitle":[{"text":"WebSocketFrameEncoder","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOWebSocket\/WebSocketFrameEncoder","abstract":[{"type":"text","text":"An inbound "},{"code":"ChannelHandler","type":"codeVoice"},{"type":"text","text":" that serializes structured websocket frames into a byte stream"},{"type":"text","text":" "},{"type":"text","text":"for sending on the network."}],"title":"WebSocketFrameEncoder","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"WebSocketFrameEncoder","kind":"identifier"}],"url":"\/documentation\/niowebsocket\/websocketframeencoder","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/AcceptBackoffHandler":{"navigatorTitle":[{"text":"AcceptBackoffHandler","kind":"identifier"}],"abstract":[{"text":"A ","type":"text"},{"code":"ChannelHandler","type":"codeVoice"},{"text":" that implements a backoff for a ","type":"text"},{"code":"ServerChannel","type":"codeVoice"},{"text":" when accept produces an ","type":"text"},{"code":"IOError","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"These errors are often recoverable by reducing the rate at which we call accept.","type":"text"}],"title":"AcceptBackoffHandler","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AcceptBackoffHandler","kind":"identifier"}],"kind":"symbol","role":"symbol","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/AcceptBackoffHandler","url":"\/documentation\/niocore\/acceptbackoffhandler"},"doc://co.pointfree.VaporRouting/documentation/NIOHTTP1/HTTPServerProtocolErrorHandler":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1\/HTTPServerProtocolErrorHandler","navigatorTitle":[{"text":"HTTPServerProtocolErrorHandler","kind":"identifier"}],"url":"\/documentation\/niohttp1\/httpserverprotocolerrorhandler","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HTTPServerProtocolErrorHandler","kind":"identifier"}],"role":"symbol","type":"topic","title":"HTTPServerProtocolErrorHandler","abstract":[{"text":"A simple channel handler that catches errors emitted by parsing HTTP requests","type":"text"},{"text":" ","type":"text"},{"text":"and sends 400 Bad Request responses.","type":"text"}],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOTransportServices/NIOFilterEmptyWritesHandler":{"navigatorTitle":[{"text":"NIOFilterEmptyWritesHandler","kind":"identifier"}],"url":"\/documentation\/niotransportservices\/niofilteremptywriteshandler","title":"NIOFilterEmptyWritesHandler","kind":"symbol","type":"topic","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOFilterEmptyWritesHandler","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOTransportServices\/NIOFilterEmptyWritesHandler","abstract":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"ChannelHandler"},{"text":" that checks for outbound writes of zero length, which are then dropped. This is","type":"text"},{"text":" ","type":"text"},{"text":"due to a bug in ","type":"text"},{"type":"codeVoice","code":"Network Framework"},{"text":", where zero byte TCP writes lead to stalled connections.","type":"text"},{"text":" ","type":"text"},{"text":"Write promises are confirmed in the correct order.","type":"text"}]},"doc://co.pointfree.VaporRouting/documentation/NIOHTTPCompression/NIOHTTPRequestCompressor":{"navigatorTitle":[{"kind":"identifier","text":"NIOHTTPRequestCompressor"}],"abstract":[{"text":"NIOHTTPResponseCompressor is an outbound channel handler that handles automatic streaming compression of","type":"text"},{"text":" ","type":"text"},{"text":"HTTP requests.","type":"text"}],"title":"NIOHTTPRequestCompressor","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOHTTPRequestCompressor"}],"kind":"symbol","role":"symbol","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTPCompression\/NIOHTTPRequestCompressor","url":"\/documentation\/niohttpcompression\/niohttprequestcompressor"},"doc://co.pointfree.VaporRouting/documentation/NIOHTTPCompression/NIOHTTPRequestDecompressor":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTPCompression\/NIOHTTPRequestDecompressor","navigatorTitle":[{"text":"NIOHTTPRequestDecompressor","kind":"identifier"}],"url":"\/documentation\/niohttpcompression\/niohttprequestdecompressor","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOHTTPRequestDecompressor","kind":"identifier"}],"role":"symbol","type":"topic","title":"NIOHTTPRequestDecompressor","abstract":[],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOHTTP2/HTTP2FramePayloadToHTTP1ClientCodec":{"abstract":[{"type":"text","text":"A simple channel handler that translates HTTP\/2 concepts into HTTP\/1 data types,"},{"type":"text","text":" "},{"type":"text","text":"and vice versa, for use on the client side."}],"url":"\/documentation\/niohttp2\/http2framepayloadtohttp1clientcodec","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HTTP2FramePayloadToHTTP1ClientCodec"}],"kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP2\/HTTP2FramePayloadToHTTP1ClientCodec","type":"topic","title":"HTTP2FramePayloadToHTTP1ClientCodec","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"HTTP2FramePayloadToHTTP1ClientCodec"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelHandler":{"kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ChannelHandler"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelHandler","url":"\/documentation\/niocore\/channelhandler","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ChannelHandler"}],"role":"symbol","title":"ChannelHandler","abstract":[{"text":"You should ","type":"text"},{"inlineContent":[{"type":"text","text":"never"}],"type":"emphasis"},{"text":" implement this protocol directly. Please implement one of its sub-protocols.","type":"text"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelOutboundHandler/unwrapOutboundIn(_:)-7u2n":{"type":"topic","defaultImplementations":1,"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelOutboundHandler\/unwrapOutboundIn(_:)-7u2n","url":"\/documentation\/niocore\/channeloutboundhandler\/unwrapoutboundin(_:)-7u2n","role":"symbol","required":true,"abstract":[{"type":"text","text":"Unwrap the provided "},{"type":"codeVoice","code":"NIOAny"},{"type":"text","text":" that was passed to "},{"type":"codeVoice","code":"write"},{"type":"text","text":"."}],"kind":"symbol","title":"unwrapOutboundIn(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"unwrapOutboundIn","kind":"identifier"},{"text":"(","kind":"text"},{"text":"NIOAny","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore6NIOAnyV"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"OutboundIn","kind":"typeIdentifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOHTTP2/HTTP2FramePayloadToHTTP1ServerCodec":{"kind":"symbol","url":"\/documentation\/niohttp2\/http2framepayloadtohttp1servercodec","abstract":[{"text":"A simple channel handler that translates HTTP\/2 concepts into HTTP\/1 data types,","type":"text"},{"text":" ","type":"text"},{"text":"and vice versa, for use on the server side.","type":"text"}],"title":"HTTP2FramePayloadToHTTP1ServerCodec","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HTTP2FramePayloadToHTTP1ServerCodec","kind":"identifier"}],"navigatorTitle":[{"text":"HTTP2FramePayloadToHTTP1ServerCodec","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP2\/HTTP2FramePayloadToHTTP1ServerCodec","role":"symbol","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/NIOHTTP2/HTTP2ToHTTP1ServerCodec":{"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP2\/HTTP2ToHTTP1ServerCodec","abstract":[{"type":"text","text":"A simple channel handler that translates HTTP\/2 concepts into HTTP\/1 data types,"},{"type":"text","text":" "},{"type":"text","text":"and vice versa, for use on the server side."}],"role":"symbol","navigatorTitle":[{"text":"HTTP2ToHTTP1ServerCodec","kind":"identifier"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HTTP2ToHTTP1ServerCodec","kind":"identifier"}],"kind":"symbol","title":"HTTP2ToHTTP1ServerCodec","deprecated":true,"url":"\/documentation\/niohttp2\/http2tohttp1servercodec"},"doc://co.pointfree.VaporRouting/documentation/NIOExtras/NIOJSONRPCFraming/ContentLengthHeaderFrameEncoder":{"kind":"symbol","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ContentLengthHeaderFrameEncoder","kind":"identifier"}],"navigatorTitle":[{"text":"ContentLengthHeaderFrameEncoder","kind":"identifier"}],"url":"\/documentation\/nioextras\/niojsonrpcframing\/contentlengthheaderframeencoder","abstract":[{"code":"ContentLengthHeaderFrameEncoder","type":"codeVoice"},{"text":" is responsible for emitting JSON-RPC wire protocol with ‘Content-Length’","type":"text"},{"text":" ","type":"text"},{"text":"HTTP-like headers as used by for example by LSP (Language Server Protocol).","type":"text"}],"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOExtras\/NIOJSONRPCFraming\/ContentLengthHeaderFrameEncoder","title":"NIOJSONRPCFraming.ContentLengthHeaderFrameEncoder"},"doc://co.pointfree.VaporRouting/documentation/NIOSSL/NIOSSLHandler":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSSL\/NIOSSLHandler","navigatorTitle":[{"text":"NIOSSLHandler","kind":"identifier"}],"url":"\/documentation\/niossl\/niosslhandler","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOSSLHandler","kind":"identifier"}],"role":"symbol","type":"topic","title":"NIOSSLHandler","abstract":[{"type":"text","text":"The base class for all NIOSSL handlers. This class cannot actually be instantiated by"},{"type":"text","text":" "},{"type":"text","text":"users directly: instead, users must select which mode they would like their handler to"},{"type":"text","text":" "},{"type":"text","text":"operate in, client or server."}],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/IdleStateHandler":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/IdleStateHandler","navigatorTitle":[{"text":"IdleStateHandler","kind":"identifier"}],"url":"\/documentation\/niocore\/idlestatehandler","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IdleStateHandler","kind":"identifier"}],"role":"symbol","type":"topic","title":"IdleStateHandler","abstract":[{"type":"text","text":"Triggers an IdleStateEvent when a Channel has not performed read, write, or both operation for a while."}],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelOutboundHandler":{"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelOutboundHandler","url":"\/documentation\/niocore\/channeloutboundhandler","role":"symbol","abstract":[{"type":"codeVoice","code":"ChannelHandler"},{"type":"text","text":" which handles outbound I\/O events or intercept an outbound I\/O operation for a "},{"code":"Channel","type":"codeVoice"},{"type":"text","text":"."}],"kind":"symbol","title":"ChannelOutboundHandler","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ChannelOutboundHandler","kind":"identifier"}],"navigatorTitle":[{"text":"ChannelOutboundHandler","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOHTTP1/HTTPServerPipelineHandler":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1\/HTTPServerPipelineHandler","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HTTPServerPipelineHandler","kind":"identifier"}],"role":"symbol","navigatorTitle":[{"text":"HTTPServerPipelineHandler","kind":"identifier"}],"abstract":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"ChannelHandler"},{"text":" that handles HTTP pipelining by buffering inbound data until a","type":"text"},{"text":" ","type":"text"},{"text":"response has been sent.","type":"text"}],"kind":"symbol","type":"topic","url":"\/documentation\/niohttp1\/httpserverpipelinehandler","title":"HTTPServerPipelineHandler"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelOutboundHandler/OutboundIn":{"abstract":[{"text":"The type of the outbound data which is wrapped in ","type":"text"},{"type":"codeVoice","code":"NIOAny"},{"text":".","type":"text"}],"fragments":[{"kind":"keyword","text":"associatedtype"},{"kind":"text","text":" "},{"kind":"identifier","text":"OutboundIn"}],"required":true,"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelOutboundHandler\/OutboundIn","role":"symbol","url":"\/documentation\/niocore\/channeloutboundhandler\/outboundin","kind":"symbol","type":"topic","title":"OutboundIn"},"doc://co.pointfree.VaporRouting/documentation/NIOSSL/NIOSSLClientHandler":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSSL\/NIOSSLClientHandler","url":"\/documentation\/niossl\/niosslclienthandler","role":"symbol","title":"NIOSSLClientHandler","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOSSLClientHandler"}],"navigatorTitle":[{"kind":"identifier","text":"NIOSSLClientHandler"}],"type":"topic","abstract":[{"text":"A channel handler that wraps a channel in TLS using NIOSSL.","type":"text"},{"text":" ","type":"text"},{"text":"This handler can be used in channels that are acting as the client","type":"text"},{"text":" ","type":"text"},{"text":"in the TLS dialog. For server connections, use the ","type":"text"},{"code":"NIOSSLServerHandler","type":"codeVoice"},{"text":".","type":"text"}],"kind":"symbol"}}}