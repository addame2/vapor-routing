{"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/CircularBuffer\/removeLast()-62nbb","interfaceLanguage":"swift"},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"tokens":[{"text":"@discardableResult","kind":"attribute"},{"text":" ","kind":"text"},{"text":"mutating","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"removeLast","kind":"identifier"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"Element"}],"languages":["swift"]}]},{"kind":"content","content":[{"anchor":"return-value","text":"Return Value","type":"heading","level":2},{"inlineContent":[{"text":"The last element of the ","type":"text"},{"code":"CircularBuffer","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"CircularBuffer","type":"codeVoice"},{"type":"text","text":" must not be empty."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Calling this method may invalidate all saved indices of this"},{"type":"text","text":" "},{"code":"CircularBuffer","type":"codeVoice"},{"type":"text","text":". Do not rely on a previously stored index value after"},{"type":"text","text":" "},{"type":"text","text":"altering the "},{"code":"CircularBuffer","type":"codeVoice"},{"type":"text","text":" with any operation that can change its length."}]},{"style":"note","content":[{"inlineContent":[{"type":"text","text":"O("},{"inlineContent":[{"type":"text","text":"1"}],"type":"emphasis"},{"type":"text","text":")"}],"type":"paragraph"}],"type":"aside","name":"Complexity"}]}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/CircularBuffer"]]},"schemaVersion":{"major":0,"patch":0,"minor":3},"abstract":[{"type":"text","text":"Removes and returns the last element of the "},{"type":"codeVoice","code":"CircularBuffer"},{"type":"text","text":"."}],"kind":"symbol","metadata":{"role":"symbol","modules":[{"name":"NIOCore"}],"symbolKind":"method","roleHeading":"Instance Method","extendedModule":"NIOCore","title":"removeLast()","externalID":"s:7NIOCore14CircularBufferV10removeLastxyF","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"removeLast"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"Element"}]},"variants":[{"paths":["\/documentation\/niocore\/circularbuffer\/removelast()-62nbb"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"references":{"doc://co.pointfree.VaporRouting/documentation/NIOCore":{"title":"NIOCore","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","abstract":[],"url":"\/documentation\/niocore","type":"topic","kind":"symbol","role":"collection"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/CircularBuffer/removeLast()-62nbb":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/CircularBuffer\/removeLast()-62nbb","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"removeLast","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"Element","kind":"typeIdentifier"}],"abstract":[{"text":"Removes and returns the last element of the ","type":"text"},{"type":"codeVoice","code":"CircularBuffer"},{"text":".","type":"text"}],"title":"removeLast()","role":"symbol","type":"topic","kind":"symbol","url":"\/documentation\/niocore\/circularbuffer\/removelast()-62nbb"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/CircularBuffer":{"kind":"symbol","navigatorTitle":[{"text":"CircularBuffer","kind":"identifier"}],"role":"symbol","url":"\/documentation\/niocore\/circularbuffer","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/CircularBuffer","type":"topic","abstract":[{"text":"An automatically expanding ring buffer implementation backed by a ","type":"text"},{"type":"codeVoice","code":"ContiguousArray"},{"text":". Even though this implementation","type":"text"},{"text":" ","type":"text"},{"text":"will automatically expand if more elements than ","type":"text"},{"type":"codeVoice","code":"initialCapacity"},{"text":" are stored, itâ€™s advantageous to prevent","type":"text"},{"text":" ","type":"text"},{"text":"expansions from happening frequently. Expansions will always force an allocation and a copy to happen.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CircularBuffer","kind":"identifier"}],"title":"CircularBuffer"}}}