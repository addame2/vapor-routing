{"sections":[],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/CircularBuffer"]]},"schemaVersion":{"major":0,"patch":0,"minor":3},"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/CircularBuffer\/init(initialCapacity:)","interfaceLanguage":"swift"},"metadata":{"roleHeading":"Initializer","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"initialCapacity"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":")"}],"modules":[{"name":"NIOCore"}],"externalID":"s:7NIOCore14CircularBufferV15initialCapacityACyxGSi_tcfc","extendedModule":"NIOCore","symbolKind":"init","role":"symbol","title":"init(initialCapacity:)"},"kind":"symbol","abstract":[{"text":"Allocates a buffer that can hold up to ","type":"text"},{"code":"initialCapacity","type":"codeVoice"},{"text":" elements and initialise an empty ring backed by","type":"text"},{"text":" ","type":"text"},{"text":"the buffer. When the ring grows to more than ","type":"text"},{"code":"initialCapacity","type":"codeVoice"},{"text":" elements the buffer will be expanded.","type":"text"}],"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"initialCapacity"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":")"}],"platforms":["Linux"]}],"kind":"declarations"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/niocore\/circularbuffer\/init(initialcapacity:)"]}],"references":{"doc://co.pointfree.VaporRouting/documentation/NIOCore/CircularBuffer/init(initialCapacity:)":{"kind":"symbol","type":"topic","role":"symbol","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"initialCapacity"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"kind":"text","text":")"}],"title":"init(initialCapacity:)","url":"\/documentation\/niocore\/circularbuffer\/init(initialcapacity:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/CircularBuffer\/init(initialCapacity:)","abstract":[{"type":"text","text":"Allocates a buffer that can hold up to "},{"code":"initialCapacity","type":"codeVoice"},{"type":"text","text":" elements and initialise an empty ring backed by"},{"type":"text","text":" "},{"type":"text","text":"the buffer. When the ring grows to more than "},{"code":"initialCapacity","type":"codeVoice"},{"type":"text","text":" elements the buffer will be expanded."}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore":{"title":"NIOCore","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","abstract":[],"url":"\/documentation\/niocore","type":"topic","kind":"symbol","role":"collection"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/CircularBuffer":{"kind":"symbol","navigatorTitle":[{"text":"CircularBuffer","kind":"identifier"}],"role":"symbol","url":"\/documentation\/niocore\/circularbuffer","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/CircularBuffer","type":"topic","abstract":[{"text":"An automatically expanding ring buffer implementation backed by a ","type":"text"},{"type":"codeVoice","code":"ContiguousArray"},{"text":". Even though this implementation","type":"text"},{"text":" ","type":"text"},{"text":"will automatically expand if more elements than ","type":"text"},{"type":"codeVoice","code":"initialCapacity"},{"text":" are stored, itâ€™s advantageous to prevent","type":"text"},{"text":" ","type":"text"},{"text":"expansions from happening frequently. Expansions will always force an allocation and a copy to happen.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CircularBuffer","kind":"identifier"}],"title":"CircularBuffer"}}}