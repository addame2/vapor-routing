{"sections":[],"kind":"symbol","primaryContentSections":[{"declarations":[{"platforms":["Linux"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"final"},{"kind":"text","text":" "},{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOSingleStepByteToMessageProcessor"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Decoder"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Decoder"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOSingleStepByteToMessageDecoder","preciseIdentifier":"s:7NIOCore33NIOSingleStepByteToMessageDecoderP","text":"NIOSingleStepByteToMessageDecoder"}]}],"kind":"declarations"},{"kind":"content","content":[{"text":"Overview","type":"heading","anchor":"overview","level":2},{"type":"paragraph","inlineContent":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"NIOSingleStepByteToMessageProcessor"},{"text":" is first initialized with a ","type":"text"},{"type":"codeVoice","code":"NIOSingleStepByteToMessageDecoder"},{"text":". Then","type":"text"},{"text":" ","type":"text"},{"text":"call ","type":"text"},{"type":"codeVoice","code":"process"},{"text":" as each ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":" is received from the stream. The closure is called repeatedly with each message produced by","type":"text"},{"text":" ","type":"text"},{"text":"the decoder.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"When your stream ends, call ","type":"text"},{"code":"finishProcessing","type":"codeVoice"},{"text":" to ensure all buffered data is passed to your decoder. This will call ","type":"text"},{"code":"decodeLast","type":"codeVoice"},{"text":" ","type":"text"},{"text":"one or more times with any remaining data.","type":"text"}]},{"text":"Example","type":"heading","anchor":"Example","level":3},{"type":"paragraph","inlineContent":[{"text":"Below is an example of a protocol decoded by ","type":"text"},{"type":"codeVoice","code":"TwoByteStringCodec"},{"text":" that is sent over HTTP. ","type":"text"},{"type":"codeVoice","code":"RawBodyMessageHandler"},{"text":" forwards the headers","type":"text"},{"text":" ","type":"text"},{"text":"and trailers directly and uses ","type":"text"},{"type":"codeVoice","code":"NIOSingleStepByteToMessageProcessor"},{"text":" to send whole decoded messages.","type":"text"}]},{"type":"codeListing","code":["class TwoByteStringCodec: NIOSingleStepByteToMessageDecoder {","    typealias InboundOut = String","","    public func decode(buffer: inout ByteBuffer) throws -> InboundOut? {","        return buffer.readString(length: 2)","    }","","    public func decodeLast(buffer: inout ByteBuffer, seenEOF: Bool) throws -> InboundOut? {","        return try self.decode(buffer: &buffer)","    }","}","","class RawBodyMessageHandler: ChannelInboundHandler {","    typealias InboundIn = HTTPServerRequestPart \/\/ alias for HTTPPart<HTTPRequestHead, ByteBuffer>","    \/\/ This converts the body from ByteBuffer to String, our message type","    typealias InboundOut = HTTPPart<HTTPRequestHead, String>","","    private var messageProcessor: NIOSingleStepByteToMessageProcessor<TwoByteStringCodec>? = nil","","    func channelRead(context: ChannelHandlerContext, data: NIOAny) {","        let req = self.unwrapInboundIn(data)","        do {","            switch req {","            case .head(let head):","                \/\/ simply forward on the head","                context.fireChannelRead(self.wrapInboundOut(.head(head)))","            case .body(let body):","                if self.messageProcessor == nil {","                    self.messageProcessor = NIOSingleStepByteToMessageProcessor(TwoByteStringCodec())","                }","                try self.messageProcessor!.process(buffer: body) { message in","                    self.channelReadMessage(context: context, message: message)","                }","            case .end(let trailers):","                \/\/ Forward on any remaining messages and the trailers","                try self.messageProcessor?.finishProcessing(seenEOF: false) { message in","                    self.channelReadMessage(context: context, message: message)","                }","                context.fireChannelRead(self.wrapInboundOut(.end(trailers)))","            }","        } catch {","            context.fireErrorCaught(error)","        }","    }","","    \/\/ Forward on the body messages as whole messages","    func channelReadMessage(context: ChannelHandlerContext, message: String) {","        context.fireChannelRead(self.wrapInboundOut(.body(message)))","    }","}","","private class DecodedBodyHTTPHandler: ChannelInboundHandler {","    typealias InboundIn = HTTPPart<HTTPRequestHead, String>","    typealias OutboundOut = HTTPServerResponsePart","","    var msgs: [String] = []","","    func channelRead(context: ChannelHandlerContext, data: NIOAny) {","        let message = self.unwrapInboundIn(data)","","        switch message {","        case .head(let head):","            print(\"head: \\(head)\")","        case .body(let msg):","            self.msgs.append(msg)","        case .end(let trailers):","            print(\"trailers: \\(trailers)\")","            var responseBuffer = context.channel.allocator.buffer(capacity: 32)","            for msg in msgs {","                responseBuffer.writeString(msg)","                responseBuffer.writeStaticString(\"\\n\")","            }","            var headers = HTTPHeaders()","            headers.add(name: \"content-length\", value: String(responseBuffer.readableBytes))","","            context.write(self.wrapOutboundOut(HTTPServerResponsePart.head(","                HTTPResponseHead(version: .http1_1,","                                 status: .ok, headers: headers))), promise: nil)","","            context.write(self.wrapOutboundOut(HTTPServerResponsePart.body(","                .byteBuffer(responseBuffer))), promise: nil)","            context.writeAndFlush(self.wrapOutboundOut(HTTPServerResponsePart.end(nil)), promise: nil)","        }","    }","}","","let group = MultiThreadedEventLoopGroup(numberOfThreads: 1)","let bootstrap = ServerBootstrap(group: group).childChannelInitializer({channel in","    channel.pipeline.configureHTTPServerPipeline(withPipeliningAssistance: true, withErrorHandling: true).flatMap { _ in","        channel.pipeline.addHandlers([RawBodyMessageHandler(), DecodedBodyHTTPHandler()])","    }","})","let channelFuture = bootstrap.bind(host: \"127.0.0.1\", port: 0)"],"syntax":null}]}],"abstract":[{"code":"NIOSingleStepByteToMessageProcessor","type":"codeVoice"},{"type":"text","text":" uses a "},{"code":"NIOSingleStepByteToMessageDecoder","type":"codeVoice"},{"text":" to produce messages","type":"text"},{"text":" ","type":"text"},{"text":"from a stream of incoming bytes. It works like ","type":"text"},{"type":"codeVoice","code":"ByteToMessageHandler"},{"text":" but may be used outside of the channel pipeline. This allows","type":"text"},{"text":" ","type":"text"},{"text":"processing of wrapped protocols in a general way.","type":"text"}],"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOSingleStepByteToMessageProcessor\/init(_:maximumBufferSize:)"]},{"title":"Instance Methods","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOSingleStepByteToMessageProcessor\/finishProcessing(seenEOF:_:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOSingleStepByteToMessageProcessor\/process(buffer:_:)"]}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore"]]},"variants":[{"paths":["\/documentation\/niocore\/niosinglestepbytetomessageprocessor"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"patch":0,"minor":3,"major":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOSingleStepByteToMessageProcessor"},"metadata":{"roleHeading":"Class","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOSingleStepByteToMessageProcessor"}],"symbolKind":"class","title":"NIOSingleStepByteToMessageProcessor","externalID":"s:7NIOCore35NIOSingleStepByteToMessageProcessorC","modules":[{"name":"NIOCore"}],"navigatorTitle":[{"kind":"identifier","text":"NIOSingleStepByteToMessageProcessor"}]},"references":{"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOSingleStepByteToMessageProcessor/process(buffer:_:)":{"conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Decoder"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"NIOSingleStepByteToMessageDecoder"},{"type":"text","text":"."}]},"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"process"},{"kind":"text","text":"("},{"kind":"externalParam","text":"buffer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ByteBuffer","preciseIdentifier":"s:7NIOCore10ByteBufferV"},{"kind":"text","text":", ("},{"text":"Decoder","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"InboundOut","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"}],"type":"topic","title":"process(buffer:_:)","url":"\/documentation\/niocore\/niosinglestepbytetomessageprocessor\/process(buffer:_:)","kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"Feed data into the "},{"code":"NIOSingleStepByteToMessageProcessor","type":"codeVoice"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOSingleStepByteToMessageProcessor\/process(buffer:_:)"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOSingleStepByteToMessageDecoder":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOSingleStepByteToMessageDecoder","abstract":[{"type":"text","text":"A simplified version of "},{"code":"ByteToMessageDecoder","type":"codeVoice"},{"type":"text","text":" that can generate zero or one messages for each invocation of "},{"type":"codeVoice","code":"decode"},{"type":"text","text":" or "},{"type":"codeVoice","code":"decodeLast"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Having "},{"type":"codeVoice","code":"decode"},{"type":"text","text":" and "},{"type":"codeVoice","code":"decodeLast"},{"type":"text","text":" return an optional message avoids re-entrancy problems, since the functions relinquish exclusive access"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" when returning. This allows for greatly simplified processing."}],"type":"topic","navigatorTitle":[{"text":"NIOSingleStepByteToMessageDecoder","kind":"identifier"}],"url":"\/documentation\/niocore\/niosinglestepbytetomessagedecoder","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOSingleStepByteToMessageDecoder","kind":"identifier"}],"kind":"symbol","title":"NIOSingleStepByteToMessageDecoder","role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore":{"title":"NIOCore","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","abstract":[],"url":"\/documentation\/niocore","type":"topic","kind":"symbol","role":"collection"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOSingleStepByteToMessageProcessor/init(_:maximumBufferSize:)":{"type":"topic","kind":"symbol","title":"init(_:maximumBufferSize:)","abstract":[{"type":"text","text":"Initialize a "},{"code":"NIOSingleStepByteToMessageProcessor","type":"codeVoice"},{"type":"text","text":"."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOSingleStepByteToMessageProcessor\/init(_:maximumBufferSize:)","url":"\/documentation\/niocore\/niosinglestepbytetomessageprocessor\/init(_:maximumbuffersize:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Decoder"},{"kind":"text","text":", "},{"kind":"externalParam","text":"maximumBufferSize"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"kind":"text","text":"?)"}],"role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOSingleStepByteToMessageProcessor/finishProcessing(seenEOF:_:)":{"type":"topic","kind":"symbol","title":"finishProcessing(seenEOF:_:)","abstract":[{"type":"text","text":"Call when there is no data left in the stream. Calls "},{"code":"Decoder","type":"codeVoice"},{"type":"text","text":"."},{"code":"decodeLast","type":"codeVoice"},{"type":"text","text":" one or more times. If there is no data left"},{"type":"text","text":" "},{"code":"decodeLast","type":"codeVoice"},{"type":"text","text":" will be called one time with an empty "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":"."}],"conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Decoder"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"NIOSingleStepByteToMessageDecoder"},{"type":"text","text":"."}]},"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOSingleStepByteToMessageProcessor\/finishProcessing(seenEOF:_:)","url":"\/documentation\/niocore\/niosinglestepbytetomessageprocessor\/finishprocessing(seeneof:_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"finishProcessing"},{"kind":"text","text":"("},{"kind":"externalParam","text":"seenEOF"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"text":", (","kind":"text"},{"text":"Decoder","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"InboundOut","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Void","preciseIdentifier":"s:s4Voida","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"}],"role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOSingleStepByteToMessageProcessor":{"navigatorTitle":[{"text":"NIOSingleStepByteToMessageProcessor","kind":"identifier"}],"url":"\/documentation\/niocore\/niosinglestepbytetomessageprocessor","title":"NIOSingleStepByteToMessageProcessor","role":"symbol","abstract":[{"code":"NIOSingleStepByteToMessageProcessor","type":"codeVoice"},{"type":"text","text":" uses a "},{"code":"NIOSingleStepByteToMessageDecoder","type":"codeVoice"},{"text":" to produce messages","type":"text"},{"text":" ","type":"text"},{"text":"from a stream of incoming bytes. It works like ","type":"text"},{"code":"ByteToMessageHandler","type":"codeVoice"},{"text":" but may be used outside of the channel pipeline. This allows","type":"text"},{"text":" ","type":"text"},{"text":"processing of wrapped protocols in a general way.","type":"text"}],"type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"NIOSingleStepByteToMessageProcessor","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOSingleStepByteToMessageProcessor"}}}