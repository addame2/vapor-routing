{"sections":[],"schemaVersion":{"minor":3,"major":0,"patch":0},"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBuffer"]]},"kind":"symbol","primaryContentSections":[{"declarations":[{"platforms":["Linux"],"tokens":[{"kind":"keyword","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"buffer"},{"kind":"text","text":": "},{"preciseIdentifier":"s:7NIOCore10ByteBufferV","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBuffer","kind":"typeIdentifier","text":"ByteBuffer"},{"kind":"text","text":")"}],"languages":["swift"]}],"kind":"declarations"},{"content":[{"anchor":"discussion","type":"heading","text":"Discussion","level":2},{"inlineContent":[{"text":"This may allocate a new ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" with enough space to fit ","type":"text"},{"code":"buffer","type":"codeVoice"},{"text":" and potentially some extra space using","type":"text"},{"text":" ","type":"text"},{"text":"the default allocator.","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"info: If you have access to a ","type":"text"},{"type":"codeVoice","code":"Channel"},{"text":", ","type":"text"},{"type":"codeVoice","code":"ChannelHandlerContext"},{"text":", or ","type":"text"},{"type":"codeVoice","code":"ByteBufferAllocator"},{"text":" we","type":"text"},{"text":" ","type":"text"},{"text":"recommend using ","type":"text"},{"type":"codeVoice","code":"channel.allocator.buffer(buffer:)"},{"text":". Or if you want to write multiple items into the","type":"text"},{"text":" ","type":"text"},{"text":"buffer use ","type":"text"},{"type":"codeVoice","code":"channel.allocator.buffer(capacity: ...)"},{"text":" to allocate a ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":" of the right","type":"text"},{"text":" ","type":"text"},{"text":"size followed by a ","type":"text"},{"type":"codeVoice","code":"writeImmutableBuffer"},{"text":" instead of using this method. This allows SwiftNIO to do","type":"text"},{"text":" ","type":"text"},{"text":"accounting and optimisations of resources acquired for operations on a given ","type":"text"},{"type":"codeVoice","code":"Channel"},{"text":" in the future.","type":"text"}]}]}]},{"type":"aside","style":"note","content":[{"inlineContent":[{"type":"text","text":"Use this method only if you deliberately want to reallocate a potentially smaller "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" than the"},{"type":"text","text":" "},{"type":"text","text":"one you already have. Given that "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" is a value type, defensive copies are not necessary. If"},{"type":"text","text":" "},{"type":"text","text":"you have a "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" but would like the "},{"code":"readerIndex","type":"codeVoice"},{"type":"text","text":" to start at "},{"code":"0","type":"codeVoice"},{"type":"text","text":", consider "},{"code":"readSlice","type":"codeVoice"},{"type":"text","text":" instead."}],"type":"paragraph"}]}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/niocore\/bytebuffer\/init(buffer:)"]}],"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBuffer\/init(buffer:)","interfaceLanguage":"swift"},"abstract":[{"text":"Create a fresh ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" containing the readable bytes of ","type":"text"},{"code":"buffer","type":"codeVoice"},{"text":".","type":"text"}],"metadata":{"externalID":"s:7NIOCore10ByteBufferV6bufferA2C_tcfc","roleHeading":"Initializer","title":"init(buffer:)","extendedModule":"NIOCore","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"buffer"},{"kind":"text","text":": "},{"preciseIdentifier":"s:7NIOCore10ByteBufferV","kind":"typeIdentifier","text":"ByteBuffer"},{"kind":"text","text":")"}],"modules":[{"name":"NIOCore"}],"symbolKind":"init","role":"symbol"},"references":{"doc://co.pointfree.VaporRouting/documentation/NIOCore":{"title":"NIOCore","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","abstract":[],"url":"\/documentation\/niocore","type":"topic","kind":"symbol","role":"collection"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ByteBuffer":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ByteBuffer"}],"navigatorTitle":[{"kind":"identifier","text":"ByteBuffer"}],"title":"ByteBuffer","type":"topic","abstract":[{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" stores contiguously allocated raw bytes. It is a random and sequential accessible sequence of zero or"},{"type":"text","text":" "},{"type":"text","text":"more bytes (octets)."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBuffer","role":"symbol","url":"\/documentation\/niocore\/bytebuffer","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ByteBuffer/init(buffer:)":{"type":"topic","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"buffer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore10ByteBufferV","text":"ByteBuffer"},{"kind":"text","text":")"}],"title":"init(buffer:)","url":"\/documentation\/niocore\/bytebuffer\/init(buffer:)","abstract":[{"type":"text","text":"Create a fresh "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" containing the readable bytes of "},{"code":"buffer","type":"codeVoice"},{"type":"text","text":"."}],"role":"symbol","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBuffer\/init(buffer:)"}}}