{"schemaVersion":{"patch":0,"major":0,"minor":3},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"nonemptyFlatMapThrowing","kind":"identifier"},{"text":"<","kind":"text"},{"text":"NewValue","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"transform","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"@escaping","kind":"keyword"},{"text":" (","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"NewValue","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","text":"EventLoopFuture","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"NewValue","kind":"typeIdentifier"},{"text":"> ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"preciseIdentifier":"s:Sl","text":"Collection","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"NewValue","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"preciseIdentifier":"s:Sm","text":"RangeReplaceableCollection","kind":"typeIdentifier"}],"platforms":["Linux"],"languages":["swift"]}]}],"metadata":{"externalID":"s:7NIOCore15EventLoopFutureC8AsyncKitE23nonemptyFlatMapThrowingyACyqd__Gqd__xKcSlRzSmRd__lF","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"nonemptyFlatMapThrowing","kind":"identifier"},{"text":"<","kind":"text"},{"text":"NewValue","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"NewValue","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"EventLoopFuture","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore15EventLoopFutureC"},{"text":"<","kind":"text"},{"text":"NewValue","kind":"typeIdentifier"},{"text":">","kind":"text"}],"roleHeading":"Instance Method","role":"symbol","modules":[{"name":"NIOCore"}],"title":"nonemptyFlatMapThrowing(_:)","extendedModule":"NIOCore","symbolKind":"method"},"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture"]]},"sections":[],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/niocore\/eventloopfuture\/nonemptyflatmapthrowing(_:)"]}],"kind":"symbol","abstract":[{"text":"Checks that the future’s value (if any) returns ","type":"text"},{"type":"codeVoice","code":"false"},{"text":" for ","type":"text"},{"type":"codeVoice","code":".isEmpty"},{"text":". If the check fails, a new future with","type":"text"},{"text":" ","type":"text"},{"text":"an empty array as its value is returned. Otherwise, the provided normal ","type":"text"},{"type":"codeVoice","code":"flatMapThrowing()"},{"text":" callback is","type":"text"},{"text":" ","type":"text"},{"text":"invoked. The callback’s return type must be an ","type":"text"},{"type":"codeVoice","code":"Array"},{"text":" or a ","type":"text"},{"type":"codeVoice","code":"RangeReplaceableCollection"},{"text":".","type":"text"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture\/nonemptyFlatMapThrowing(_:)"},"references":{"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoopFuture/nonemptyFlatMapThrowing(_:)":{"url":"\/documentation\/niocore\/eventloopfuture\/nonemptyflatmapthrowing(_:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture\/nonemptyFlatMapThrowing(_:)","role":"symbol","abstract":[{"type":"text","text":"Checks that the future’s value (if any) returns "},{"type":"codeVoice","code":"false"},{"text":" for ","type":"text"},{"code":".isEmpty","type":"codeVoice"},{"type":"text","text":". If the check fails, a new future with"},{"type":"text","text":" "},{"type":"text","text":"an empty array as its value is returned. Otherwise, the provided normal "},{"type":"codeVoice","code":"flatMapThrowing()"},{"type":"text","text":" callback is"},{"type":"text","text":" "},{"type":"text","text":"invoked. The callback’s return type must be an "},{"type":"codeVoice","code":"Array"},{"type":"text","text":" or a "},{"type":"codeVoice","code":"RangeReplaceableCollection"},{"type":"text","text":"."}],"type":"topic","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"nonemptyFlatMapThrowing","kind":"identifier"},{"text":"<","kind":"text"},{"text":"NewValue","kind":"genericParameter"},{"text":">((","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"NewValue"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","text":"EventLoopFuture"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"NewValue"},{"kind":"text","text":">"}],"title":"nonemptyFlatMapThrowing(_:)"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoopFuture":{"type":"topic","url":"\/documentation\/niocore\/eventloopfuture","role":"symbol","navigatorTitle":[{"text":"EventLoopFuture","kind":"identifier"}],"title":"EventLoopFuture","kind":"symbol","abstract":[{"text":"Holder for a result that will be provided later.","type":"text"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EventLoopFuture","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore":{"title":"NIOCore","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","abstract":[],"url":"\/documentation\/niocore","type":"topic","kind":"symbol","role":"collection"}}}