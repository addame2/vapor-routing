{"variants":[{"paths":["\/documentation\/niocore\/eventloopfuture\/recover(_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"metadata":{"role":"symbol","modules":[{"name":"NIOCore"}],"externalID":"s:7NIOCore15EventLoopFutureC7recoveryACyxGxs5Error_pcF","extendedModule":"NIOCore","symbolKind":"method","roleHeading":"Instance Method","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"recover","kind":"identifier"},{"text":"((","kind":"text"},{"preciseIdentifier":"s:s5ErrorP","text":"Error","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:7NIOCore15EventLoopFutureC","text":"EventLoopFuture","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":">","kind":"text"}],"title":"recover(_:)"},"kind":"symbol","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture\/recover(_:)"},"abstract":[{"type":"text","text":"When the current "},{"type":"codeVoice","code":"EventLoopFuture<Value>"},{"type":"text","text":" is in an error state, run the provided callback, which"},{"text":" ","type":"text"},{"text":"can recover from the error and return a new value of type ","type":"text"},{"type":"codeVoice","code":"Value"},{"text":". The provided callback may not ","type":"text"},{"type":"codeVoice","code":"throw"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"so this function should be used when the error is always recoverable.","type":"text"}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture"]]},"schemaVersion":{"major":0,"minor":3,"patch":0},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"recover","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"callback"},{"kind":"text","text":": "},{"kind":"keyword","text":"@escaping"},{"kind":"text","text":" ("},{"kind":"typeIdentifier","preciseIdentifier":"s:s5ErrorP","text":"Error"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","text":"EventLoopFuture","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":">"}],"platforms":["Linux"],"languages":["swift"]}]},{"kind":"content","content":[{"text":"Return Value","type":"heading","level":2,"anchor":"return-value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A future that will receive the recovered value."}]}]},{"kind":"parameters","parameters":[{"name":"callback","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Function that will receive the error value of this "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":" and return"},{"type":"text","text":" "},{"type":"text","text":"a new value lifted into a new "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":"."}]}]}]},{"kind":"content","content":[{"level":2,"type":"heading","anchor":"discussion","text":"Discussion"},{"inlineContent":[{"text":"Operations performed in ","type":"text"},{"code":"recover","type":"codeVoice"},{"text":" should not block, or they will block the entire","type":"text"},{"text":" ","type":"text"},{"text":"event loop. ","type":"text"},{"code":"recover","type":"codeVoice"},{"text":" is intended for use when you have the ability to synchronously","type":"text"},{"text":" ","type":"text"},{"text":"recover from errors.","type":"text"}],"type":"paragraph"}]}],"references":{"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoopFuture/recover(_:)":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"recover","kind":"identifier"},{"text":"((","kind":"text"},{"preciseIdentifier":"s:s5ErrorP","text":"Error","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:7NIOCore15EventLoopFutureC","text":"EventLoopFuture","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":">","kind":"text"}],"url":"\/documentation\/niocore\/eventloopfuture\/recover(_:)","abstract":[{"type":"text","text":"When the current "},{"type":"codeVoice","code":"EventLoopFuture<Value>"},{"type":"text","text":" is in an error state, run the provided callback, which"},{"text":" ","type":"text"},{"text":"can recover from the error and return a new value of type ","type":"text"},{"code":"Value","type":"codeVoice"},{"text":". The provided callback may not ","type":"text"},{"type":"codeVoice","code":"throw"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"so this function should be used when the error is always recoverable."}],"title":"recover(_:)","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture\/recover(_:)","type":"topic","role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoopFuture":{"type":"topic","url":"\/documentation\/niocore\/eventloopfuture","role":"symbol","navigatorTitle":[{"text":"EventLoopFuture","kind":"identifier"}],"title":"EventLoopFuture","kind":"symbol","abstract":[{"text":"Holder for a result that will be provided later.","type":"text"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EventLoopFuture","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore":{"title":"NIOCore","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","abstract":[],"url":"\/documentation\/niocore","type":"topic","kind":"symbol","role":"collection"}}}