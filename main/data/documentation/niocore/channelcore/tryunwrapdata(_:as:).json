{"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelCore"]]},"metadata":{"modules":[{"name":"NIOCore"}],"externalID":"s:7NIOCore11ChannelCorePAAE13tryUnwrapData_2asqd__SgAA6NIOAnyV_qd__mtlF","symbolKind":"method","roleHeading":"Instance Method","title":"tryUnwrapData(_:as:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"tryUnwrapData"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"NIOAny","preciseIdentifier":"s:7NIOCore6NIOAnyV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"as"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":".Type) -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"?"}],"role":"symbol","extendedModule":"NIOCore"},"kind":"symbol","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/niocore\/channelcore\/tryunwrapdata(_:as:)"]}],"primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["Linux"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"tryUnwrapData"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"data"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"NIOAny","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOAny","preciseIdentifier":"s:7NIOCore6NIOAnyV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"as"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":".Type = T.self) -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"?"}]}],"kind":"declarations"},{"content":[{"type":"heading","anchor":"return-value","level":2,"text":"Return Value"},{"inlineContent":[{"type":"text","text":"The content of the "},{"type":"codeVoice","code":"NIOAny"},{"type":"text","text":", or "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" if the type is incorrect."}],"type":"paragraph"}],"kind":"content"},{"parameters":[{"name":"data","content":[{"inlineContent":[{"type":"text","text":"The "},{"code":"NIOAny","type":"codeVoice"},{"type":"text","text":" to unwrap."}],"type":"paragraph"}]},{"name":"as","content":[{"inlineContent":[{"text":"The type to extract from the ","type":"text"},{"code":"NIOAny","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}]}],"kind":"parameters"},{"content":[{"type":"heading","level":2,"anchor":"discussion","text":"Discussion"},{"type":"paragraph","inlineContent":[{"text":"This method is intended for use when writing custom ","type":"text"},{"code":"ChannelCore","type":"codeVoice"},{"text":" implementations.","type":"text"},{"text":" ","type":"text"},{"text":"This can safely be called in methods like ","type":"text"},{"code":"write0","type":"codeVoice"},{"text":" to extract data from the ","type":"text"},{"code":"NIOAny","type":"codeVoice"},{"text":" ","type":"text"},{"text":"provided in those cases.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"If the unwrap fails, this will return ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":". ","type":"text"},{"code":"ChannelCore","type":"codeVoice"},{"text":" implementations should almost","type":"text"},{"text":" ","type":"text"},{"text":"always support only one runtime type, so in general they should avoid using this and prefer","type":"text"},{"text":" ","type":"text"},{"text":"using ","type":"text"},{"code":"unwrapData","type":"codeVoice"},{"text":" instead. This method exists for rare use-cases where tolerating type","type":"text"},{"text":" ","type":"text"},{"text":"mismatches is acceptable.","type":"text"}]},{"type":"aside","style":"warning","content":[{"inlineContent":[{"type":"text","text":"If you are implementing a "},{"type":"codeVoice","code":"ChannelCore"},{"type":"text","text":", you should use "},{"type":"codeVoice","code":"unwrapData"},{"type":"text","text":" unless you"},{"type":"text","text":" "},{"type":"text","text":"are doing something "},{"type":"emphasis","inlineContent":[{"type":"text","text":"extremely"}]},{"type":"text","text":" unusual."}],"type":"paragraph"}]}],"kind":"content"}],"sections":[],"schemaVersion":{"minor":3,"major":0,"patch":0},"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelCore\/tryUnwrapData(_:as:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Attempts to unwrap the given "},{"type":"codeVoice","code":"NIOAny"},{"type":"text","text":" as a specific concrete type."}],"references":{"doc://co.pointfree.VaporRouting/documentation/NIOCore":{"title":"NIOCore","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","abstract":[],"url":"\/documentation\/niocore","type":"topic","kind":"symbol","role":"collection"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelCore":{"kind":"symbol","role":"symbol","title":"ChannelCore","url":"\/documentation\/niocore\/channelcore","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelCore","navigatorTitle":[{"kind":"identifier","text":"ChannelCore"}],"abstract":[{"type":"text","text":"The core "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":" methods that are for internal use of the "},{"type":"codeVoice","code":"Channel"},{"text":" implementation only.","type":"text"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ChannelCore"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelCore/tryUnwrapData(_:as:)":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelCore\/tryUnwrapData(_:as:)","url":"\/documentation\/niocore\/channelcore\/tryunwrapdata(_:as:)","role":"symbol","abstract":[{"type":"text","text":"Attempts to unwrap the given "},{"type":"codeVoice","code":"NIOAny"},{"type":"text","text":" as a specific concrete type."}],"kind":"symbol","type":"topic","title":"tryUnwrapData(_:as:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"tryUnwrapData"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"NIOAny","preciseIdentifier":"s:7NIOCore6NIOAnyV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"as","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":".Type) -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":"?","kind":"text"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOAny":{"abstract":[{"type":"codeVoice","code":"NIOAny"},{"text":" is an opaque container for values of ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"any"}]},{"text":" type, similar to Swiftâ€™s builtin ","type":"text"},{"type":"codeVoice","code":"Any"},{"text":" type. Contrary to","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Any"},{"text":" the overhead of ","type":"text"},{"type":"codeVoice","code":"NIOAny"},{"text":" depends on the the type of the wrapped value. Certain types that are important","type":"text"},{"text":" ","type":"text"},{"text":"for the performance of a SwiftNIO application like ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":", ","type":"text"},{"type":"codeVoice","code":"FileRegion"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"AddressEnvelope<ByteBuffer>"},{"text":" can be expected","type":"text"},{"text":" ","type":"text"},{"text":"to be wrapped almost without overhead. All others will have similar performance as if they were passed as an ","type":"text"},{"type":"codeVoice","code":"Any"},{"text":" as","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"NIOAny"},{"text":" just like ","type":"text"},{"type":"codeVoice","code":"Any"},{"text":" will contain them within an existential container.","type":"text"}],"title":"NIOAny","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOAny","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOAny","kind":"identifier"}],"kind":"symbol","navigatorTitle":[{"text":"NIOAny","kind":"identifier"}],"type":"topic","url":"\/documentation\/niocore\/nioany"}}}