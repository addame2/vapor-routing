{"kind":"symbol","primaryContentSections":[{"declarations":[{"tokens":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOAny","kind":"identifier"}],"languages":["swift"],"platforms":["Linux"]}],"kind":"declarations"},{"kind":"content","content":[{"type":"heading","text":"Overview","level":2,"anchor":"overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The most important use-cases for "},{"code":"NIOAny","type":"codeVoice"},{"type":"text","text":" are values travelling through the "},{"code":"ChannelPipeline","type":"codeVoice"},{"type":"text","text":" whose type can’t"},{"type":"text","text":" "},{"type":"text","text":"be calculated at compile time. For example:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"the "},{"type":"codeVoice","code":"channelRead"},{"type":"text","text":" of any "},{"type":"codeVoice","code":"ChannelInboundHandler"}]}]},{"content":[{"inlineContent":[{"text":"the ","type":"text"},{"type":"codeVoice","code":"write"},{"text":" method of a ","type":"text"},{"type":"codeVoice","code":"ChannelOutboundHandler"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The abstraction that delivers a "},{"type":"codeVoice","code":"NIOAny"},{"type":"text","text":" to user code must provide a mechanism to unwrap a "},{"type":"codeVoice","code":"NIOAny"},{"type":"text","text":" as a"},{"type":"text","text":" "},{"type":"text","text":"certain type known at run-time. Canonical example:"}]},{"type":"codeListing","code":["class SandwichHandler: ChannelInboundHandler {","    typealias InboundIn = Bacon \/* we expected to be delivered `Bacon` ... *\/","    typealias InboundOut = Sandwich \/* ... and we will make and deliver a `Sandwich` from that *\/","","    func channelRead(context: ChannelHandlerContext, data: NIOAny) {","         \/* we receive the `Bacon` as a `NIOAny` as at compile-time the exact configuration of the channel","            pipeline can't be computed. The pipeline can't be computed at compile time as it can change","            dynamically at run-time. Yet, we assert that in any configuration the channel handler before","            `SandwichHandler` does actually send us a stream of `Bacon`.","         *\/","         let bacon = self.unwrapInboundIn(data) \/* `Bacon` or crash *\/","         let sandwich = makeSandwich(bacon)","         context.fireChannelRead(self.wrapInboundOut(sandwich)) \/* as promised we deliver a wrapped `Sandwich` *\/","    }","}"],"syntax":null}]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"metadata":{"roleHeading":"Structure","title":"NIOAny","modules":[{"name":"NIOCore"}],"symbolKind":"struct","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOAny"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"NIOAny"}],"externalID":"s:7NIOCore6NIOAnyV"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOAny"},"relationshipsSections":[{"type":"conformsTo","identifiers":["doc:\/\/co.pointfree.VaporRouting\/s23CustomStringConvertibleP"],"kind":"relationships","title":"Conforms To"}],"variants":[{"paths":["\/documentation\/niocore\/nioany"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore"]]},"abstract":[{"code":"NIOAny","type":"codeVoice"},{"text":" is an opaque container for values of ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"any","type":"text"}]},{"text":" type, similar to Swift’s builtin ","type":"text"},{"code":"Any","type":"codeVoice"},{"text":" type. Contrary to","type":"text"},{"text":" ","type":"text"},{"code":"Any","type":"codeVoice"},{"text":" the overhead of ","type":"text"},{"type":"codeVoice","code":"NIOAny"},{"text":" depends on the the type of the wrapped value. Certain types that are important","type":"text"},{"text":" ","type":"text"},{"text":"for the performance of a SwiftNIO application like ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":", ","type":"text"},{"type":"codeVoice","code":"FileRegion"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"AddressEnvelope<ByteBuffer>"},{"text":" can be expected","type":"text"},{"text":" ","type":"text"},{"text":"to be wrapped almost without overhead. All others will have similar performance as if they were passed as an ","type":"text"},{"type":"codeVoice","code":"Any"},{"text":" as","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"NIOAny"},{"text":" just like ","type":"text"},{"type":"codeVoice","code":"Any"},{"text":" will contain them within an existential container.","type":"text"}],"sections":[],"topicSections":[{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOAny\/init(_:)"],"title":"Initializers"},{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOAny\/CustomStringConvertible-Implementations"],"generated":true,"title":"Default Implementations"}],"references":{"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOAny":{"abstract":[{"type":"codeVoice","code":"NIOAny"},{"text":" is an opaque container for values of ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"any"}]},{"text":" type, similar to Swift’s builtin ","type":"text"},{"type":"codeVoice","code":"Any"},{"text":" type. Contrary to","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Any"},{"text":" the overhead of ","type":"text"},{"type":"codeVoice","code":"NIOAny"},{"text":" depends on the the type of the wrapped value. Certain types that are important","type":"text"},{"text":" ","type":"text"},{"text":"for the performance of a SwiftNIO application like ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":", ","type":"text"},{"type":"codeVoice","code":"FileRegion"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"AddressEnvelope<ByteBuffer>"},{"text":" can be expected","type":"text"},{"text":" ","type":"text"},{"text":"to be wrapped almost without overhead. All others will have similar performance as if they were passed as an ","type":"text"},{"type":"codeVoice","code":"Any"},{"text":" as","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"NIOAny"},{"text":" just like ","type":"text"},{"type":"codeVoice","code":"Any"},{"text":" will contain them within an existential container.","type":"text"}],"title":"NIOAny","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOAny","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOAny","kind":"identifier"}],"kind":"symbol","navigatorTitle":[{"text":"NIOAny","kind":"identifier"}],"type":"topic","url":"\/documentation\/niocore\/nioany"},"doc://co.pointfree.VaporRouting/documentation/NIOCore":{"title":"NIOCore","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","abstract":[],"url":"\/documentation\/niocore","type":"topic","kind":"symbol","role":"collection"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOAny/init(_:)":{"title":"init(_:)","abstract":[{"text":"Wrap a value in a ","type":"text"},{"type":"codeVoice","code":"NIOAny"},{"text":". In most cases you should not create a ","type":"text"},{"type":"codeVoice","code":"NIOAny"},{"text":" directly using this constructor.","type":"text"},{"text":" ","type":"text"},{"text":"The abstraction that accepts values of type ","type":"text"},{"type":"codeVoice","code":"NIOAny"},{"text":" must also provide a mechanism to do the wrapping. An","type":"text"},{"text":" ","type":"text"},{"text":"example is a ","type":"text"},{"code":"ChannelInboundHandler","type":"codeVoice"},{"text":" which provides ","type":"text"},{"code":"self.wrapInboundOut(aValueOfTypeInboundOut)","type":"codeVoice"},{"text":".","type":"text"}],"fragments":[{"text":"init","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":")","kind":"text"}],"type":"topic","role":"symbol","url":"\/documentation\/niocore\/nioany\/init(_:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOAny\/init(_:)","kind":"symbol"},"doc://co.pointfree.VaporRouting/s23CustomStringConvertibleP":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/s23CustomStringConvertibleP","type":"unresolvable","title":"Swift.CustomStringConvertible"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOAny/CustomStringConvertible-Implementations":{"kind":"article","url":"\/documentation\/niocore\/nioany\/customstringconvertible-implementations","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOAny\/CustomStringConvertible-Implementations","type":"topic","abstract":[],"title":"CustomStringConvertible Implementations","role":"collectionGroup"}}}