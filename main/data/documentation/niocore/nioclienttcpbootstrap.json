{"primaryContentSections":[{"declarations":[{"platforms":["Linux"],"tokens":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOClientTCPBootstrap","kind":"identifier"}],"languages":["swift"]}],"kind":"declarations"},{"kind":"content","content":[{"level":2,"anchor":"overview","type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Usually, to bootstrap a connection with SwiftNIO, you have to match the right "},{"type":"codeVoice","code":"EventLoopGroup"},{"type":"text","text":", the right bootstrap,"},{"type":"text","text":" "},{"type":"text","text":"and the right TLS implementation. Typical choices involve:"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"MultiThreadedEventLoopGroup"},{"type":"text","text":", "},{"type":"codeVoice","code":"ClientBootstrap"},{"type":"text","text":", and "},{"type":"codeVoice","code":"NIOSSLClientHandler"},{"type":"text","text":" (from"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/github.com\/apple\/swift-nio-ssl","isActive":true},{"type":"text","text":") for NIO on BSD sockets."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NIOTSEventLoopGroup"},{"type":"text","text":", "},{"type":"codeVoice","code":"NIOTSConnectionBootstrap"},{"type":"text","text":", and the Network.framework TLS implementation (all from"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/github.com\/apple\/swift-nio-transport-services","isActive":true},{"type":"text","text":"."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Bootstrapping connections that way works but is quite tedious for packages that support multiple ways of"},{"type":"text","text":" "},{"type":"text","text":"bootstrapping. The idea behind "},{"code":"NIOClientTCPBootstrap","type":"codeVoice"},{"type":"text","text":" is to do all configuration in one place (when you initialize"},{"type":"text","text":" "},{"type":"text","text":"a "},{"code":"NIOClientTCPBootstrap","type":"codeVoice"},{"type":"text","text":") and then have a common API that works for all use-cases."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Example:"}]},{"type":"codeListing","code":["\/\/ This function combines the right pieces and returns you a \"universal client bootstrap\"","\/\/ (`NIOClientTCPBootstrap`). This allows you to bootstrap connections (with or without TLS) using either the","\/\/ NIO on sockets (`NIO`) or NIO on Network.framework (`NIOTransportServices`) stacks.","\/\/ The remainder of the code should be platform-independent.","func makeUniversalBootstrap(serverHostname: String) throws -> (NIOClientTCPBootstrap, EventLoopGroup) {","    func useNIOOnSockets() throws -> (NIOClientTCPBootstrap, EventLoopGroup) {","        let group = MultiThreadedEventLoopGroup(numberOfThreads: 1)","        let sslContext = try NIOSSLContext(configuration: TLSConfiguration.forClient())","        let bootstrap = try NIOClientTCPBootstrap(ClientBootstrap(group: group),","                                                  tls: NIOSSLClientTLSProvider(context: sslContext,","                                                                               serverHostname: serverHostname))","        return (bootstrap, group)","    }","","    #if canImport(Network)","    if #available(macOS 10.14, iOS 12, tvOS 12, watchOS 3, *) {","        \/\/ We run on a new-enough Darwin so we can use Network.framework","","        let group = NIOTSEventLoopGroup()","        let bootstrap = NIOClientTCPBootstrap(NIOTSConnectionBootstrap(group: group),","                                              tls: NIOTSClientTLSProvider())","        return (bootstrap, group)","    } else {","        \/\/ We're on Darwin but not new enough for Network.framework, so we fall back on NIO on BSD sockets.","        return try useNIOOnSockets()","    }","    #else","    \/\/ We are on a non-Darwin platform, so we'll use BSD sockets.","    return try useNIOOnSockets()","    #endif","}","","let (bootstrap, group) = try makeUniversalBootstrap(serverHostname: \"example.com\")","let connection = try bootstrap","        .channelInitializer { channel in","            channel.pipeline.addHandler(PrintEverythingHandler { _ in })","        }","        .enableTLS()","        .connect(host: \"example.com\", port: 443)","        .wait()"],"syntax":null}]}],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore"]]},"abstract":[{"type":"codeVoice","code":"NIOClientTCPBootstrap"},{"text":" is a bootstrap that allows you to bootstrap client TCP connections using NIO on BSD Sockets,","type":"text"},{"text":" ","type":"text"},{"text":"NIO Transport Services, or other ways.","type":"text"}],"variants":[{"paths":["\/documentation\/niocore\/nioclienttcpbootstrap"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"patch":0,"major":0,"minor":3},"topicSections":[{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap\/init(_:tls:)"],"title":"Initializers"},{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap\/underlyingBootstrap"],"title":"Instance Properties"},{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap\/channelConvenienceOptions(_:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap\/channelInitializer(_:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap\/channelOption(_:value:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap\/connect(host:port:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap\/connect(to:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap\/connect(unixDomainSocketPath:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap\/connectTimeout(_:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap\/enableTLS()"],"title":"Instance Methods"}],"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap","interfaceLanguage":"swift"},"sections":[],"metadata":{"externalID":"s:7NIOCore21NIOClientTCPBootstrapV","symbolKind":"struct","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOClientTCPBootstrap"}],"navigatorTitle":[{"kind":"identifier","text":"NIOClientTCPBootstrap"}],"roleHeading":"Structure","title":"NIOClientTCPBootstrap","modules":[{"name":"NIOCore"}]},"references":{"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOClientTCPBootstrap/enableTLS()":{"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap\/enableTLS()","abstract":[],"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"enableTLS","kind":"identifier"},{"text":"() -> ","kind":"text"},{"preciseIdentifier":"s:7NIOCore21NIOClientTCPBootstrapV","text":"NIOClientTCPBootstrap","kind":"typeIdentifier"}],"title":"enableTLS()","role":"symbol","kind":"symbol","url":"\/documentation\/niocore\/nioclienttcpbootstrap\/enabletls()"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOClientTCPBootstrap/connect(to:)":{"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap\/connect(to:)","abstract":[{"text":"Specify the ","type":"text"},{"code":"address","type":"codeVoice"},{"type":"text","text":" to connect to for the TCP "},{"code":"Channel","type":"codeVoice"},{"type":"text","text":" that will be established."}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"connect","kind":"identifier"},{"text":"(","kind":"text"},{"text":"to","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7NIOCore13SocketAddressO","text":"SocketAddress","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:7NIOCore15EventLoopFutureC","text":"EventLoopFuture","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"preciseIdentifier":"s:7NIOCore7ChannelP","text":"Channel","kind":"typeIdentifier"},{"text":">","kind":"text"}],"title":"connect(to:)","role":"symbol","kind":"symbol","url":"\/documentation\/niocore\/nioclienttcpbootstrap\/connect(to:)"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOClientTCPBootstrap/channelInitializer(_:)":{"role":"symbol","kind":"symbol","abstract":[{"text":"Initialize the connected ","type":"text"},{"type":"codeVoice","code":"SocketChannel"},{"text":" with ","type":"text"},{"type":"codeVoice","code":"initializer"},{"text":". The most common task in initializer is to add","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"ChannelHandler"},{"text":"s to the ","type":"text"},{"type":"codeVoice","code":"ChannelPipeline"},{"text":".","type":"text"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"channelInitializer","kind":"identifier"},{"text":"((","kind":"text"},{"text":"Channel","preciseIdentifier":"s:7NIOCore7ChannelP","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Void","preciseIdentifier":"s:s4Voida","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"text":"NIOClientTCPBootstrap","preciseIdentifier":"s:7NIOCore21NIOClientTCPBootstrapV","kind":"typeIdentifier"}],"type":"topic","title":"channelInitializer(_:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap\/channelInitializer(_:)","url":"\/documentation\/niocore\/nioclienttcpbootstrap\/channelinitializer(_:)"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOClientTCPBootstrap/channelOption(_:value:)":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap\/channelOption(_:value:)","title":"channelOption(_:value:)","abstract":[{"type":"text","text":"Specifies a "},{"code":"ChannelOption","type":"codeVoice"},{"type":"text","text":" to be applied to the "},{"type":"codeVoice","code":"SocketChannel"},{"type":"text","text":"."}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"channelOption"},{"text":"<","kind":"text"},{"text":"Option","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"Option","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"value","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Option","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:7NIOCore21NIOClientTCPBootstrapV","text":"NIOClientTCPBootstrap","kind":"typeIdentifier"}],"kind":"symbol","type":"topic","role":"symbol","url":"\/documentation\/niocore\/nioclienttcpbootstrap\/channeloption(_:value:)"},"https://github.com/apple/swift-nio-ssl":{"identifier":"https:\/\/github.com\/apple\/swift-nio-ssl","titleInlineContent":[{"code":"swift-nio-ssl","type":"codeVoice"}],"type":"link","url":"https:\/\/github.com\/apple\/swift-nio-ssl","title":"swift-nio-ssl"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOClientTCPBootstrap/connectTimeout(_:)":{"role":"symbol","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"connectTimeout","kind":"identifier"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:7NIOCore10TimeAmountV","text":"TimeAmount","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:7NIOCore21NIOClientTCPBootstrapV","text":"NIOClientTCPBootstrap","kind":"typeIdentifier"}],"title":"connectTimeout(_:)","url":"\/documentation\/niocore\/nioclienttcpbootstrap\/connecttimeout(_:)","kind":"symbol","abstract":[],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap\/connectTimeout(_:)"},"https://github.com/apple/swift-nio-transport-services":{"identifier":"https:\/\/github.com\/apple\/swift-nio-transport-services","titleInlineContent":[{"code":"swift-nio-transport-services","type":"codeVoice"}],"type":"link","url":"https:\/\/github.com\/apple\/swift-nio-transport-services","title":"swift-nio-transport-services"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOClientTCPBootstrap/init(_:tls:)":{"type":"topic","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap\/init(_:tls:)","kind":"symbol","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Bootstrap"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"TLS"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"Bootstrap"},{"kind":"text","text":", "},{"kind":"externalParam","text":"tls"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"TLS"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Initialize a "},{"type":"codeVoice","code":"NIOClientTCPBootstrap"},{"type":"text","text":" using the underlying "},{"type":"codeVoice","code":"Bootstrap"},{"type":"text","text":" alongside a compatible "},{"type":"codeVoice","code":"TLS"},{"type":"text","text":" "},{"type":"text","text":"implementation."}],"title":"init(_:tls:)","url":"\/documentation\/niocore\/nioclienttcpbootstrap\/init(_:tls:)"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOClientTCPBootstrap/connect(host:port:)":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap\/connect(host:port:)","role":"symbol","type":"topic","url":"\/documentation\/niocore\/nioclienttcpbootstrap\/connect(host:port:)","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"connect","kind":"identifier"},{"text":"(","kind":"text"},{"text":"host","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"port","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:7NIOCore15EventLoopFutureC","text":"EventLoopFuture","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"preciseIdentifier":"s:7NIOCore7ChannelP","text":"Channel","kind":"typeIdentifier"},{"text":">","kind":"text"}],"abstract":[{"type":"text","text":"Specify the "},{"code":"host","type":"codeVoice"},{"type":"text","text":" and "},{"code":"port","type":"codeVoice"},{"type":"text","text":" to connect to for the TCP "},{"code":"Channel","type":"codeVoice"},{"type":"text","text":" that will be established."}],"title":"connect(host:port:)"},"doc://co.pointfree.VaporRouting/documentation/NIOCore":{"title":"NIOCore","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","abstract":[],"url":"\/documentation\/niocore","type":"topic","kind":"symbol","role":"collection"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOClientTCPBootstrap/channelConvenienceOptions(_:)":{"url":"\/documentation\/niocore\/nioclienttcpbootstrap\/channelconvenienceoptions(_:)","role":"symbol","abstract":[{"type":"text","text":"Specifies some "},{"code":"TCPConvenienceOption","type":"codeVoice"},{"type":"text","text":"s to be applied to the channel."},{"type":"text","text":" "},{"type":"text","text":"These are preferred over regular channel options as they are easier to use and restrict"},{"type":"text","text":" "},{"type":"text","text":"options to those which a normal user would consider."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap\/channelConvenienceOptions(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"channelConvenienceOptions","kind":"identifier"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:7NIOCore14ChannelOptionsV","text":"ChannelOptions","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:7NIOCore14ChannelOptionsV014TCPConvenienceC0V","text":"TCPConvenienceOptions","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:7NIOCore21NIOClientTCPBootstrapV","text":"NIOClientTCPBootstrap","kind":"typeIdentifier"}],"type":"topic","title":"channelConvenienceOptions(_:)","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOClientTCPBootstrap/underlyingBootstrap":{"title":"underlyingBootstrap","kind":"symbol","role":"symbol","url":"\/documentation\/niocore\/nioclienttcpbootstrap\/underlyingbootstrap","type":"topic","abstract":[],"fragments":[{"text":"let","kind":"keyword"},{"text":" ","kind":"text"},{"text":"underlyingBootstrap","kind":"identifier"},{"text":": ","kind":"text"},{"text":"NIOClientTCPBootstrapProtocol","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore29NIOClientTCPBootstrapProtocolP"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap\/underlyingBootstrap"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOClientTCPBootstrap":{"title":"NIOClientTCPBootstrap","kind":"symbol","role":"symbol","url":"\/documentation\/niocore\/nioclienttcpbootstrap","type":"topic","abstract":[{"type":"codeVoice","code":"NIOClientTCPBootstrap"},{"type":"text","text":" is a bootstrap that allows you to bootstrap client TCP connections using NIO on BSD Sockets,"},{"type":"text","text":" "},{"type":"text","text":"NIO Transport Services, or other ways."}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOClientTCPBootstrap","kind":"identifier"}],"navigatorTitle":[{"text":"NIOClientTCPBootstrap","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOClientTCPBootstrap/connect(unixDomainSocketPath:)":{"role":"symbol","title":"connect(unixDomainSocketPath:)","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap\/connect(unixDomainSocketPath:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"connect"},{"kind":"text","text":"("},{"kind":"externalParam","text":"unixDomainSocketPath"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"text":") -> ","kind":"text"},{"text":"EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Channel","preciseIdentifier":"s:7NIOCore7ChannelP","kind":"typeIdentifier"},{"text":">","kind":"text"}],"url":"\/documentation\/niocore\/nioclienttcpbootstrap\/connect(unixdomainsocketpath:)","abstract":[{"text":"Specify the ","type":"text"},{"type":"codeVoice","code":"unixDomainSocket"},{"text":" path to connect to for the UDS ","type":"text"},{"type":"codeVoice","code":"Channel"},{"type":"text","text":" that will be established."}],"kind":"symbol"}}}